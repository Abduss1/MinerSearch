//#define BETA

using Microsoft.Win32;
using Microsoft.Win32.TaskScheduler;
using MinerSearch.Properties;
using NetFwTypeLib;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Security.Principal;
using System.ServiceProcess;
using System.Threading;

namespace MinerSearch
{
    public class MinerSearch
    {
        int[] _PortList = new[]
        {
            1111,
            1112,
            9999,
            14444,
            14433,
            6666,
            16666,
            6633,
            16633,
            4444,
            14444,
            3333,
            13333,
            7777,
            5555,
            9980
        };

        readonly string[] _nvdlls = new[]
        {
            "nvcompiler.dll",
            "nvopencl.dll",
            "nvfatbinaryLoader.dll",
            "nvapi64.dll",
            "OpenCL.dll"
        };

        List<string> obfStr2 = new List<string>() {
Program.drive_letter + Bfs.Create("RwYyte+xuegVQ+WDN4EXuysswmhHl/3uCchTq34o9Mw=",
            new byte[] {0xdc,0xb3,0x54,0x0f,0x90,0xf7,0xfb,0x11,0x51,0x56,0x81,0x0a,0xec,0x8e,0xaa,0x92,0x75,0x9b,0x18,0xe6,0xa7,0x9f,0xca,0xb4,0xcb,0x95,0x3d,0x17,0xf2,0x57,0x30,0xd2},
            new byte[] {0x6d,0x7a,0x9a,0x60,0xc8,0xed,0x3d,0xf5,0x00,0x47,0xa5,0x62,0xac,0x22,0x51,0x48}), //:\ProgramData\Microsoft\win.exe
Program.drive_letter + Bfs.Create("3UR4TnUL/rLUOLJmQRu0hAPBYAOceOxA1KwevcwG3d4N78N+0L7qiwpdACJIEzZ7",
            new byte[] {0xfd,0x9b,0xf2,0x11,0x7b,0x07,0x13,0xab,0x8d,0x97,0x98,0x35,0x07,0xb3,0x90,0x54,0x2e,0x9a,0xdd,0xf5,0x8d,0x0a,0x1b,0x14,0x67,0xb5,0xc0,0x1a,0x69,0x59,0x97,0x07},
            new byte[] {0xbb,0x48,0xa0,0x6b,0x69,0xd1,0x47,0xce,0x82,0x21,0xd0,0x09,0x00,0xb2,0x9c,0x3a}), //:\Program Files\Google\Chrome\updater.exe
Program.drive_letter + Bfs.Create("tI4xAayGLF8yHq/OXSLUlevzjQZaNMcF1kRQyOe6o0nVP2wks0LocjtqhDCl/VPL",
            new byte[] {0x97,0x8f,0x48,0xa8,0x9d,0xa1,0xc9,0x5e,0xda,0xb7,0xfc,0x65,0xcb,0x2b,0xa2,0x77,0x00,0xd7,0x86,0xdd,0x5e,0x0c,0x7d,0xf0,0x35,0x48,0x6c,0x4d,0x57,0x50,0xc2,0x48},
            new byte[] {0x88,0x14,0x16,0x11,0x61,0xc2,0xa3,0x5e,0x59,0x5a,0x51,0x31,0x4e,0x3c,0xe6,0xa0}), //:\ProgramData\Google\Chrome\updater.exe
Program.drive_letter + Bfs.Create("vPGSepuF0G9ncHEUrGhSLdqCC4EEyFU5PkDrlZ6hLLk=",
            new byte[] {0x60,0x97,0x65,0x77,0x49,0xc2,0xf4,0x40,0xa6,0xeb,0x3a,0xe9,0xb6,0xab,0x84,0xbe,0xfe,0xdc,0x2c,0xc8,0x4c,0x00,0x7f,0x5e,0x89,0x1b,0x0e,0xfa,0x97,0x92,0x80,0x11},
            new byte[] {0x7b,0x84,0x37,0x81,0x32,0x2e,0x4b,0x37,0xea,0xf6,0x79,0xb4,0x1a,0x3e,0x79,0xa1}), //:\ProgramData\RDPWinst.exe
Program.drive_letter + Bfs.Create("+2fi+ybcCoxnODd19bbrctR7GLEJvFCY5D4aUoYe7Z3+558s+I+P12wKdAOXgQ1I",
            new byte[] {0x7b,0x91,0xd2,0xd7,0x35,0xa6,0x2d,0x0f,0x4a,0x50,0x7e,0x8c,0x4f,0xa9,0xf7,0xb9,0xee,0xca,0x00,0xe6,0xfe,0x48,0xc8,0xe1,0xc5,0x02,0x6b,0x0c,0x92,0x20,0xc6,0x42},
            new byte[] {0xd2,0xad,0xe0,0x44,0x8b,0xde,0x2d,0xe2,0xf1,0x24,0x12,0xa0,0xd2,0x39,0x35,0xf1}), //:\ProgramData\ReaItekHD\taskhost.exe
Program.drive_letter + Bfs.Create("ExzsuGyWMvTMWzHFd3hmiXd5GAuTlDec/F1s8Caqi70B8ShWpbNbvBfxMVJj3/9e",
            new byte[] {0xb6,0x68,0x10,0xd1,0xfc,0x1e,0x12,0xda,0x89,0xe2,0x20,0xca,0x53,0xf5,0x55,0x40,0xd2,0x8e,0xdc,0x06,0xd4,0x4c,0x3e,0xfc,0xca,0x14,0xf5,0x1e,0x32,0x1f,0xe4,0x5b},
            new byte[] {0x64,0xfa,0x7e,0x1c,0x2b,0x3c,0x35,0x6b,0xfb,0x54,0xb5,0x0f,0x67,0x0b,0x09,0xd0}), //:\ProgramData\ReaItekHD\taskhostw.exe
Program.drive_letter + Bfs.Create("qCp8Qy00mVVIGPYpZ+3ognmVzB4jVlWKT2cBcvOUlGQOZRxWu58687NhlXpQCtnF",
            new byte[] {0xdb,0x90,0x47,0x6b,0x80,0x4c,0x72,0x29,0xc1,0x83,0xd4,0x13,0xc2,0x2a,0xb9,0x3d,0xa8,0xc8,0x8d,0x37,0x4f,0x26,0xf4,0xfb,0xdb,0x2f,0xc7,0x13,0x69,0x3f,0x6f,0xf5},
            new byte[] {0x9a,0x54,0x76,0x20,0xac,0x7b,0x5e,0xbb,0xd9,0x54,0x4e,0x55,0x9e,0xaf,0xb4,0xb0}), //:\ProgramData\RealtekHD\taskhost.exe
Program.drive_letter + Bfs.Create("aieWsyoni3Man7WhjFC0RZlWl3Pnuh3g/QrTVeVXLEFuXDpssw88UQDEDFNG7cjC",
            new byte[] {0x9d,0xbc,0x92,0xfc,0xd9,0x36,0xab,0xec,0x6a,0xef,0xde,0xf7,0xd2,0xb8,0x63,0x21,0x22,0xf0,0x2e,0x03,0xb1,0x81,0x3b,0x6c,0x1f,0x47,0x98,0xf8,0x4a,0xc3,0x40,0x63},
            new byte[] {0xe9,0xbe,0x32,0x90,0xf6,0xa5,0xb7,0xd4,0x09,0x88,0xe7,0xab,0x69,0xb1,0xf0,0x59}), //:\ProgramData\RealtekHD\taskhostw.exe
Program.drive_letter + Bfs.Create("zhHJtSdtXzGE5YJpIn3n6UQtCJL6neD+k/3xTJrxC9UZIdMfjzen+twnhkvV9Xpz",
            new byte[] {0x22,0x2f,0xac,0xba,0xa4,0x19,0x61,0x93,0xde,0xf8,0x62,0xb9,0xb4,0x6f,0x34,0x80,0x1f,0xe1,0x48,0x9d,0x31,0x59,0xca,0x35,0x1b,0x9f,0x40,0xf2,0x3d,0x5d,0x35,0xe2},
            new byte[] {0x7f,0x2d,0xa6,0x1d,0x9c,0xbb,0xcb,0x56,0xe5,0xe6,0x29,0xf3,0xbb,0x75,0x98,0x50}), //:\ProgramData\Windows Tasks Service\winserv.exe
Program.drive_letter + Bfs.Create("Xaa5KlUWcIyYxGdHoEKD5vDrVGB5DnfjS0eUWtVQercedRqvnR6KmjEgBWzAIvq2",
            new byte[] {0xe1,0xe9,0x98,0x80,0xbe,0x34,0x6a,0xff,0xfa,0x22,0xb3,0x2a,0x64,0x97,0xfd,0x2b,0x37,0x7e,0xad,0x75,0xba,0x9f,0x87,0x71,0x8c,0x8c,0xad,0x10,0x65,0x23,0x88,0xdd},
            new byte[] {0x1a,0x09,0x60,0x2a,0x7c,0xc2,0x35,0xfc,0xd5,0x0f,0x87,0x60,0xb9,0xb2,0x58,0xa3}), //:\ProgramData\WindowsTask\AMD.exe
Program.drive_letter + Bfs.Create("rbGAItc/tRliyk+hIA1mb4Y6xQQSuxDRklZjdJT2aZmlYnxWvd+9I6KDpmie/Trs",
            new byte[] {0xc8,0x7d,0xa6,0x68,0xc8,0x79,0x80,0x87,0x32,0x74,0xf5,0x69,0xc5,0x0c,0xcb,0x90,0xcb,0xf1,0x51,0xaf,0x7f,0x83,0xf9,0xf9,0xe5,0xc0,0x35,0x87,0xe4,0x92,0xe9,0x8f},
            new byte[] {0x91,0x3f,0xde,0x43,0xb3,0x06,0x8a,0xab,0x8b,0xf3,0x25,0xd8,0x74,0x84,0xa4,0xde}), //:\ProgramData\WindowsTask\AppModule.exe
Program.drive_letter + Bfs.Create("d7uRSFZGvDZ1o4GGvn8oMgLg8LKn2j61abZVIP7UJJmMT497iCri7tVmk1k74FNJ",
            new byte[] {0x7d,0x08,0x22,0x6a,0x1c,0x24,0x16,0xf3,0xb8,0x03,0x8c,0xb5,0x36,0x65,0xe3,0x6c,0x60,0xa4,0xb8,0x31,0x5b,0xb8,0x52,0x80,0x5f,0x01,0x68,0xd3,0x0b,0x03,0xcc,0xf8},
            new byte[] {0xb0,0xd3,0x91,0xa4,0xa2,0x62,0xc8,0xf4,0xa1,0x4f,0xcf,0xa9,0xe0,0xa6,0x59,0xab}), //:\ProgramData\WindowsTask\audiodg.exe
Program.drive_letter + Bfs.Create("KPtp+of7sfh0clz6cebAd7b2GaGD+lZ+gqWJcCqdyZ3mchUVdGpYO3w52Oz3Vdfn",
            new byte[] {0xb2,0x0b,0x65,0x77,0xd3,0x6f,0x83,0xeb,0x95,0x28,0x28,0x94,0x63,0xf2,0xe0,0x7c,0xf8,0x15,0x11,0x96,0x5f,0x30,0x41,0xa8,0xe0,0x60,0xfb,0x3e,0x3b,0x1c,0x11,0x54},
            new byte[] {0x86,0x7a,0xb6,0x55,0x6b,0xcb,0x88,0x66,0xfb,0xa9,0xce,0x7d,0xdc,0x2d,0x53,0x3c}), //:\ProgramData\WindowsTask\MicrosoftHost.exe
Program.drive_letter + Bfs.Create("Id8xHuESJP79j2F1KBk89Rr/6xVSrGbFLdef+6U0L2s=",
            new byte[] {0x38,0x5d,0xfa,0x19,0x47,0xe2,0x34,0xfa,0x8c,0x00,0xc5,0x09,0xb6,0x52,0xdf,0x13,0x60,0x85,0x79,0x5d,0xcd,0x71,0xeb,0x23,0x1f,0x81,0x99,0x00,0xa5,0xb8,0x54,0x67},
            new byte[] {0x9e,0xb2,0xeb,0x84,0x0d,0xcd,0x6d,0x63,0x5d,0xd1,0xce,0x14,0x73,0xca,0x03,0x03}), //:\Windows\SysWOW64\unsecapp.exe
Program.drive_letter + Bfs.Create("ckNIvz60nIxKf+TEyozmi/FRaw2MkQBolE2lmK4cd4fD09UhT4Q126ITwvhyipPX",
            new byte[] {0x19,0x6b,0x33,0x99,0x15,0x9a,0x78,0x7a,0x1f,0x0e,0xfd,0xee,0x80,0x45,0x73,0xed,0x9e,0x31,0xd1,0x60,0x48,0xbe,0x36,0x3a,0x55,0xc6,0xa4,0xcf,0x79,0x4d,0xd0,0xf8},
            new byte[] {0x9c,0x57,0xcd,0xc9,0xaa,0x61,0x50,0x4d,0xff,0x1b,0xfc,0x61,0xea,0x60,0x8c,0x82}), //:\ProgramData\Timeupper\HVPIO.exe
};

        string[] obfStr7 = new string[] {
Bfs.Create("LU3miVB39IwG5UCYlsEP0FK7PXLhY9+QH58o3Tbt3EfL/En/S+tsy7Upom6FtiEgt/onXQJnyiJSFG0EEmOrFA==",
            new byte[] {0xdb,0xfc,0x8a,0x52,0x5a,0x97,0xcf,0x9d,0x62,0x0b,0x4e,0xd9,0xc9,0x49,0xa8,0xbe,0x53,0xa8,0xc3,0x44,0x65,0x2c,0xb4,0x6d,0x2a,0x5a,0xe6,0x08,0xcb,0x17,0xbf,0x8c},
            new byte[] {0x70,0xec,0x82,0x92,0xb2,0xf7,0x11,0xbb,0x33,0x42,0xb7,0x0e,0xe7,0x3a,0x01,0x9b}), //SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
Bfs.Create("x9KHoTVUBaS6vUe7+Giygdpxqls6fAUGDzTeUV6fq9Mvn2c2EOb5singQWL0YtexoAhua7JmWiftsKOzY9HBug==",
            new byte[] {0xa9,0xd4,0xd8,0xcd,0x76,0xcb,0xdf,0x7f,0x1c,0x43,0x36,0x8a,0x76,0xc2,0x1a,0x07,0x13,0xd2,0xa9,0x52,0x4f,0xec,0x4a,0x38,0xaa,0xbf,0x0b,0xa9,0x9c,0x21,0x33,0x4d},
            new byte[] {0x5a,0x35,0xf4,0xab,0x59,0xe0,0x8e,0x23,0xf7,0x81,0xd2,0xde,0x2e,0x67,0xd6,0xf4}), //Software\Microsoft\Windows\CurrentVersion\Policies\Explorer
Bfs.Create("/Dpu3wyOX/xz7u9vPQoPDnWJT5xigscq0OOgo77UenB8rPAnnLlSEhFoNrzf+NyHrhjLAuwTvBJzL7RNxUurQK3Bm7GmB4plKC3KG85Tj2s=",
            new byte[] {0xec,0x36,0xd2,0xcc,0xb6,0xff,0x9b,0x05,0xcb,0xcb,0x71,0xf2,0x9c,0x66,0x85,0x25,0xb5,0x29,0x50,0x86,0x5c,0x40,0x69,0x1e,0xb5,0xdc,0x0a,0x32,0x8a,0x5f,0xed,0x93},
            new byte[] {0x86,0xe8,0x48,0xd6,0xfa,0x3d,0xb8,0x1f,0x32,0xaa,0x88,0xd4,0x70,0x09,0x52,0x6d}), //Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun
Bfs.Create("UN6mSjm/CtO9du3IhmhVZSaupYGB8ULwEU1G0lc9nG33AE5fqMAblgf5rfacLtwaQYD50ZnqQePpjTl1fkONTw==",
            new byte[] {0x57,0x51,0x95,0x8c,0x6a,0xc6,0x60,0x44,0x18,0xd7,0xa8,0x51,0xb8,0x2a,0x74,0x69,0x31,0x10,0xcd,0xfe,0xd9,0x4d,0x0b,0x90,0x0c,0x48,0xf9,0x92,0x04,0xa6,0x46,0x3a},
            new byte[] {0xc6,0x0b,0xe8,0x7a,0x75,0x9a,0x3c,0x6e,0xf7,0xd7,0x04,0x5d,0x97,0x3a,0x13,0x6f}), //SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows
Bfs.Create("9iwGhhAz5q5f84tCOM8FEpvtBaJ8LdZNrZjgHn1vyuNciOt0PQsHXMcMUXVVmpb3XISj+u0Tr28Wp9gph47Mug==",
            new byte[] {0x0c,0x76,0xcb,0x69,0x85,0xb1,0xca,0x57,0x32,0x19,0x8a,0xf6,0x04,0x79,0x8a,0xa8,0x38,0x10,0xc5,0xe8,0x5b,0x96,0x3d,0x15,0x11,0xca,0x5e,0x39,0xd8,0x4c,0xd0,0x74},
            new byte[] {0x35,0x27,0x72,0x19,0xe6,0x6b,0xa1,0x9a,0xbd,0x12,0x5d,0x8d,0x2a,0x79,0x79,0xc1}), //[!] Cannot open HKLM\...\CurrentVersion\Windows:
Bfs.Create("wqOvCpfcoWpbCCR6pxUvf2DNa1EfSktjF467MESCGA3dhtt1sjI/lHrQ7YMHdnuK",
            new byte[] {0xc8,0x97,0x54,0x55,0xfc,0x34,0xab,0xc5,0x01,0x04,0x4b,0x65,0xf4,0xd8,0xaf,0x74,0xf0,0x31,0xe3,0xaf,0xef,0x73,0xac,0x9a,0x9b,0x1f,0xd4,0x58,0x07,0x6e,0xb6,0x66},
            new byte[] {0xd5,0x9a,0x39,0xf0,0x2f,0x81,0x61,0x19,0x87,0xb1,0xa9,0xe4,0x4e,0x96,0xf7,0x67}), //Software\Microsoft\Windows\CurrentVersion\Run
Bfs.Create("lBSVNlsXRdnU6gpaGKtj9nE2zFWXwwUDifUHa5H7BqKg/12RVjZx/A1qOIKV+xRwz27MliAGNJ/7JFcvpkhpcQ==",
            new byte[] {0x16,0x5d,0x0d,0x66,0x74,0xe7,0x99,0xf7,0xb3,0x7d,0x02,0x9a,0xe0,0xd0,0x43,0xe0,0x5e,0x6f,0x79,0x74,0x98,0x7c,0xc2,0xb2,0x4d,0x1a,0x57,0xb1,0x59,0x34,0xb8,0xee},
            new byte[] {0x9c,0x35,0x39,0xde,0xab,0x90,0x53,0x12,0x13,0x24,0xaa,0x2f,0x5c,0xe5,0x2d,0xdc}), //HKLM\Software\Policies\Microsoft\Windows Defender\Exclusions
Bfs.Create("zR65Yq7D48y229TtQh23VvLB59UbT/1F63srdOtNsDhdbs/cYm/3+VFXxaD2hoDR8rqaJ3QKrrtRVkaNjCFiQA==",
            new byte[] {0x96,0x0b,0x7a,0x45,0x92,0x1a,0x9f,0xd4,0x91,0xdd,0xa9,0x2d,0x7c,0x95,0xf6,0x68,0x9d,0xc9,0x68,0x95,0xb0,0xf0,0xbf,0xc2,0xae,0x38,0x29,0x10,0x07,0xc2,0xfe,0x4f},
            new byte[] {0xad,0xdb,0xfa,0x11,0x01,0x0d,0xf3,0xab,0x47,0xf2,0xba,0xd8,0xf6,0x95,0x6d,0xbf}), //Software\Policies\Microsoft\Windows Defender\Exclusions
Bfs.Create("SK9P0wyZ4ug/EJ/YYMxilGq31vnEXru67cSKCjX7b/bo+sBdiR5ovFgwgnW0nKqiCqPP/gO+cFTV54JVMABO4w==",
            new byte[] {0x34,0x65,0x12,0x6d,0x42,0x39,0x01,0xe6,0x31,0x1d,0x5e,0x5c,0x7a,0xfb,0xb0,0x98,0x11,0xe8,0xa4,0x7c,0x36,0xa5,0xe7,0xe4,0x16,0x11,0x27,0x7e,0x98,0x10,0x71,0x5c},
            new byte[] {0x34,0xa4,0x83,0x4e,0xd4,0x78,0x47,0x57,0x41,0x9b,0x15,0xc5,0x29,0xa7,0x71,0x3a}), //Software\Policies\Microsoft\Windows Defender\Exclusions\Paths
Bfs.Create("gjHmsMBrNiEbskG46AZWZ2fucLdyTyZqmRbEoJese21sSFh3m7v0/3wAPIVPCs9nFkVUSpDnSc96hkH+yGSnEX3Ale99A2KeSKq5dya+HzE=",
            new byte[] {0x15,0x3c,0x23,0x2d,0xf5,0x0b,0x14,0x11,0x83,0x27,0x2c,0x3c,0x69,0x11,0x86,0x4f,0x7b,0xbe,0x5f,0xcb,0x4d,0x09,0x6a,0x31,0x90,0x1d,0xc8,0xa3,0x5c,0x74,0x03,0x1d},
            new byte[] {0x12,0x6e,0x34,0xfb,0x02,0xe7,0xbf,0x4c,0x89,0x14,0xb9,0x36,0xf7,0xd6,0x48,0x1e}), //Software\Policies\Microsoft\Windows Defender\Exclusions\Processes
Bfs.Create("+li/zitq8m1pbFqR+AB3rPBFaHeGFniFtXvcLC5HMzwMNzJjjX7MCpraiboZ+J1oMCx7vVurdYAVDj8W6K+TuA==",
            new byte[] {0xc9,0x40,0xa1,0x25,0xeb,0x32,0xb4,0x0a,0x44,0x3b,0x04,0xd6,0xfc,0x79,0xcb,0x82,0xb8,0x24,0x4d,0x98,0xe7,0x2c,0x01,0x24,0x1f,0xdd,0x1f,0xbb,0xaa,0x2b,0x2b,0x5b},
            new byte[] {0x3a,0x71,0xa2,0xe9,0xc8,0xee,0x02,0x19,0xa7,0x96,0xda,0x8b,0xb3,0x19,0xae,0x6c}), //[!] Cannot open HKLM\...\Windows Defender\Exclusions:
Bfs.Create("E+sj2UgDzgO4913BwzCNAd1jaEmoqx140I1wmllMgRHZDopPEHuRZdongQQkS7FLo99tRlzGiY9V+ja/fnP31g==",
            new byte[] {0xea,0x86,0x9a,0x27,0xc9,0x87,0x92,0xc3,0x35,0x19,0x5c,0x3b,0x55,0x20,0x4d,0x35,0x50,0x85,0xbc,0xee,0x14,0x39,0xbb,0x9b,0x68,0xb2,0xe0,0x08,0x0e,0x84,0x7a,0x79},
            new byte[] {0x88,0x56,0x0b,0x12,0xc9,0x68,0xd3,0x2d,0xf5,0xdd,0x04,0xc3,0xc5,0x47,0xef,0x11}), //SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run
Program.drive_letter + Bfs.Create("vBeCJGSga8uIxsPe+vdoXlkiNkY7KZ+G6TAI4UcNOCkm7Ptqf319nxyC5G887AJD",
            new byte[] {0xe6,0x40,0xfb,0xf4,0x38,0xa8,0xe5,0xf1,0x56,0xfa,0x42,0xfa,0xcb,0x6c,0x56,0x59,0xe9,0xf4,0x02,0xf4,0xd2,0x60,0x29,0x6b,0x6c,0x84,0x39,0x1f,0x01,0xf5,0x25,0x5b},
            new byte[] {0x82,0xb9,0x69,0x48,0x69,0xac,0x53,0x6e,0x55,0x7c,0xd2,0xa7,0x41,0x37,0x2f,0x0a}), //:\Windows\System32\WindowsPowerShell\v1.0
};


        List<HashedString> hStrings = new List<HashedString>() {
            new HashedString("a2883d9faa219af692c35404e8c5c05a",19), //codeload.github.com
            new HashedString("5fb3419335f5e5131ab3fc22d06ad195",20), //support.kaspersky.ru
            new HashedString("4bb1cae5c94216ccc7e666d60db2fa40",12), //kaspersky.ru
            new HashedString("83b6a29ee489bf3e976824b763c212e9",14), //virusinfo.info
            new HashedString("0282e441b801ef6fd6712b60b907417c",22), //forum.kasperskyclub.ru
            new HashedString("4360f8ffd51b17b8bc94745c4a26ef2c",13), //cyberforum.ru
            new HashedString("e752141e6b76cf60e0bf9f850654d46b",12), //soft-file.ru
            new HashedString("23c807844e8c9c0af34a82cc145b04b2",20), //360totalsecurity.com
            new HashedString("bd25a074d01c2eeb74d8563a09f9ebf6",12), //cezurity.com
            new HashedString("1a01fc7cc8de2fa07c52183572f06ac8",15), //www.dropbox.com
            new HashedString("6319434ad50ad9ec528bc21a6b2e9694",13), //193.228.54.23
            new HashedString("39cf9beb22c318b315fad9d0d5caa105",13), //spec-komp.com
            new HashedString("44d93a0928689480852de2b3d913a0bf",7), //eset.ua
            new HashedString("545f4178fd14d0a0fdacc18b68ac6a59",18), //regist.safezone.cc
            new HashedString("3469d5aaf70576a92d44eff48cbf9197",13), //programki.net
            new HashedString("09cf5cb0e321ef92ba384fddf03b215b",11), //safezone.cc
            new HashedString("2f814f460634c256b37b3b827abbf81d",16), //www.esetnod32.ru
            new HashedString("54cc7b8155fe3c550153cb8f70214343",12), //www.comss.ru
            new HashedString("460049e8266ca5270cf042506cc2e8eb",16), //forum.oszone.net
            new HashedString("a6891c5c195728b0c75bb10a9d3660db",10), //blog-pc.ru
            new HashedString("6c366a99be85761e88558f342a61b2c4",12), //securrity.ru
            new HashedString("4e42a4a95cf99a3d088efba6f84068c4",10), //norton.com
            new HashedString("41115f938d9471e588c43523ba7fb360",10), //vellisa.ru
            new HashedString("84b419681661cc59155b795e0ca7edf9",20), //download-software.ru
            new HashedString("b4de3925f3057e88a76809a1cf25abe5",15), //drweb-cureit.ru
            new HashedString("133dbe014f37d266a7863415cec81a4f",13), //softpacket.ru
            new HashedString("a2c665f4f9d1b72b6cf88bf0ec3de52a",17), //www.kaspersky.com
            new HashedString("80b73c20690f51646fecf5bedd00f14e",12), //www.avast.ua
            new HashedString("5fa4d0d3dc665c270e1d8f4f36742398",12), //www.avast.ru
            new HashedString("34c51c2dd1fa286e2665ed157dec0601",9), //zillya.ua
            new HashedString("626575b255ca41a9b3e7e38b229e49c7",11), //safezone.ua
            new HashedString("7d2500fc0c1b67428aac870cad7e5834",12), //vms.drweb.ru
            new HashedString("91c394760272fc16c952bdba553d3ea6",12), //www.drweb.ua
            new HashedString("b8d20b5201f66f17af21dc966c1e15f8",13), //free.drweb.ru
            new HashedString("348ccdb280b0c9205f73931c35380b3a",15), //biblprog.org.ua
            new HashedString("9bfeda9d06879971756e549d5edb6acd",20), //free-software.com.ua
            new HashedString("78e02266c69940f32b680bd1407f7cfd",26), //free.dataprotection.com.ua
            new HashedString("82ccc585a90ff5da773ed6321e1335d4",13), //www.drweb.com
            new HashedString("5a6822824a14727fd67a75ca9bcc0058",18), //www.softportal.com
            new HashedString("3277391ae8c21f703aedfa065382025e",14), //www.nashnet.ua
            new HashedString("820c5a952f7877246c895c5253017642",15), //softlist.com.ua
            new HashedString("b06cce9c842342a517eeb979550cb7ef",11), //it-doc.info
            new HashedString("2622e56675d064de2719011de10669c7",12), //esetnod32.ru
            new HashedString("6d134d427dd6cc0ac506d895e06e5bfa",14), //blog-bridge.ru
            new HashedString("6cbd967e469ea6671e3697f53f577e59",12), //remontka.pro
            new HashedString("7c07ca598d80ba314295db647b40bc16",14), //securos.org.ua
            new HashedString("da876e79f6730f35c4678969c5b01b3f",12), //pc-helpp.com
            new HashedString("0f93e1b1f0c1954c307f1e0e6462a8ce",13), //softdroid.net
            new HashedString("e2f0354cd055ee727d5359ceb3ec59ad",16), //malwarebytes.com
            new HashedString("ebc7dba99115781ed43090a07f9281ab",14), //ru.vessoft.com
            new HashedString("be56cb5de3fd03b65b161145349ae105",13), //AlpineFile.ru
            new HashedString("4f8a9bbdec4e2de5f6af2d8375f78b47",41), //malwarebytes-anti-malware.ru.uptodown.com
            new HashedString("16297e8f3088fa3ff1587f1078f070ce",23), //ProgramDownloadFree.com
            new HashedString("ee35efa79cb52086ce2eb70ba69b8405",17), //download.cnet.com
            new HashedString("05461be81ef7d88fc01dbfad50a40c53",14), //soft.mydiv.net
            new HashedString("e56f530f736bcb360515f71ab7b0a391",14), //spyware-ru.com
            new HashedString("8854c43b5f132f9bbe9aa01e034e47fd",14), //remontcompa.ru
            new HashedString("205081240db0af1eae2b071aadb85bbc",17), //www.hitmanpro.com
            new HashedString("a48072f23988b560b72cf3f2f0eccc30",26), //hitman-pro.ru.uptodown.com
            new HashedString("ddf153fb8a8aefd506b182cb8ede597c",24), //www.bleepingcomputer.com
            new HashedString("a71c27fdffca5d79cf721528e221d25a",15), //soft.oszone.net
            new HashedString("6e7bf33d4e222ddb5ae026d0cd07754a",10), //krutor.org
            new HashedString("176fb162f5608954f82fbf82f6239860",15), //www.greatis.com
            new HashedString("b56ffe783724d331b052305b9cef2359",24), //unhackme.ru.uptodown.com
            new HashedString("4c255dbc36416840ad9be3d9745b2b16",15), //programy.com.ua
            new HashedString("0de8be0d7a0aba151cd4821e4d2e26de",10), //rsload.net
            new HashedString("ef628e261e007380ba780ddca4bf7510",13), //softobase.com
            new HashedString("de6446136e6394b2b9d335cd3488c191",25), //www.besplatnoprogrammy.ru
            new HashedString("fca37d5298253d278429075543d8f47d",24), //unhackme.en.softonic.com
            new HashedString("2c9bfb7c724df7cdc6653c1b3c05dede",12), //unhackme.com
            new HashedString("eeded1a700eaa95a14fccb1d0b710d76",11), //unhackme.ru
            new HashedString("13805dd1b3a52b30ab43114c184dc266",13), //nnm-club.name
            new HashedString("e1312360d9da76cde574fdf39ff4ec60",9), //vgrom.com
            new HashedString("05dfd988ff6658197a53a559d03d48d5",7), //yadi.su
            new HashedString("1d954e9393c6a315114850d3f9670158",8), //eset.com
            new HashedString("f6ce7e3db235723091e59a653e7d96f2",9), //mywot.com
            new HashedString("683ca3c4043fb12d3bb49c2470a087ea",26), //download.windowsupdate.com
            new HashedString("ff5c054c7cd6924c570f944007ccf076",13), //microsoft.com
            new HashedString("3dfef91e52b19e8bc2b5c88bdf9d7a52",20), //update.microsoft.com
            new HashedString("2e903514bf9d2c7ca3e714d28730f91e",17), //windowsupdate.com
            new HashedString("61138c8874db6a74253f3e6472c73c24",27), //windowsupdate.microsoft.com
            new HashedString("ea2afd439110302922a66cfb1c20c71d",11), //acronis.com
            new HashedString("2f4f102d0800be43f5626e28fc35da35",11), //adaware.com
            new HashedString("47a7fa72bb79489946e964d547b9a70c",9), //add0n.com
            new HashedString("8202ec5cbdc1e645fab61b419c328300",11), //adguard.com
            new HashedString("daa0a654ae3dd4043c4aab6205a613dc",10), //ahnlab.com
            new HashedString("d96d3881c78c18b33f00d3e366db2714",11), //antiscan.me
            new HashedString("088b09b98efc9213de102758d1c8acea",9), //antiy.net
            new HashedString("5ca9e4a942e008184f0656dc403485b7",7), //any.run
            new HashedString("c593eabe657120a14c5296bad07ba127",11), //app.any.run
            new HashedString("4e5d2e4478cbf65b4411dd6df56c85b7",10), //arcabit.pl
            new HashedString("e7d02464efe5027b4fe29e5b71bff851",12), //ashampoo.com
            new HashedString("178c8b444e8def52807e7db3f63dc26e",9), //avast.com
            new HashedString("e00662fd56d5e0788bde888b0f2cac70",7), //avg.com
            new HashedString("f3226bd720850e4b8115efc39c2b0fe9",9), //avira.com
            new HashedString("60d2f4fe0275d790764f40abc6734499",9), //baidu.com
            new HashedString("1fd952adcdbaade15b584f7e8c7de1e0",15), //bitdefender.com
            new HashedString("5c6cfe5d644fb02b0e1a6ac13172ae6e",8), //bkav.com
            new HashedString("eb401ae50e38bdf97bf98eb67b7f9764",14), //blackberry.com
            new HashedString("d36f9acef58b77c1499fb31b05e1348f",12), //broadcom.com
            new HashedString("b8f3ad2ce16be91986c6ae6c6d2f5c21",13), //bullguard.com
            new HashedString("bcc2393101a857b00a4fbff01da66f2a",12), //bullguard.ru
            new HashedString("2ad4f0c11334e98a56171a2863b3ea7f",12), //ccleaner.com
            new HashedString("cadddd7e2aee1db1c03f630a22f322d9",13), //chomar.com.tr
            new HashedString("56f2deb0bf3c2ac9aa9de23ee968654f",10), //clamav.net
            new HashedString("4876e625e899a84454d98f6322a4d213",15), //cloud.iobit.com
            new HashedString("98eb7e27e19b8816b5ec0a8beffd30aa",20), //cmccybersecurity.com
            new HashedString("00798b05b9906d4031905f9e57f4c310",12), //combofix.org
            new HashedString("26d25247ed88aa5f63d80acf6e4e4d35",10), //comodo.com
            new HashedString("da2ca8ed062a8b78340292df861754b0",17), //company.hauri.net
            new HashedString("132793c4107219b5631e5ccc8a772f94",8), //comss.ru
            new HashedString("a349df20a84c064b688c3605d60dd00e",15), //crowdstrike.com
            new HashedString("a518658356c72fd843116c6358393690",14), //cybereason.com
            new HashedString("c652b5220b32e0302487d6bcdc232c9d",9), //cynet.com
            new HashedString("f039b199813ed30f7ce8ecea353ceffc",9), //cyren.com
            new HashedString("1a34d8272348282803adbb71053d241b",22), //download.microsoft.com
            new HashedString("a65eb4af101a55b3e844dc9ccc42f2ff",11), //dpbolvw.net
            new HashedString("1e0daaee7cb5f7fe6b9ff65f28008e0a",9), //drweb.com
            new HashedString("98d3a8a27234fa519e04907d7ace9ff1",8), //drweb.ru
            new HashedString("8931a8fa06b940d45d6a28f2224bc46a",10), //elastic.co
            new HashedString("6ce238acdd804c4f2c710c58efe089fe",12), //emsisoft.com
            new HashedString("e075a44b048b9039c8b3dce7627237ae",11), //escanav.com
            new HashedString("a6f9bdbd2ced0eba0fe2eb3c98c37778",7), //eset.kz
            new HashedString("927846aba9d1dfedf55ef604067e3397",7), //eset.ru
            new HashedString("56e323a7ffcf8f40321ec950c1c3860f",15), //estsecurity.com
            new HashedString("cb25bfbf5c7435fd7aeda5b62dd29af5",12), //fortinet.com
            new HashedString("867692a785fd911f6ee022bc146bf28c",12), //f-secure.com
            new HashedString("c46cfad9e681cd63c8559ca9ba0c87ce",17), //gdatasoftware.com
            new HashedString("393f2e689ee70d10ad62388bf5b7e2ec",14), //gridinsoft.com
            new HashedString("bdef1f72c100741f5c13286c709402fb",14), //grizzly-pro.ru
            new HashedString("50c1347f91a9ccaa37f3661e331b376d",15), //herdprotect.com
            new HashedString("475263d0cb67da5ec1dae1ee7a40a114",13), //hitmanpro.com
            new HashedString("9fc0b7fa45ef58abd160a353e2d9eb27",15), //home.sophos.com
            new HashedString("eed8bfd826da59536da141d8773a2781",19), //hybrid-analysis.com
            new HashedString("70d0c097b0771196529f00b1559fa78f",18), //ikarussecurity.com
            new HashedString("e159fc485c9c5e905cb570e5a4af489a",10), //intego.com
            new HashedString("62cf04eba08e65b210bd1308f9da04bf",9), //iobit.com
            new HashedString("54b260c7fb614cfcf0d2f6e983434db8",15), //k7computing.com
            new HashedString("250730bdbc2a6fc2a7ffd3229d407862",12), //k7-russia.ru
            new HashedString("6f0c9e8027ef9720f9caedaef4e200b5",13), //kaspersky.com
            new HashedString("675c52a56f2ff1b3a689c278778f149c",21), //kaspersky-security.ru
            new HashedString("6dcb7e266b7f70c55d8ad51ef995cbc9",10), //kerish.org
            new HashedString("15fe7ae3216c7a37d34d02793d180530",9), //ksyun.com
            new HashedString("762c7e2ec87cb7de793cde9e9543734a",10), //lionic.com
            new HashedString("bd7c714d46ff9bae1bd9918476e8450c",10), //malware.lu
            new HashedString("327d0b3a0bb1c17c52f6ae1af8867bac",12), //malwares.com
            new HashedString("b2c9a135e92a3d4d0bded64ffe4d1ee3",15), //maxpcsecure.com
            new HashedString("985983ba88d92782fc97526ab0f02cd0",10), //mcafee.com
            new HashedString("79782f8d4349fc66dad89c3765b761d3",23), //metadefender.opswat.com
            new HashedString("974bf1d93d81d915800bb2e5352b923e",39), //msnbot-65-52-108-33.search.msn.comments
            new HashedString("4a73bdc9cec00bbb9f05bc79cbc130b4",9), //mzrst.com
            new HashedString("3d62ee7e9bada438b991f23890747534",9), //nanoav.ru
            new HashedString("84eac61e5ebc87c23550d11bce7cab5d",17), //novirusthanks.org
            new HashedString("40ef01d37461ab4affb0fdc88462aba9",27), //ntservicepack.microsoft.com
            new HashedString("f6b793a2352d382772cb7657139b2a37",27), //oca.telemetry.microsoft.com
            new HashedString("ad3d5915ac6f54ce9464a51ef5ae8fb7",37), //oca.telemetry.microsoft.com.nsatc.net
            new HashedString("63b4a8681bf273da7096261abcb33657",10), //opswat.com
            new HashedString("61d4dd297f749e3291ed8ae744da57de",20), //paloaltonetworks.com
            new HashedString("8d39a2f3831595b02640c90888c21fdd",17), //pandasecurity.com
            new HashedString("771170bbbfd44a8b1843d3fad96daf1b",11), //pcmatic.com
            new HashedString("33ae33718baa80a5f94b014fccb7329b",13), //pcprotect.com
            new HashedString("2703a4c1ceef44c10ac28f44eb98215d",10), //phrozen.io
            new HashedString("8dde0f8215149ce5ecfd670c4a701a9b",9), //pro32.com
            new HashedString("f92bfb8ff6ac7e99a799f6017797684b",13), //quickheal.com
            new HashedString("cde54506e8fa4d94c347eb3bf1a4e761",11), //quttera.com
            new HashedString("af0bbbc42533596b884c3b6edcdd97c9",10), //raymond.cc
            new HashedString("98fc92e32c31aa34dfefa97494381324",9), //render.ru
            new HashedString("680bd6136c83f4eb31b16c1fdd7aa93b",17), //reversinglabs.com
            new HashedString("2e7596c6145efe2454e4d6b92c8c4620",10), //rising.com
            new HashedString("725161e698d806fcce316bcd70b2fce1",17), //rising-global.com
            new HashedString("02cb97db53e82fecc3b47f2a7ab3c6ad",11), //sangfor.com
            new HashedString("c8324a9e380379bd3e560c4a792f76de",13), //scanguard.com
            new HashedString("41d4831c0d31069bc5b8ac767612316f",17), //scanner.virus.org
            new HashedString("2db7246eb9be6b7d7f7987a70144d8dc",13), //secureage.com
            new HashedString("5bfe94657da859c24293b4e35810ee29",26), //securitycloud.symantec.com
            new HashedString("87a25244757ea3a30d936b1a9f4adb93",15), //sentinelone.com
            new HashedString("fc828fa4ff498f2738556e6c446bb98a",18), //site.anti-virus.by
            new HashedString("ec532f0313071cb7d33bf21781ec751f",10), //sophos.com
            new HashedString("5641840b2116c66124c1b59a15f32189",15), //spamfighter.com
            new HashedString("9c9345c05ca20184e8046495224f97a5",27), //sqm.telemetry.microsoft.com
            new HashedString("1ac990351c5efe91882bd5607afcdd1c",19), //stats.microsoft.com
            new HashedString("861cd2c94ae7af5a4534abc999d9169f",13), //stopzilla.com
            new HashedString("90711c695c197049eb736afec84e9ff4",20), //superantispyware.com
            new HashedString("e862d898315ed4b4a49deede1f672fde",13), //surfshark.com
            new HashedString("25da26174f6be2837b64ec23f3db589b",14), //tachyonlab.com
            new HashedString("774f38701dff27e1d5083998b428efd6",11), //tehtris.com
            new HashedString("f39b0c9cd3be259b72d26bc2ca8b1b3b",35), //telecommand.telemetry.microsoft.com
            new HashedString("cbf34a13b567f15597d2f3f9a0b8ee9e",45), //telecommand.telemetry.microsoft.com.nsatc.net
            new HashedString("d58a810afab3591cf1450a8197219cc4",11), //tencent.com
            new HashedString("00d04f179a26f855d01bd52acbf0d0ea",31), //test.stats.update.microsoft.com
            new HashedString("ca867bc71a7ba4529a2d3a9991d54511",9), //tgsoft.it
            new HashedString("64003943175e5f080c849f1744819f48",16), //totaladblock.com
            new HashedString("61cfcb40977412be2ebf5450f4e47d30",11), //totalav.com
            new HashedString("804669ae15f338250ec9e3bd00ef5038",16), //totaldefense.com
            new HashedString("c98e096681a2d1d30b321ca4682adb47",12), //trapmine.com
            new HashedString("1826c35007829d3483ffd18cfcabe01a",11), //trellix.com
            new HashedString("2cf505233a066a02292a1f9062aa12a2",14), //trendmicro.com
            new HashedString("976e17b152cabf43472b3ffd81113c66",13), //trustlook.com
            new HashedString("0d3630958f3c3e8e08486b0d8335aea6",17), //usa.kaspersky.com
            new HashedString("9c41eb8b8cd2c93c2782ead39aa4fb70",9), //vipre.com
            new HashedString("f27e6596102c70bad8aa36e7c9b50340",11), //virscan.org
            new HashedString("17baee242e6527a5f59aa06e26841eae",9), //virus.org
            new HashedString("b6eb1940800729f89307db6162706c21",19), //virusscan.jotti.org
            new HashedString("e2a50e6c79e09a7356e07d0476dfbb9b",14), //virustotal.com
            new HashedString("4098c777fa8b87f90df7492fd361d54d",9), //vmray.com
            new HashedString("97f4c811eec10002f0c31512c46a8343",25), //vortex.data.microsoft.com
            new HashedString("edd9a8bc3fea892c815e156c8f97cd9f",29), //vortex-win.data.microsoft.com
            new HashedString("3ba8af7964d9a010f9f6c60381698ec5",11), //webroot.com
            new HashedString("6c1e4b893bda58da0e9ef2d6d85ac34f",18), //wustat.windows.com
            new HashedString("f360d4a971574eca32732b1f2b55f437",11), //xcitium.com
            new HashedString("686f4ba84015e8950f4aed794934ed11",10), //zillya.com
            new HashedString("2b001a98c1a66626944954ee5522718b",10), //Zillya.com
            new HashedString("80d01ead54a1384e56f5d34c80b33575",13), //zonealarm.com
            new HashedString("b868b32c3ea132d50bd673545e3f3403",18), //zonerantivirus.com
        };

        List<string> suspFls_path = new List<string>();
        List<string> prevMlwrPths = new List<string>();

        List<byte[]> signatures = new List<byte[]> //signatures
                {
                    new byte[] {0x67, 0x33, 0x71, 0x70, 0x70, 0x6D },
                    new byte[] {0x33, 0x6E, 0x6A, 0x6F, 0x66, 0x73, 0x74 },
                    new byte[] {0x6F, 0x6A, 0x64, 0x66, 0x69, 0x62, 0x74, 0x69 },
                    new byte[] {0x75, 0x66, 0x6C, 0x75, 0x70, 0x6F, 0x6A, 0x75 },
                    new byte[] {0x2F, 0x75, 0x69, 0x66, 0x6E, 0x6A, 0x65, 0x62 },
                    new byte[] {0x74, 0x75, 0x73, 0x62, 0x75, 0x76, 0x6E, 0x2C },
                    new byte[] {0x60, 0x73, 0x62, 0x6F, 0x65, 0x70, 0x6E, 0x79, 0x60 },
                    new byte[] {0x46, 0x75, 0x66, 0x73, 0x6F, 0x62, 0x6D, 0x63, 0x6D, 0x76, 0x66 },
                    new byte[] {0x67, 0x6D, 0x7A, 0x71, 0x70, 0x70, 0x6D, 0x2F, 0x70, 0x73, 0x68 },
                    new byte[] {0x6F, 0x62, 0x6F, 0x70, 0x71, 0x70, 0x70, 0x6D, 0x2F, 0x70, 0x73, 0x68 },
                    new byte[] {0x54, 0x69, 0x66, 0x6D, 0x6D, 0x64, 0x70, 0x65, 0x66, 0x47, 0x6A, 0x6D, 0x66 },
                    new byte[] {0x42, 0x6D, 0x68, 0x70, 0x73, 0x6A, 0x75, 0x69, 0x6E, 0x41, 0x79, 0x6E, 0x73, 0x6A, 0x68 },
                    new byte[] {0x45, 0x70, 0x76, 0x63, 0x6D, 0x66, 0x51, 0x76, 0x6D, 0x74, 0x62, 0x73, 0x51, 0x73, 0x66, 0x74, 0x66, 0x6F, 0x75 }
                };

        public List<string> founded_mlwrPths = new List<string>();

        readonly long[] constantFileSize = new long[]
        {
            634880, //audiodg
            98304, //taskhostw
            69632, //taskhost
            862208, //conhost
            55320, //svchost
            94720, //dwm
            71680, //rundll32
            906752, //winlogon
            17600, //csrss
            714856, //services
            60544, //lsass
            21312, //dllhost
            155976, //smss
            420472, //wininit
            3235192, //vbc
            57344, //unsecapp
            174552, //ngen
            40960, //dialer
            12800 //tcpsvcs
        };
        long maxFileSize = 100 * 1024 * 1024;

        public List<int> mlwrPids = new List<int>();
        public List<string> founded_suspLckPths = new List<string>();
        public List<string> founded_mlwrPathes = new List<string>();
        public string WindowsVersion = Registry.LocalMachine.OpenSubKey(Bfs.Create("JceyGSy9mzgBR6/U+p+0stm4195Wd/5tHGe+8m+cnm8cYIo3Nk0BzObOd6G8qFfV",
            new byte[] { 0x8f, 0x7b, 0x96, 0x0f, 0x2d, 0x63, 0xf0, 0x20, 0x60, 0xe3, 0xd3, 0xa7, 0xe4, 0xd4, 0xfe, 0x70, 0x72, 0xb7, 0x9b, 0x8b, 0x51, 0x05, 0xb0, 0x5f, 0xf9, 0x8d, 0xf7, 0xcf, 0xa1, 0xc8, 0xee, 0x77 },
            new byte[] { 0xee, 0xa2, 0x6a, 0xfc, 0xef, 0xa9, 0x09, 0x83, 0xab, 0x89, 0xf3, 0xa3, 0xf1, 0x17, 0x4e, 0xb5 })).GetValue("Pro??duct??Name".Replace("?", "")).ToString(); //SOFTWARE\Microsoft\Windows NT\CurrentVersion
        string quarantineFolder = Path.Combine(Environment.CurrentDirectory, "minerseаrch_quarаntine");



        public void DetectRk()
        {

            Logger.WriteLog("\t\tChecking roo??tk??it present...".Replace("?", ""), Logger.head, false);
            string rk_testapp = Path.Combine(Path.GetTempPath(), "dia??ler_".Replace("?", "") + utils.GetRndString() + ".exe");

            File.WriteAllBytes(rk_testapp, Resources.rktest);
            Process rk_testapp_process = Process.Start(new ProcessStartInfo()
            {
                FileName = rk_testapp,
                Arguments = "5",
                UseShellExecute = false,
                CreateNoWindow = true

            });
            List<Process> dialers = new List<Process>();

            string pname = "di??al??er".Replace("?", "");
            foreach (Process proc in utils.GetProcesses())
            {
                try
                {
                    if (proc.ProcessName.StartsWith(pname))
                    {
                        dialers.Add(proc);
                    }
                }
                catch (Exception ex)
                {
#if BETA
                    Logger.WriteLog($"\t[x] Error on DetectRootkit: {ex.Message}", Logger.error);
#endif
                }
            }

            if (dialers.Count == 0)
            {
                Console.BackgroundColor = ConsoleColor.DarkMagenta;
                Logger.WriteLog("\t[!!!!] Mi?ner's r?o??o?tk??it detected! Trying to remove...".Replace("?", ""), ConsoleColor.White, false);
                Console.BackgroundColor = ConsoleColor.Black;

                string rk_unstaller_path = Path.Combine(Path.GetTempPath(),
                    Bfs.Create("+i6CI7r2H0Ua3qHd7YI8Hw==",
                        new byte[] { 0xb5, 0x15, 0xc7, 0x46, 0x9d, 0xe7, 0xde, 0x12, 0xa2, 0x04, 0xcb, 0xc7, 0x2a, 0x17, 0xf2, 0x4c, 0xd4, 0xba, 0xa4, 0x27, 0xdd, 0x78, 0xf5, 0xf5, 0x17, 0x02, 0x60, 0x09, 0x5a, 0xf5, 0xab, 0x70 },
                        new byte[] { 0x15, 0xa4, 0x20, 0x3d, 0x0f, 0xf8, 0xd5, 0xf3, 0xa6, 0x19, 0xcc, 0xfb, 0x4a, 0x32, 0xd9, 0x65 }));
                try
                {
                    byte[] allBytes = {0x6d,
0x20, 0xc5, 0x51, 0x61, 0x5c, 0x99, 0xf7, 0x92,
0xa0, 0x72, 0x3b, 0xc6, 0xb1, 0x69, 0xcb, 0xfd,
0x9b, 0xe0, 0x20, 0x86, 0x91, 0x63, 0x7e, 0x14,
0x52, 0x70, 0x40, 0xa9, 0x86, 0x4b, 0xb9, 0x82,
0xf5, 0xe8, 0x65, 0xa9, 0xdc, 0x50, 0x99, 0x73,
0x0e, 0x13, 0x91, 0x1e, 0x27, 0xc5, 0xf6, 0xfe,
0xf7, 0x5c, 0x0d, 0xe0, 0x9c, 0xd3, 0xcc, 0xd2,
0x96, 0x34, 0x0f, 0x99, 0x8b, 0x2a, 0x38, 0xc4,
0xb4, 0xad, 0xe8, 0x6a, 0xc5, 0xb2, 0x5b, 0x74,
0xb6, 0x35, 0xbc, 0xde, 0x0e, 0x51, 0x15, 0x0e,
0xe9, 0x81, 0x6b, 0x45, 0xb5, 0xe2, 0x7a, 0x60,
0xc9, 0xcb, 0xfc, 0xd6, 0x11, 0xd8, 0x2b, 0x03,
0x69, 0x4b, 0xd3, 0x96, 0xfb, 0x26, 0x20, 0xac,
0x81, 0xa9, 0x42, 0xc5, 0xd8, 0x21, 0xfa, 0x81,
0x48, 0x17, 0x80, 0xaf, 0x79, 0xd1, 0xe8, 0x26,
0x2e, 0xd7, 0xf5, 0x07, 0x1b, 0xe6, 0xf4, 0xae,
0x9e, 0xff, 0x95, 0x79, 0xdd, 0x4b, 0x8e, 0x08,
0x19, 0x26, 0x4c, 0xbd, 0x46, 0xa1, 0x7d, 0xf6,
0x39, 0x5f, 0x4f, 0xad, 0xae, 0x3b, 0xf1, 0x8c,
0x59, 0x0c, 0xab, 0x7f, 0x02, 0x49, 0x7f, 0xfb,
0xa4, 0x81, 0xd4, 0x9d, 0x48, 0xe6, 0xef, 0x53,
0x25, 0xc2, 0x40, 0x87, 0x4f, 0x5e, 0xd7, 0xf4,
0xea, 0xdd, 0xa9, 0x3d, 0x7b, 0x49, 0xfc, 0xe5,
0xbe, 0xeb, 0x4d, 0x6c, 0x7e, 0x0e, 0x22, 0xf3,
0x81, 0xc7, 0x22, 0xed, 0x60, 0x8e, 0x2c, 0xae,
0xb0, 0xa8, 0x1e, 0xe0, 0x54, 0xb8, 0x57, 0xb0,
0xcf, 0x06, 0x77, 0xf8, 0xb2, 0x8a, 0x98, 0x66,
0x91, 0x78, 0x0a, 0xfd, 0xac, 0x69, 0xbc, 0x45,
0xc7, 0x0f, 0x3e, 0x6d, 0x7f, 0xe9, 0x26, 0x7b,
0x9b, 0x21, 0x90, 0xb2, 0x71, 0x90, 0xfe, 0x7d,
0x5f, 0x84, 0x99, 0x27, 0xe1, 0xff, 0xaf, 0xbd,
0x41, 0x10, 0xf1, 0x8d, 0x9e, 0xf8, 0xbe, 0x35,
0xf0, 0xb5, 0x1e, 0x66, 0xf5, 0x78, 0x0d, 0x42,
0x13, 0xea, 0xf5, 0x05, 0x5d, 0x81, 0xe9, 0xb5,
0x16, 0x3e, 0x5f, 0x03, 0x86, 0x5f, 0x64, 0xe9,
0x58, 0xaa, 0x75, 0xb3, 0x87, 0x7f, 0x9c, 0xe2,
0x8f, 0x14, 0xa6, 0xba, 0x40, 0x6d, 0xb8, 0x10,
0xb5, 0x28, 0x98, 0x86, 0x90, 0x64, 0xd1, 0x22,
0x6e, 0xe9, 0xec, 0xb0, 0x4f, 0x53, 0xb7, 0xaf,
0xd7, 0x5f, 0xe1, 0xfa, 0xb1, 0xfa, 0xdd, 0x94,
0xdf, 0x40, 0xea, 0x91, 0xd5, 0x8f, 0x45, 0x55,
0xeb, 0xc7, 0x6a, 0x4f, 0x16, 0x7d, 0x5a, 0xa4,
0x67, 0xdb, 0x88, 0x9b, 0x7c, 0xd6, 0x8e, 0x96,
0x41, 0xe0, 0x52, 0x70, 0xc0, 0x12, 0xc2, 0x02,
0x49, 0x5c, 0xa9, 0xb2, 0x05, 0xb3, 0x22, 0x76,
0x7e, 0x7c, 0x56, 0x9c, 0x27, 0x1d, 0x43, 0x02,
0xe4, 0x30, 0x79, 0x48, 0xf4, 0x34, 0xb6, 0x90,
0xe6, 0xe1, 0x43, 0xcb, 0x65, 0x3d, 0x09, 0x4e,
0x82, 0x98, 0x21, 0xcd, 0x1f, 0x30, 0xb1, 0x0c,
0xf3, 0x77, 0x4e, 0x9f, 0x6f, 0x21, 0x17, 0x46,
0x10, 0xc1, 0x22, 0xe6, 0x5a, 0x9b, 0xf6, 0x88,
0x4e, 0x09, 0x56, 0x32, 0xe3, 0xe3, 0x52, 0xe6,
0x79, 0x34, 0x92, 0xa1, 0x93, 0x1c, 0x68, 0xb4,
0x17, 0x97, 0x77, 0xbc, 0x5a, 0x0a, 0x96, 0xb2,
0xe0, 0xfd, 0x19, 0x0c, 0x32, 0xee, 0x9c, 0x6b,
0x89, 0xb4, 0x12, 0xdf, 0xbf, 0xaf, 0x5b, 0xc1,
0x77, 0xab, 0xe4, 0xd6, 0xd3, 0x19, 0xc7, 0x69,
0xe0, 0xa9, 0xba, 0x5a, 0x68, 0xba, 0x3c, 0x63,
0x62, 0xf8, 0xf6, 0x55, 0x5f, 0x06, 0x7a, 0x3e,
0x8b, 0x2b, 0x7d, 0xde, 0x94, 0xd4, 0xe6, 0x7d,
0xad, 0x34, 0x29, 0x06, 0xc0, 0x29, 0xc1, 0xb8,
0x2d, 0x32, 0x4c, 0xdf, 0x84, 0x76, 0xf8, 0x8c,
0x46, 0x3c, 0x9c, 0x7c, 0x0b, 0xbc, 0xa8, 0x8b,
0x1a, 0x5c, 0xeb, 0xb7, 0xbd, 0x10, 0x26, 0xb2,
0xb5, 0x22, 0xa7, 0x23, 0x6e, 0x1a, 0x74, 0x6c,
0x52, 0xb8, 0xc1, 0xa8, 0xab, 0xfd, 0xbc, 0x5b,
0x1f, 0x98, 0x4d, 0x43, 0x2b, 0xbe, 0x0b, 0x87,
0xf7, 0xfb, 0x76, 0x5c, 0x16, 0xb5, 0x91, 0x68,
0x2f, 0x4a, 0xc4, 0xdd, 0x92, 0x02, 0xee, 0x20,
0x7f, 0x3b, 0x70, 0x81, 0xc8, 0x68, 0xfe, 0x42,
0x96, 0x6f, 0xb9, 0x4e, 0x22, 0xfa, 0x4d, 0xae,
0xf0, 0xa5, 0x8d, 0xe5, 0x11, 0xff, 0x97, 0x94,
0x55, 0x3b, 0x2c, 0x88, 0x62, 0x05, 0x52, 0xc5,
0x8c, 0x00, 0xad, 0x48, 0xcf, 0x57, 0x69, 0xb1,
0xfa, 0xea, 0xd3, 0x2e, 0xf3, 0xde, 0x25, 0x67,
0xe2, 0xd8, 0xb2, 0x3a, 0x05, 0x07, 0xf7, 0x7a,
0xf5, 0x98, 0x3b, 0xb4, 0xdd, 0xb4, 0x61, 0x2e,
0x68, 0xd8, 0x0f, 0xc0, 0x76, 0x70, 0x95, 0x34,
0x2b, 0xa0, 0x03, 0x3e, 0xc5, 0x8d, 0x91, 0xfc,
0xdf, 0x9a, 0xb2, 0xa4, 0x62, 0xed, 0xb9, 0x73,
0x85, 0xd3, 0x81, 0x14, 0x0e, 0x55, 0x77, 0x48,
0xbd, 0x9d, 0x3c, 0x11, 0x2c, 0x26, 0xc4, 0x10,
0xbc, 0x18, 0xc2, 0x8a, 0x33, 0x66, 0x31, 0x99,
0x55, 0xbe, 0x46, 0xaf, 0xa5, 0xc7, 0x19, 0xbe,
0x40, 0x5d, 0x3e, 0x69, 0xa9, 0x7e, 0x69, 0xa1,
0xfe, 0x5e, 0x40, 0x87, 0xd3, 0xa6, 0xf8, 0x69,
0x9e, 0x5d, 0x79, 0xbb, 0x78, 0x8b, 0x2f, 0xf2,
0x13, 0x1d, 0x23, 0x29, 0x48, 0x90, 0x9b, 0xc3,
0x8d, 0xb1, 0xf5, 0xbe, 0x18, 0xdf, 0xfc, 0x58,
0x0f, 0x44, 0x59, 0xc9, 0xb3, 0x54, 0x9f, 0x4a,
0xa1, 0xc2, 0x27, 0x0c, 0x57, 0xae, 0xdd, 0x2e,
0x6e, 0xff, 0x3a, 0xbd, 0xd1, 0xee, 0x59, 0xa4,
0x87, 0x25, 0x6e, 0xa4, 0x37, 0xcb, 0xd1, 0x8f,
0xaf, 0xf6, 0x34, 0xf0, 0xc0, 0x11, 0x27, 0x63,
0x9b, 0x39, 0x6c, 0x40, 0xb2, 0x03, 0x6c, 0x36,
0x94, 0x29, 0xca, 0xe4, 0xd2, 0xbc, 0x2a, 0x36,
0x30, 0xf4, 0x71, 0xe7, 0xdf, 0x8e, 0xf3, 0x1c,
0x2d, 0x14, 0x44, 0x19, 0x86, 0xef, 0x29, 0x73,
0x10, 0x25, 0x33, 0xde, 0xa5, 0x9a, 0x98, 0x32,
0xf6, 0xa6, 0x9c, 0x53, 0xd7, 0x3b, 0xef, 0xb3,
0xe1, 0x96, 0xc9, 0x57, 0x4e, 0xce, 0xa9, 0x74,
0x2f, 0xc4, 0x29, 0xab, 0x61, 0xcd, 0x82, 0xa8,
0x8c, 0xf9, 0x3f, 0x9c, 0xf4, 0x7a, 0x5f, 0x64,
0xb0, 0x04, 0xa9, 0xb1, 0x1c, 0x55, 0x6b, 0xff,
0xd6, 0x1e, 0xca, 0x98, 0x6a, 0x1e, 0x40, 0x64,
0x82, 0x11, 0xe7, 0xe1, 0x48, 0x8a, 0x86, 0x46,
0xa0, 0x5c, 0x6c, 0x8f, 0x1a, 0x21, 0xdb, 0x7d,
0x4b, 0xb7, 0x16, 0x27, 0x16, 0xc3, 0xf9, 0x45,
0xa3, 0x01, 0x97, 0xc3, 0x16, 0x0d, 0x83, 0x6a,
0xb4, 0xb3, 0xe7, 0x5f, 0xaa, 0x25, 0x6f, 0x70,
0x46, 0x5c, 0xa0, 0xc6, 0x35, 0x52, 0x3b, 0xbf,
0x34, 0x48, 0x46, 0x98, 0x4c, 0xf9, 0x22, 0x7d,
0x3e, 0xa0, 0x11, 0x3f, 0x47, 0x6b, 0x44, 0x36,
0x77, 0x2f, 0x9f, 0x59, 0x91, 0xe3, 0x01, 0x1d,
0x02, 0x56, 0xbd, 0xfb, 0x6b, 0xd9, 0xe3, 0x81,
0x64, 0x4f, 0xdb, 0x17, 0x85, 0xca, 0x60, 0x0a,
0x39, 0x26, 0x65, 0x6b, 0x84, 0x60, 0x59, 0x82,
0xd7, 0x4f, 0x15, 0x77, 0x1f, 0x6f, 0x42, 0x5d,
0x1e, 0x70, 0x37, 0x0e, 0x55, 0x8d, 0x99, 0xe7,
0x5e, 0x73, 0xca, 0xf0, 0x4e, 0x17, 0x24, 0x95,
0x9f, 0x61, 0xf9, 0xdf, 0xd7, 0x40, 0x45, 0xd2,
0x64, 0xb6, 0x9e, 0x6a, 0x85, 0x75, 0x45, 0xf0,
0x43, 0xbb, 0xb4, 0x3e, 0x31, 0x94, 0x18, 0x7c,
0xbf, 0xa5, 0x06, 0x34, 0x7b, 0xbc, 0x1e, 0x9b,
0x32, 0x42, 0x0f, 0x63, 0x93, 0x4b, 0xb4, 0xc2,
0xe6, 0x06, 0x9a, 0xc1, 0x75, 0x7c, 0x3b, 0x24,
0xc4, 0x0f, 0xd2, 0x4c, 0x0b, 0xcd, 0xa0, 0x8c,
0x30, 0x14, 0x3d, 0x5a, 0xbf, 0xe4, 0x7a, 0x5a,
0x74, 0x34, 0x2c, 0xdd, 0x08, 0xf9, 0xd2, 0x61,
0x9f, 0x01, 0x2c, 0xc5, 0x03, 0xeb, 0xf0, 0x78,
0xa8, 0x11, 0xfe, 0x72, 0x29, 0xaf, 0x8c, 0x1d,
0x43, 0xac, 0x38, 0x4c, 0xed, 0xc6, 0xe0, 0xca,
0xdf, 0xf9, 0x99, 0x9a, 0xb7, 0x22, 0x7b, 0xcd,
0x21, 0x7d, 0xee, 0x8b, 0xee, 0x41, 0x32, 0xb8,
0x5d, 0xa4, 0x44, 0x4e, 0x48, 0x4c, 0x5b, 0xd0,
0x56, 0xd4, 0x66, 0xa4, 0x6a, 0x81, 0xd4, 0x6e,
0x3d, 0x01, 0xb6, 0xb1, 0xe1, 0x0c, 0xc3, 0xb7,
0x50, 0x08, 0x00, 0xf1, 0x43, 0x23, 0x2c, 0xdb,
0x04, 0xc4, 0xee, 0xdf, 0x34, 0x52, 0xcb, 0xa0,
0x2c, 0x7b, 0x15, 0xd5, 0x4b, 0x0e, 0xff, 0x2c,
0x78, 0xac, 0x09, 0x54, 0xd5, 0xf6, 0x14, 0x46,
0x51, 0x5d, 0x24, 0x08, 0x2f, 0xdc, 0x10, 0x1c,
0xdf, 0xf3, 0x0f, 0x83, 0xf4, 0x12, 0xee, 0xc5,
0xfc, 0x4e, 0x55, 0x41, 0x2b, 0xc3, 0x8d, 0x4b,
0x72, 0x94, 0x3e, 0x25, 0xe3, 0x93, 0x85, 0xab,
0xa0, 0xb8, 0x92, 0x2f, 0x84, 0x10, 0x6b, 0x53,
0x22, 0x62, 0xbb, 0x98, 0x59, 0x28, 0xb6, 0x2c,
0x76, 0x4f, 0x43, 0x63, 0x8e, 0xd0, 0x34, 0xc2,
0xd3, 0xe4, 0x50, 0x45, 0x9e, 0x49, 0xed, 0xdb,
0x52, 0x79, 0x33, 0x88, 0x93, 0x9f, 0xcb, 0xe6,
0x3e, 0x7c, 0x0a, 0xb6, 0xfe, 0x28, 0xd8, 0x6d,
0xd4, 0x17, 0x33, 0x80, 0x3c, 0x2e, 0x1c, 0xaa,
0x3f, 0xfb, 0xe8, 0xb2, 0x96, 0xa6, 0x1a, 0x62,
0xc7, 0xc0, 0xc4, 0x03, 0x85, 0x16, 0x20, 0xd7,
0xd8, 0xd5, 0x5d, 0x88, 0x4f, 0x5c, 0x2d, 0x25,
0x5d, 0x7f, 0xae, 0xfd, 0x41, 0xe5, 0x77, 0x89,
0xc4, 0x13, 0x3f, 0xc4, 0xec, 0x06, 0x35, 0x22,
0xb4, 0x4f, 0xb1, 0x83, 0x80, 0xc9, 0x66, 0x49,
0x02, 0xf7, 0xc7, 0x5f, 0x78, 0x60, 0x91, 0xe1,
0x32, 0x44, 0x53, 0x63, 0x94, 0x71, 0xc8, 0x6e,
0x69, 0xca, 0xd5, 0xe0, 0x8d, 0x62, 0x16, 0xed,
0xbd, 0x8e, 0x29, 0x57, 0x5c, 0x2d, 0x2d, 0x03,
0x1c, 0x1a, 0xc8, 0xc9, 0xae, 0x73, 0xdc, 0x24,
0xf0, 0xa3, 0x23, 0x19, 0xfc, 0x2d, 0x82, 0x97,
0x31, 0x2f, 0x2a, 0x1a, 0x99, 0x91, 0xc9, 0x9c,
0xf1, 0x0b, 0x11, 0x0e, 0x94, 0x60, 0x3d, 0x8b,
0xaf, 0x48, 0x4f, 0xfb, 0xe9, 0x14, 0x41, 0xbc,
0x7b, 0xea, 0x37, 0x87, 0x05, 0x60, 0xca, 0xfc,
0x92, 0x7d, 0x86, 0xaf, 0xec, 0x31, 0xf7, 0xa6,
0x14, 0x12, 0xe7, 0x1c, 0x34, 0x85, 0x82, 0x7c,
0x4b, 0xfb, 0x5a, 0x36, 0xa8, 0x5a, 0x58, 0xf6,
0xdf, 0xf5, 0xea, 0x60, 0x71, 0xd3, 0x5f, 0x5e,
0x25, 0x8d, 0x86, 0x64, 0xd8, 0x3b, 0x26, 0x66,
0x3b, 0xd3, 0x3d, 0x57, 0x9f, 0xa6, 0x70, 0x62,
0x4f, 0xe8, 0x89, 0xf8, 0x74, 0xe5, 0xd2, 0x7f,
0x81, 0x67, 0x74, 0xa2, 0x06, 0x44, 0x47, 0xc6,
0x1a, 0x88, 0x0b, 0x9e, 0xea, 0x70, 0x08, 0x9e,
0x05, 0x15, 0x83, 0xaa, 0xee, 0x19, 0x1f, 0x04,
0x59, 0xe4, 0xb8, 0x75, 0x92, 0xf5, 0xd9, 0xa6,
0xe5, 0xc1, 0x1f, 0x56, 0x8e, 0x86, 0x07, 0x7c,
0x55, 0xa6, 0xe3, 0xd4, 0xd5, 0xde, 0x0e, 0x2c,
0xeb, 0x9a, 0xdd, 0x79, 0x33, 0xd1, 0x88, 0x79,
0x96, 0x6d, 0x69, 0xa7, 0xdf, 0xa1, 0x99, 0x38,
0x21, 0x3f, 0x91, 0xa1, 0xd5, 0xb8, 0xc6, 0xc0,
0x84, 0xbb, 0x79, 0x28, 0x36, 0xe8, 0xca, 0xa0,
0x96, 0x07, 0xef, 0xae, 0xca, 0xf2, 0x65, 0xe9,
0xcc, 0xeb, 0x9c, 0x9a, 0x54, 0xcf, 0x0a, 0x5a,
0xef, 0x65, 0x00, 0x60, 0x91, 0xec, 0x7b, 0xfd,
0x3b, 0xff, 0x79, 0x30, 0x69, 0x4e, 0x9b, 0x0b,
0x3c, 0x24, 0x4e, 0xbb, 0x09, 0x5b, 0x18, 0x7c,
0xa9, 0x49, 0xbc, 0x17, 0xb3, 0x07, 0x4b, 0x96,
0x0d, 0xce, 0x33, 0x7e, 0x47, 0x70, 0x67, 0x19,
0x89, 0x20, 0x7d, 0xc0, 0x50, 0x7a, 0x88, 0x6f,
0xee, 0x61, 0xd8, 0x7f, 0x87, 0xb3, 0xf7, 0x17,
0x81, 0xb9, 0xb7, 0x4f, 0xe9, 0x3b, 0xa4, 0xe7,
0xa7, 0xa6, 0x23, 0x83, 0x86, 0x8f, 0xb8, 0x2a,
0x6f, 0x94, 0xeb, 0xf5, 0x42, 0x85, 0x68, 0xc3,
0x81, 0xfa, 0x6e, 0x43, 0x31, 0x51, 0xf4, 0x5f,
0x8f, 0xd5, 0x02, 0x38, 0x2c, 0x1c, 0xfc, 0xfc,
0x6f, 0x3f, 0x33, 0x4e, 0xf0, 0xf6, 0x2d, 0xbe,
0x63, 0xe2, 0x96, 0x3b, 0x8c, 0x57, 0x25, 0xf6,
0xbe, 0xd5, 0xce, 0x85, 0xa5, 0xb4, 0x44, 0xe0,
0x89, 0xe6, 0x28, 0x70, 0xb0, 0xd7, 0xc5, 0x5c,
0x9c, 0xdc, 0xaf, 0x2f, 0x88, 0x9f, 0xab, 0x04,
0xc1, 0xf5, 0x76, 0x19, 0x75, 0xc4, 0x0f, 0xbf,
0x26, 0x5f, 0x00, 0x33, 0x09, 0xa5, 0xf7, 0xdf,
0x6a, 0x9d, 0x2f, 0xd9, 0xb6, 0xee, 0xe9, 0x19,
0xcd, 0xc3, 0x63, 0x53, 0xa5, 0x9f, 0x75, 0x10,
0x79, 0x5f, 0xa4, 0x2f, 0xbf, 0x57, 0x85, 0x9e,
0x9c, 0xa1, 0xe5, 0x1e, 0x37, 0xa8, 0xfb, 0x22,
0x35, 0xd6, 0x8d, 0xb4, 0x1c, 0x64, 0x1e, 0x68,
0xe5, 0xe9, 0x1d, 0x02, 0xb0, 0x9d, 0xac, 0xd7,
0xaa, 0x4d, 0x72, 0x36, 0xa2, 0xdb, 0xda, 0x5f,
0x8e, 0x32, 0x32, 0x59, 0x69, 0x20, 0xee, 0x9b,
0x9a, 0xc4, 0x2b, 0xdf, 0x03, 0x8e, 0xf7, 0x30,
0xc1, 0xf0, 0xd6, 0x92, 0x14, 0x62, 0x8c, 0xfd,
0xd5, 0x42, 0xe9, 0x76, 0x8d, 0x22, 0xce, 0xe9,
0xf5, 0xdc, 0x30, 0xb5, 0x0a, 0x17, 0x09, 0xde,
0x83, 0x76, 0x8c, 0x66, 0x2f, 0xfb, 0x13, 0x7d,
0x71, 0xd4, 0x2a, 0xc1, 0x95, 0x4b, 0x70, 0x74,
0xba, 0x29, 0xa1, 0xd7, 0x06, 0xa9, 0xd2, 0xa5,
0x7a, 0x2e, 0x22, 0xea, 0xaa, 0x3a, 0xc1, 0x52,
0x77, 0x99, 0x7f, 0xf0, 0xcb, 0x85, 0x31, 0xa1,
0xe4, 0xb8, 0x39, 0x9c, 0x9b, 0x65, 0xe6, 0x2b,
0xf3, 0x23, 0xd9, 0x6b, 0x85, 0xa2, 0x5d, 0x4b,
0xa0, 0x51, 0x85, 0x3f, 0xa0, 0x6b, 0x74, 0x9a,
0x20, 0xf0, 0x43, 0x1c, 0xcb, 0x64, 0x49, 0xbd,
0xb4, 0x30, 0x54, 0xc0, 0x3f, 0x10, 0xbe, 0x68,
0x29, 0xe5, 0x88, 0x5a, 0xef, 0xca, 0x45, 0x96,
0xe1, 0x77, 0x23, 0x92, 0xa1, 0x4d, 0xe2, 0x4d,
0x9d, 0xfb, 0xd9, 0x23, 0xf6, 0x5b, 0xf7, 0x09,
0xca, 0x79, 0x88, 0x5f, 0x1b, 0xfb, 0x9c, 0x2e,
0x27, 0xf9, 0x38, 0x41, 0x8a, 0x52, 0x46, 0xa1,
0xb4, 0x39, 0xdb, 0xfb, 0x54, 0x4a, 0x6d, 0xaa,
0x1d, 0xf7, 0xea, 0xb3, 0x41, 0x88, 0x0a, 0xc0,
0x3d, 0x44, 0x61, 0x67, 0x7a, 0x31, 0x93, 0xab,
0xe6, 0x6b, 0xdd, 0x65, 0x25, 0xc7, 0x23, 0x6b,
0x2c, 0x9b, 0x2f, 0x47, 0xa1, 0xd5, 0x98, 0x79,
0x6a, 0x56, 0x16, 0x2d, 0x64, 0x2d, 0x68, 0xf3,
0xaa, 0x43, 0x1b, 0xd9, 0xfd, 0x7b, 0xf6, 0x21,
0x00, 0x6a, 0x99, 0xe1, 0x4b, 0x4f, 0x5a, 0x09,
0x2f, 0x54, 0x65, 0xc4, 0xcb, 0xed, 0xd0, 0xce,
0x3d, 0x29, 0x72, 0x72, 0x8e, 0x32, 0x77, 0x48,
0xb4, 0x92, 0x9e, 0x0d, 0x47, 0xce, 0x52, 0xb7,
0xc4, 0xff, 0xde, 0x02, 0xca, 0x0b, 0xfc, 0x81,
0xcd, 0xf8, 0x7f, 0xa8, 0x4b, 0xec, 0x7c, 0x83,
0xae, 0x0d, 0x74, 0x6d, 0xcd, 0x32, 0x53, 0xa3,
0x51, 0x7c, 0x92, 0x20, 0xb1, 0x31, 0x2b, 0x81,
0xb4, 0x43, 0xed, 0xb1, 0xcc, 0xa1, 0xc3, 0x10,
0xca, 0xba, 0x8a, 0x08, 0x67, 0x69, 0x59, 0x05,
0x38, 0x0b, 0x8f, 0xa9, 0xf6, 0xa0, 0xb0, 0xed,
0xff, 0x7a, 0x48, 0xf8, 0x96, 0x81, 0x2f, 0x0e,
0x7c, 0x22, 0x1f, 0x0f, 0xd1, 0x57, 0x2c, 0x1c,
0xc4, 0xaf, 0x27, 0xe3, 0x5d, 0xf3, 0x71, 0xba,
0xd0, 0xc4, 0x97, 0x91, 0xaa, 0x3e, 0x9e, 0xb0,
0xaf, 0x54, 0x7a, 0x3e, 0x5c, 0x20, 0x14, 0x07,
0x02, 0x03, 0x57, 0x57, 0xdc, 0x5c, 0x2b, 0xec,
0xc9, 0x9f, 0xac, 0xfe, 0x94, 0x4a, 0x5c, 0xd2,
0xcc, 0x86, 0xa4, 0xea, 0x0b, 0xcf, 0x5a, 0x80,
0x55, 0xde, 0xff, 0x58, 0xbe, 0xdc, 0x7f, 0x94,
0xa3, 0x26, 0xa1, 0xa7, 0x5c, 0x40, 0x4e, 0x81,
0x18, 0xde, 0xa4, 0xa2, 0xef, 0x4d, 0xa0, 0xf1,
0x81, 0x3a, 0xc0, 0x69, 0x08, 0xb1, 0xd7, 0x03,
0xc0, 0x05, 0x6e, 0x83, 0xf8, 0x15, 0xb6, 0xd3,
0xf0, 0x36, 0x39, 0x1e, 0x85, 0xdf, 0xef, 0x43,
0x8f, 0x25, 0xf9, 0xe1, 0x86, 0x44, 0x46, 0xae,
0xf8, 0x58, 0x7e, 0x8d, 0xb7, 0xa6, 0xa8, 0x08,
0xe7, 0xa9, 0xb7, 0xfa, 0x92, 0x8e, 0xf2, 0x6f,
0x84, 0x27, 0x98, 0x87, 0x6c, 0x2c, 0x98, 0xd8,
0xe8, 0x19, 0xe0, 0x9c, 0x91, 0x79, 0x3c, 0xf8,
0x96, 0xf0, 0x74, 0x72, 0x41, 0xae, 0x1e, 0xb0,
0xdf, 0xdb, 0x76, 0x69, 0x80, 0xd4, 0xf1, 0x1c,
0x7b, 0x1b, 0x27, 0x75, 0xbf, 0x42, 0xe6, 0x81,
0xb8, 0x29, 0xb2, 0x77, 0x17, 0x42, 0xa2, 0xee,
0x72, 0xc8, 0x9e, 0xd0, 0xae, 0xa1, 0xcc, 0xf9,
0x1d, 0x1a, 0x3b, 0xd9, 0x70, 0xf4, 0xf2, 0xae,
0x0a, 0x45, 0xce, 0x31, 0x9d, 0x91, 0x71, 0x9c,
0xde, 0x44, 0x44, 0xf7, 0x26, 0x95, 0x56, 0xea,
0xa6, 0x83, 0x1a, 0x96, 0xd1, 0x79, 0x55, 0x43,
0x30, 0xbb, 0x31, 0x98, 0xa3, 0x0a, 0x6e, 0xcc,
0x03, 0xc5, 0x0c, 0x86, 0xa3, 0xa6, 0xea, 0x7e,
0x17, 0xb3, 0x4e, 0x20, 0x8e, 0x33, 0xdd, 0x6a,
0xb0, 0xb6, 0x2c, 0x5e, 0xa3, 0x36, 0xfe, 0x6d,
0x8e, 0x25, 0x22, 0xc7, 0x97, 0x08, 0x4f, 0x4f,
0x71, 0x6d, 0xfb, 0xbc, 0x46, 0x44, 0x43, 0x99,
0x1f, 0xfa, 0x40, 0xbf, 0xca, 0x3d, 0x58, 0x86,
0x09, 0x80, 0xd0, 0x8f, 0xe2, 0xe5, 0xbe, 0x42,
0xe5, 0xfd, 0x0c, 0xb4, 0xcb, 0xd9, 0x3e, 0x07,
0x7b, 0xdd, 0xe9, 0xab, 0xb3, 0x91, 0x64, 0xff,
0x0a, 0xe1, 0x48, 0xd7, 0x28, 0xdc, 0x32, 0x2a,
0xe9, 0xdc, 0x68, 0x5f, 0x19, 0xce, 0xb2, 0x41,
0xc5, 0xb8, 0xe6, 0x84, 0x24, 0xb7, 0xc9, 0xf2,
0xf7, 0xd9, 0x70, 0xb4, 0x2b, 0x03, 0x83, 0xb9,
0xd0, 0x53, 0xb1, 0x88, 0xc5, 0x0f, 0xfe, 0xeb,
0xef, 0xe5, 0x03, 0x83, 0x51, 0x6d, 0xee, 0x00,
0x7d, 0xe0, 0x93, 0xb4, 0xef, 0x69, 0x1f, 0x06,
0xd9, 0x39, 0xc5, 0xf1, 0xc4, 0x1e, 0x9f, 0x38,
0xe3, 0x78, 0x3c, 0x2a, 0x7c, 0x4d, 0x22, 0xcc,
0xb1, 0x30, 0x1f, 0xb4, 0x23, 0x26, 0x53, 0xfb,
0xab, 0x64, 0xe2, 0x01, 0xb3, 0x8f, 0x37, 0x23,
0x8a, 0x11, 0x44, 0x17, 0x02, 0x37, 0x22, 0x37,
0x04, 0xed, 0x38, 0x53, 0xab, 0xa2, 0x21, 0x76,
0xbd, 0xf9, 0xfa, 0x68, 0xec, 0x6c, 0x46, 0x5f,
0x78, 0xb5, 0x69, 0x9e, 0x88, 0xf2, 0x3c, 0x05,
0x19, 0xfd, 0xbc, 0x97, 0x35, 0x64, 0x60, 0xfb,
0x9c, 0x62, 0xc4, 0xa0, 0x4c, 0x13, 0x28, 0x82,
0x19, 0x42, 0x2f, 0xc2, 0x0d, 0x1a, 0xca, 0xa4,
0xea, 0x01, 0x2d, 0x38, 0x5c, 0x51, 0xa4, 0x00,
0xa5, 0x3a, 0x88, 0x9a, 0x0c, 0xc9, 0x22, 0x96,
0x79, 0x51, 0xb4, 0x7d, 0x6d, 0x77, 0xdb, 0xb5,
0x15, 0xd5, 0xc0, 0x45, 0xda, 0xe3, 0xb8, 0x53,
0x42, 0xa7, 0x3c, 0xdc, 0x32, 0x62, 0x43, 0x3b,
0x67, 0x7d, 0x1f, 0x39, 0xb3, 0xa3, 0xdd, 0xc1,
0x0f, 0x8e, 0x69, 0x93, 0xa6, 0x07, 0x29, 0xbb,
0xf0, 0x93, 0xd3, 0x4c, 0x83, 0x17, 0x4b, 0x65,
0xb0, 0x6c, 0xb9, 0x2d, 0x1b, 0x5c, 0xe0, 0x6a,
0x49, 0xaf, 0x29, 0xf8, 0xeb, 0x85, 0x94, 0x3e,
0x89, 0x05, 0x72, 0x53, 0x41, 0x7f, 0x75, 0xc8,
0x2e, 0x85, 0x86, 0x54, 0xd4, 0x0b, 0xb9, 0xab,
0xec, 0xbf, 0x16, 0x76, 0x56, 0xc6, 0x65, 0x6a,
0x9b, 0xc7, 0x21, 0xc9, 0xab, 0x50, 0x1b, 0xb5,
0x6a, 0xe5, 0x9e, 0x60, 0x9d, 0xf4, 0x9a, 0xa3,
0x21, 0x9e, 0x16, 0x4e, 0x00, 0x01, 0x1a, 0xa4,
0x75, 0xae, 0x0e, 0xae, 0x3f, 0xd2, 0xf3, 0x6e,
0x90, 0xeb, 0x6b, 0x25, 0x46, 0x65, 0x45, 0xeb,
0x34, 0x0b, 0xb2, 0xcc, 0x0c, 0x8f, 0xe1, 0x77,
0xa3, 0x69, 0x28, 0x7e, 0x34, 0x26, 0xb8, 0x33,
0x50, 0x04, 0x48, 0x08, 0xab, 0x2b, 0x30, 0x02,
0xa6, 0x02, 0xa3, 0x95, 0xa5, 0x40, 0x04, 0x39,
0x02, 0x06, 0x66, 0xa6, 0x99, 0xa0, 0xb0, 0xc9,
0x99, 0xaa, 0xbc, 0xe0, 0xbb, 0x9c, 0x74, 0xcf,
0xa9, 0xe6, 0xcd, 0x75, 0x87, 0xe5, 0x07, 0xc1,
0xf3, 0x8e, 0xcb, 0xa4, 0x0c, 0x9a, 0xc9, 0xc7,
0x5b, 0x0b, 0x8f, 0x3c, 0x2f, 0x8f, 0x16, 0x42,
0x68, 0x38, 0x9b, 0x1f, 0x01, 0xce, 0x75, 0x60,
0x16, 0x3a, 0xea, 0xd1, 0xc3, 0x49, 0x9a, 0x9b,
0xc8, 0x98, 0x66, 0x85, 0xea, 0xd1, 0x4d, 0x7a,
0x8e, 0x03, 0x10, 0x89, 0x4a, 0xd7, 0x6b, 0x4e,
0x53, 0x58, 0xf3, 0xd5, 0xe4, 0xf8, 0x42, 0xad,
0xa7, 0xce, 0x65, 0xb5, 0x2b, 0x7e, 0x59, 0x90,
0x75, 0x0f, 0x71, 0xdd, 0x85, 0x49, 0x52, 0xf6,
0x72, 0x52, 0x2a, 0x93, 0x93, 0x06, 0xdb, 0xaa,
0x05, 0xe4, 0x19, 0xb0, 0x31, 0x79, 0x72, 0xc0,
0xed, 0xf6, 0x3f, 0xcd, 0xda, 0x79, 0x5e, 0xe7,
0xe8, 0xb9, 0x85, 0x94, 0x9a, 0x96, 0xdb, 0xb8,
0xb9, 0x00, 0x29, 0x60, 0x17, 0x93, 0xe7, 0x53,
0x92, 0xde, 0xd7, 0x86, 0x45, 0x03, 0xd5, 0xbc,
0xc2, 0x09, 0x05, 0xa7, 0x6c, 0x6d, 0xb9, 0x20,
0xcb, 0xb8, 0x3c, 0x62, 0x09, 0xed, 0xac, 0x12,
0x73, 0xd1, 0xbf, 0xa8, 0x77, 0x2c, 0x21, 0x92,
0x03, 0xa8, 0x3e, 0xee, 0x2b, 0x41, 0x16, 0x6c,
0xaf, 0xad, 0x82, 0x3d, 0x69, 0xde, 0x8f, 0xb4,
0x6f, 0x12, 0xca, 0x38, 0xbb, 0xb0, 0xaf, 0x23,
0x81, 0x27, 0xb9, 0xa3, 0x03, 0x77, 0x4a, 0xf2,
0xe2, 0xb5, 0xfe, 0xff, 0xec, 0x8f, 0x26, 0xe9,
0xf6, 0x95, 0x3f, 0xc4, 0x05, 0x56, 0xaa, 0x62,
0x4a, 0x13, 0x14, 0x37, 0xc6, 0xe7, 0x19, 0x77,
0xdc, 0xbe, 0x00, 0x0a, 0x9f, 0x99, 0xda, 0xf3,
0xf2, 0x2a, 0xd6, 0x7d, 0xa7, 0xa8, 0x0e, 0x90,
0xb7, 0xf3, 0xd5, 0xbe, 0xcd, 0xeb, 0x39, 0xa3,
0x19, 0xb3, 0x11, 0x96, 0x76, 0x62, 0x8b, 0xe1,
0xae, 0xde, 0x07, 0x3c, 0xf6, 0x48, 0xed, 0x9e,
0xec, 0x91, 0x6f, 0xed, 0xcc, 0x0d, 0xfc, 0x24,
0x1d, 0xf3, 0x23, 0x5a, 0x2e, 0xdd, 0x4a, 0x87,
0xa3, 0x78, 0xb9, 0x51, 0x03, 0xdc, 0xb2, 0xc9,
0x6a, 0xda, 0x6b, 0x8e, 0xe0, 0x8a, 0x25, 0x00,
0xf4, 0xa7, 0x9c, 0x6f, 0x19, 0xb8, 0xd6, 0x51,
0x54, 0x53, 0x92, 0x6c, 0x95, 0xcf, 0x33, 0xe5,
0xc3, 0x4b, 0x54, 0x76, 0x27, 0xbf, 0x29, 0x56,
0xdb, 0xf8, 0xce, 0x98, 0xc1, 0xd5, 0x86, 0x44,
0x59, 0x16, 0xee, 0x99, 0xc5, 0x3a, 0x3a, 0x4e,
0xb7, 0x2b, 0x1a, 0x65, 0x67, 0xfe, 0xc0, 0x10,
0xc8, 0x7e, 0x6f, 0x3a, 0xbd, 0x9e, 0xc9, 0x3b,
0x44, 0xf2, 0x99, 0xa0, 0x09, 0x5e, 0xed, 0xc7,
0x2b, 0xfc, 0x64, 0xfa, 0x49, 0x86, 0x94, 0x5b,
0x06, 0x5f, 0x56, 0x0c, 0xc3, 0x2b, 0x81, 0xc4,
0x23, 0x7f, 0xcb, 0x0e, 0xb7, 0x5d, 0xaa, 0x3a,
0xa5, 0x14, 0x99, 0x97, 0x68, 0x72, 0xe7, 0xd2,
0xd0, 0x6c, 0xcd, 0x3c, 0x20, 0xe1, 0x09, 0xe1,
0x19, 0xb9, 0xbb, 0x4e, 0x38, 0xe8, 0x7b, 0x4c,
0xf7, 0xf2, 0x72, 0x11, 0xc1, 0xcd, 0x06, 0x64,
0x38, 0xa1, 0xc6, 0x34, 0x68, 0xd9, 0x3c, 0x05,
0x36, 0x0a, 0x8a, 0x3b, 0x7f, 0x5a, 0x9e, 0x34,
0xb8, 0x46, 0xe8, 0xdd, 0xee, 0x69, 0xf6, 0xc0,
0x2a, 0x31, 0x8b, 0xf5, 0xc8, 0x44, 0x23, 0xa7,
0x88, 0x21, 0x1d, 0xc8, 0x59, 0xc7, 0xfe, 0x5b,
0xc5, 0xb0, 0x16, 0x33, 0x5f, 0xe7, 0x94, 0xf5,
0xea, 0x29, 0x22, 0xd0, 0x22, 0x4d, 0xd4, 0x8a,
0xcb, 0x6c, 0xde, 0x56, 0x61, 0x51, 0x2b, 0x23,
0x86, 0xca, 0x83, 0x60, 0xdb, 0xa3, 0x0e, 0x6b,
0x19, 0x17, 0x23, 0x42, 0xaf, 0x2b, 0x80, 0xd1,
0x7d, 0x05, 0x2b, 0x52, 0x6b, 0xee, 0x23, 0x43,
0x49, 0x93, 0x10, 0xd6, 0xea, 0xc0, 0xa6, 0x30,
0x0c, 0x2d, 0xa4, 0x0b, 0x91, 0x0c, 0x53, 0x81,
0x8a, 0x91, 0xc9, 0x8f, 0xa2, 0xa0, 0x37, 0xa5,
0xee, 0xfa, 0x31, 0xda, 0x3f, 0xc3, 0x2b, 0xd7,
0x5f, 0xd0, 0xcf, 0xaf, 0x0b, 0xa2, 0x4b, 0x1e,
0x95, 0x7f, 0xa2, 0x18, 0x31, 0xe7, 0x26, 0x2e,
0x29, 0x38, 0xc9, 0x8d, 0xce, 0xed, 0xff, 0xe3,
0xe5, 0x2c, 0x17, 0xb6, 0xfc, 0x86, 0x61, 0x3f,
0x12, 0x24, 0x5c, 0xed, 0x72, 0xb3, 0xb2, 0x42,
0x63, 0x32, 0x1b, 0x35, 0x80, 0x48, 0xda, 0xd4,
0x6b, 0x16, 0x89, 0xd2, 0x21, 0x94, 0x00, 0x73,
0xf1, 0x2b, 0xec, 0x60, 0xea, 0x50, 0xf0, 0xb2,
0x6b, 0x79, 0x39, 0xd1, 0x2e, 0x45, 0xe6, 0x06,
0x28, 0x72, 0x44, 0x4e, 0x41, 0x59, 0x35, 0xa7,
0xf4, 0xf3, 0xbb, 0x1b, 0x58, 0xe2, 0xd6, 0x21,
0x30, 0xdf, 0x25, 0x12, 0x3f, 0xeb, 0x69, 0x66,
0x0c, 0xcb, 0xa1, 0xf0, 0x3f, 0xf6, 0x49, 0xd0,
0x4e, 0x8f, 0x99, 0x67, 0x3c, 0x2b, 0x65, 0xe8,
0x27, 0x6c, 0x94, 0x23, 0x26, 0x7d, 0x29, 0xa8,
0xd3, 0x6d, 0x38, 0xb5, 0xc8, 0x62, 0xb2, 0x8a,
0x24, 0x74, 0x10, 0x0c, 0x21, 0x5a, 0xe2, 0x12,
0x6e, 0xc4, 0xef, 0xe7, 0x32, 0xc4, 0xe0, 0x0b,
0x5f, 0x64, 0x1e, 0x0e, 0xf9, 0x98, 0x21, 0x42,
0xbd, 0x01, 0x94, 0x11, 0x0a, 0xee, 0xb8, 0x03,
0x39, 0x54, 0x8c, 0xcf, 0x74, 0x97, 0x0e, 0x69,
0x85, 0x91, 0x88, 0x42, 0xa2, 0x8d, 0x67, 0x35,
0x64, 0x51, 0xbb, 0x28, 0x8a, 0xa5, 0xb4, 0x0a,
0xe6, 0xe4, 0x4e, 0xdd, 0x18, 0x0f, 0xa2, 0xe0,
0xa9, 0x5c, 0x9b, 0x1f, 0x79, 0x22, 0xca, 0xbf,
0x15, 0x02, 0x86, 0xa0, 0xda, 0xd8, 0xb1, 0x3c,
0x81, 0x42, 0x42, 0xd5, 0x43, 0xac, 0x73, 0x97,
0x72, 0xd6, 0x41, 0x52, 0xd2, 0x1a, 0xb9, 0xa5,
0xea, 0x15, 0x3a, 0x61, 0xc3, 0xaf, 0x6f, 0x73,
0xe2, 0x5e, 0x4b, 0xb1, 0xde, 0x76, 0x90, 0x32,
0x91, 0x7b, 0xce, 0x96, 0x50, 0xfb, 0xba, 0xf5,
0xe2, 0x2e, 0x07, 0x2b, 0xd2, 0xa0, 0xe3, 0x65,
0xe6, 0x21, 0xfc, 0x8e, 0xcb, 0xf6, 0xe2, 0xd1,
0x9e, 0xc9, 0xf4, 0xb7, 0xb5, 0x21, 0x92, 0x20,
0x5f, 0x13, 0x57, 0x64, 0xf0, 0x94, 0x09, 0x7c,
0x55, 0x2b, 0xe0, 0x0c, 0xed, 0xef, 0xd1, 0x07,
0xb5, 0x7e, 0x82, 0x94, 0xf1, 0xe8, 0x6f, 0xc8,
0x16, 0xbb, 0x3a, 0x81, 0x80, 0x6c, 0xaf, 0xe2,
0x62, 0x5c, 0x34, 0x98, 0xea, 0x82, 0xb8, 0x9b,
0x6e, 0xee, 0xb7, 0xee, 0xa1, 0x46, 0x43, 0xec,
0x8f, 0x42, 0x78, 0x65, 0x36, 0x63, 0xd5, 0xad,
0x99, 0x32, 0x87, 0x83, 0x96, 0x0e, 0x89, 0x7b,
0x93, 0x4f, 0xd1, 0x38, 0xea, 0x77, 0x10, 0x38,
0x26, 0xee, 0x9e, 0x5e, 0xf9, 0xe9, 0xa3, 0x0e,
0xd3, 0x92, 0xe3, 0x5f, 0xd0, 0x8a, 0xf9, 0xcf,
0xcf, 0x94, 0xa5, 0x77, 0x73, 0xb0, 0xb7, 0xe9,
0x26, 0x63, 0xbc, 0x27, 0xb6, 0x44, 0x6b, 0x95,
0x2e, 0x4b, 0xf0, 0x93, 0x19, 0x89, 0xe9, 0x00,
0x13, 0x18, 0xe1, 0xb9, 0xef, 0xe1, 0xea, 0x0a,
0xd1, 0x14, 0x84, 0x33, 0x9b, 0xa4, 0x5c, 0xe6,
0x3c, 0x6c, 0x2b, 0x68, 0xc9, 0xf1, 0xc4, 0x56,
0xd3, 0xea, 0x03, 0x24, 0x0a, 0xda, 0x51, 0xf6,
0x92, 0xf6, 0x2f, 0x5c, 0xd7, 0xdf, 0x0d, 0x5d,
0x3c, 0x18, 0xc6, 0x59, 0x09, 0x1c, 0x6e, 0x9b,
0x69, 0xc7, 0x2d, 0x5b, 0x1b, 0x38, 0xfa, 0xcf,
0xdd, 0xae, 0xb7, 0x92, 0xbd, 0x5d, 0x0f, 0x4b,
0xa2, 0x53, 0x11, 0x26, 0x0b, 0x24, 0xf1, 0x4c,
0x78, 0x2e, 0x6a, 0x0e, 0xc0, 0x73, 0xb2, 0xe4,
0xa6, 0x8b, 0x55, 0xec, 0x24, 0xe8, 0x0e, 0x76,
0x3b, 0xfa, 0x62, 0xbb, 0x07, 0x05, 0xc8, 0xaf,
0xef, 0x0f, 0x89, 0xed, 0xcf, 0xfb, 0xbd, 0xa5,
0xda, 0xd7, 0x5c, 0x0e, 0x91, 0x8b, 0xea, 0x09,
0x03, 0x27, 0xf8, 0x94, 0xf8, 0x34, 0x83, 0xe8,
0x90, 0x9f, 0x05, 0xa0, 0x2b, 0xeb, 0x55, 0xd3,
0x03, 0xb5, 0x67, 0x3a, 0xf7, 0xc0, 0xe4, 0x07,
0xe1, 0x74, 0xe8, 0xf7, 0xc9, 0x88, 0x6b, 0xc4,
0x5d, 0xea, 0xf5, 0xf9, 0xa8, 0x40, 0x6c, 0x1a,
0x1a, 0x0c, 0x7b, 0xb0, 0x28, 0x6a, 0x07, 0x79,
0x0e, 0x18, 0xac, 0x78, 0xac, 0x37, 0x31, 0x1b,
0xe9, 0xab, 0x84, 0xae, 0x9a, 0x19, 0x02, 0x4e,
0x0f, 0x15, 0xa5, 0xa4, 0x11, 0xfb, 0xec, 0xea,
0xa4, 0x61, 0xc4, 0x2d, 0x35, 0x7a, 0xf6, 0x91,
0x1e, 0x85, 0x27, 0x37, 0x8e, 0x12, 0x18, 0x46,
0xd5, 0x1e, 0x9b, 0xc8, 0x56, 0x9a, 0xdb, 0xba,
0x9f, 0x55, 0x5f, 0xf2, 0x4f, 0xa4, 0x84, 0x39,
0xdb, 0xac, 0xdb, 0xd6, 0x43, 0x31, 0xf7, 0x6b,
0xf3, 0xc4, 0xfc, 0x0c, 0xd6, 0xce, 0x66, 0xd5,
0x83, 0x46, 0x31, 0x2f, 0x9e, 0x10, 0x84, 0x74,
0xf4, 0xf8, 0x35, 0xce, 0x99, 0xfe, 0x9a, 0x71,
0x04, 0x51, 0xbb, 0xf7, 0xdc, 0x13, 0x67, 0x2c,
0x8f, 0x9c, 0x8f, 0xe7, 0x02, 0x1c, 0x3f, 0x82,
0x0a, 0x39, 0xd4, 0x66, 0x45, 0x2e, 0xc7, 0x52,
0x64, 0x60, 0x6f, 0xa3, 0x28, 0xaf, 0x0e, 0xb4,
0xe4, 0xae, 0x27, 0x02, 0xad, 0x3b, 0xe3, 0xcf,
0x7d, 0xe9, 0xea, 0xa0, 0x46, 0x34, 0xab, 0x92,
0xf0, 0x07, 0x06, 0xbe, 0x35, 0xbf, 0x5e, 0x21,
0x4e, 0x65, 0xc6, 0x8f, 0x57, 0xcc, 0x06, 0xf8,
0x2f, 0xdc, 0x19, 0xa4, 0x89, 0x07, 0x2d, 0xf2,
0xa0, 0x1c, 0xa7, 0x85, 0x0b, 0x4c, 0xb1, 0x62,
0x14, 0xec, 0x8f, 0x9d, 0xba, 0x5e, 0x3e, 0x8e,
0x3e, 0x18, 0xcf, 0x04, 0x9b, 0x04, 0x8a, 0x67,
0x12, 0x51, 0x92, 0x74, 0xad, 0x44, 0x1a, 0xd4,
0xa5, 0x7a, 0x50, 0xfa, 0x34, 0xf6, 0x70, 0xf2,
0x37, 0xd5, 0x29, 0xc7, 0x4b, 0x8b, 0x15, 0x8f,
0xd0, 0x81, 0xa9, 0xda, 0x96, 0xb1, 0xb4, 0xd3,
0x03, 0x98, 0x75, 0x18, 0x84, 0x77, 0xbc, 0x9a,
0x7d, 0x08, 0x99, 0x03, 0xfc, 0x5e, 0x9c, 0x48,
0xcc, 0xab, 0xc7, 0xc9, 0x1c, 0x4e, 0x6a, 0x31,
0x0b, 0xbf, 0x8a, 0x22, 0x21, 0x59, 0xc9, 0x71,
0xe0, 0x28, 0xdd, 0x3d, 0x07, 0x3e, 0x63, 0x3d,
0xdc, 0x0d, 0x32, 0xd0, 0xf7, 0x0e, 0x71, 0x2d,
0xe3, 0x35, 0xa1, 0x15, 0x56, 0xa1, 0x50, 0xbc,
0xea, 0xcf, 0x45, 0xb8, 0x2f, 0x15, 0x56, 0xd2,
0x3c, 0x6e, 0x71, 0xba, 0xda, 0x8f, 0xb0, 0x37,
0x93, 0x5c, 0x1e, 0x75, 0xac, 0xaa, 0x2b, 0x4c,
0xcc, 0x1d, 0x37, 0xb7, 0xbf, 0x53, 0xfc, 0xbe,
0x5d, 0xb3, 0xb9, 0xea, 0xaa, 0x7b, 0xfc, 0x7c,
0xeb, 0x3a, 0xe6, 0x02, 0xe0, 0x52, 0x3a, 0x81,
0x75, 0x53, 0x7f, 0x10, 0x02, 0x62, 0x23, 0xf5,
0x4b, 0x4c, 0x47, 0x7f, 0x7c, 0xb6, 0x41, 0x32,
0xe4, 0x93, 0xfc, 0x00, 0x41, 0x9e, 0x19, 0x0e,
0x84, 0xeb, 0x8e, 0x19, 0xce, 0xc0, 0xc5, 0x05,
0x02, 0x35, 0xb9, 0x57, 0xb5, 0x43, 0x9f, 0x2c,
0xa1, 0x76, 0x56, 0xbb, 0x3b, 0xd7, 0x52, 0x3a,
0x60, 0xa6, 0x25, 0xb6, 0xeb, 0x36, 0x39, 0xc2,
0xd6, 0x26, 0x04, 0x7a, 0xa9, 0x07, 0x30, 0xcf,
0x93, 0xe4, 0x31, 0xd2, 0x8a, 0xd3, 0xeb, 0xf0,
0x5b, 0x5b, 0x60, 0x77, 0x74, 0xb4, 0x5c, 0x7d,
0xa9, 0xd9, 0x7c, 0x8e, 0x46, 0x8f, 0x69, 0xf8,
0x70, 0xb4, 0x38, 0x32, 0x56, 0xb2, 0x9a, 0x0d,
0x2e, 0xdc, 0xdf, 0xe7, 0xef, 0x75, 0xcd, 0x2b,
0x0d, 0x9e, 0xd5, 0x6a, 0x7d, 0x6e, 0x8f, 0x9b,
0xba, 0x0b, 0x8e, 0xd5, 0x3a, 0x4e, 0xbc, 0x79,
0x6a, 0xc2, 0x25, 0xdc, 0x93, 0x82, 0xf6, 0xb2,
0x7c, 0xbe, 0x17, 0xa0, 0xb3, 0xbb, 0x64, 0x08,
0x59, 0xe7, 0x9a, 0x5d, 0x1f, 0x97, 0x53, 0x5b,
0xf7, 0xa3, 0x43, 0x45, 0x0a, 0x77, 0x2f, 0x02,
0x23, 0x00, 0x79, 0x51, 0x0d, 0xa2, 0xd6, 0x2b,
0xcb, 0x2f, 0x8c, 0x54, 0xe4, 0xd4, 0x74, 0xa8,
0x35, 0x42, 0xf3, 0x93, 0x2b, 0x0c, 0x41, 0x3a,
0xe6, 0x31, 0x58, 0xb2, 0xec, 0x43, 0x93, 0xfc,
0x83, 0x2f, 0xc8, 0xf7, 0x79, 0x09, 0x08, 0x85,
0x45, 0xcd, 0xfd, 0x14, 0x28, 0xad, 0x66, 0x28,
0x88, 0xbc, 0x5f, 0xa6, 0x82, 0x24, 0x15, 0x1a,
0xbd, 0x7d, 0xa3, 0xfe, 0xad, 0xa3, 0x92, 0xbd,
0x08, 0x5b, 0xc9, 0xd8, 0xe5, 0x7d, 0x51, 0xa2,
0xac, 0x73, 0x8d, 0xed, 0x4e, 0xea, 0x6a, 0x57,
0x9e, 0x41, 0x05, 0xdc, 0xa5, 0xfa, 0xb3, 0x31,
0x34, 0x07, 0x41, 0xaa, 0xbb, 0xa4, 0xdf, 0x7e,
0xd3, 0x3f, 0x3a, 0x00, 0xe2, 0xc2, 0x85, 0x5e,
0x6a, 0x4c, 0xa5, 0x73, 0xf6, 0x79, 0x83, 0x75,
0x29, 0xa6, 0xf9, 0x32, 0x17, 0x85, 0xae, 0xcf,
0x2a, 0xb3, 0xc6, 0xc1, 0x16, 0x93, 0x10, 0x85,
0xba, 0x67, 0xae, 0x4d, 0xd6, 0x2d, 0x3c, 0x6f,
0x43, 0x5f, 0xfe, 0x05, 0xda, 0xc9, 0x30, 0x23,
0x03, 0x72, 0x52, 0xb8, 0x2d, 0xc0, 0x1e, 0xef,
0x53, 0x60, 0x3e, 0x14, 0x50, 0x7d, 0x1d, 0x70,
0x43, 0xf1, 0x7f, 0x66, 0x3e, 0x98, 0xc3, 0xcb,
0x08, 0x6b, 0x18, 0x87, 0xad, 0x72, 0xc1, 0xba,
0x13, 0x6e, 0xc2, 0xde, 0xdd, 0x4c, 0xc4, 0x4e,
0x7c, 0xdf, 0xb3, 0x28, 0x9b, 0xd7, 0x6b, 0x90,
0x90, 0x1e, 0xe7, 0x97, 0xa6, 0xa9, 0x04, 0x72,
0xba, 0x42, 0xef, 0x8a, 0xcd, 0x36, 0x71, 0x45,
0x52, 0x29, 0x61, 0x9a, 0xa8, 0x2f, 0x5b, 0x9b,
0xae, 0x2d, 0xb3, 0x94, 0x47, 0x0c, 0xa8, 0x25,
0xa0, 0x28, 0x13, 0xb4, 0x3d, 0x5b, 0x86, 0x49,
0x50, 0xf4, 0x60, 0xd6, 0x88, 0xc5, 0x60, 0x63,
0x77, 0x74, 0x3f, 0x61, 0x5d, 0xb7, 0x68, 0xcd,
0x8f, 0x09, 0x96, 0xb3, 0x76, 0xb7, 0xa6, 0x90,
0xe9, 0x88, 0x92, 0x83, 0xad, 0xbf, 0xa6, 0x0d,
0x7d, 0x48, 0x68, 0x20, 0xc6, 0xa4, 0xfc, 0x13,
0xea, 0x72, 0x6c, 0xa6, 0xbf, 0x43, 0x2d, 0xf7,
0xa8, 0x69, 0x04, 0xa9, 0x31, 0x48, 0xfa, 0x17,
0x87, 0xae, 0x4f, 0xda, 0x5a, 0x1c, 0x39, 0x96,
0xf5, 0xe1, 0xe2, 0x0c, 0xea, 0x09, 0x0d, 0xaf,
0x43, 0x69, 0xb8, 0x66, 0xfd, 0xd6, 0x27, 0xbb,
0x6a, 0x02, 0xc5, 0xfc, 0x1f, 0xf4, 0x86, 0xba,
0xcf, 0xdd, 0x06, 0x1d, 0xf6, 0x2c, 0x7b, 0x67,
0xbe, 0xe9, 0x13, 0xa0, 0x33, 0x2c, 0xf0, 0x96,
0x11, 0x39, 0xbf, 0x72, 0x97, 0xee, 0x35, 0x52,
0x93, 0x5b, 0xd6, 0x7e, 0xff, 0xab, 0x62, 0x99,
0xe8, 0xea, 0x35, 0xb8, 0x4f, 0xb0, 0x57, 0x40,
0x0f, 0x65, 0x25, 0x84, 0x7b, 0xd6, 0x74, 0xce,
0x15, 0xf0, 0x4e, 0x0b, 0xc2, 0x3b, 0xd3, 0x42,
0x9c, 0x7a, 0x88, 0x0d, 0x9e, 0xcc, 0x76, 0xdb,
0x79, 0x2b, 0x6b, 0xa6, 0x0f, 0x50, 0x7f, 0xda,
0x63, 0xa9, 0x83, 0x1b, 0x62, 0x57, 0xb5, 0xd2,
0x1f, 0x49, 0x7f, 0xdf, 0xd5, 0xb6, 0xaa, 0x3e,
0x83, 0x44, 0xe7, 0x7c, 0x6e, 0x8a, 0xa2, 0x34,
0x0c, 0x7d, 0x01, 0x2e, 0x7f, 0x78, 0x95, 0xc4,
0x61, 0xdd, 0xba, 0x4d, 0x73, 0x74, 0xea, 0x36,
0xef, 0xca, 0xd8, 0x58, 0x20, 0xaa, 0xed, 0x4c,
0xcc, 0xfa, 0xe1, 0x47, 0x5d, 0x74, 0xaf, 0xc7,
0xfe, 0xcb, 0xc7, 0xb1, 0xa0, 0x67, 0xd4, 0xa0,
0x35, 0x08, 0xa4, 0x85, 0xe1, 0x86, 0xb5, 0x86,
0x03, 0x52, 0x2f, 0x4d, 0x42, 0x65, 0x8a, 0x79,
0xfa, 0x7b, 0x3c, 0xa7, 0x24, 0x30, 0x29, 0xa2,
0x59, 0xdc, 0x31, 0xe2, 0xdc, 0x92, 0x83, 0x48,
0x6e, 0x74, 0x35, 0x24, 0x1e, 0xef, 0x8d, 0xa9,
0x9d, 0xe1, 0x94, 0xe6, 0xb6, 0x74, 0xff, 0xe2,
0x5a, 0x55, 0x7e, 0x9e, 0x53, 0x0f, 0x56, 0xc5,
0xb9, 0x8c, 0x18, 0xc4, 0xe8, 0x5c, 0xf9, 0x86,
0xba, 0x6f, 0xe4, 0xb4, 0xd9, 0x23, 0x51, 0x1b,
0x36, 0xf1, 0x96, 0xb4, 0x55, 0xe1, 0xdd, 0x3a,
0x32, 0x3b, 0x2e, 0x77, 0xda, 0xe7, 0xf5, 0xeb,
0xdf, 0x92, 0x8b, 0x6c, 0xd0, 0x65, 0x92, 0x87,
0x20, 0xd1, 0x25, 0xbf, 0x9b, 0x67, 0x2e, 0x01,
0x7c, 0x86, 0x73, 0x5b, 0xa0, 0xbb, 0x12, 0x9f,
0x07, 0xa8, 0xcc, 0x27, 0xdc, 0x52, 0x1c, 0xb5,
0xa2, 0x51, 0x8f, 0x9a, 0xd3, 0x01, 0xfc, 0x03,
0x0e, 0x3a, 0x7d, 0xac, 0x7b, 0xe7, 0x5b, 0x77,
0xb5, 0xdb, 0xa8, 0x52, 0x05, 0xf7, 0x0a, 0xc0,
0x02, 0x8e, 0x61, 0x42, 0x4f, 0x4a, 0x5d, 0xd6,
0x40, 0x5d, 0xb5, 0xab, 0xfb, 0xc1, 0xa9, 0x9f,
0xb5, 0xa5, 0x79, 0x16, 0x79, 0xfb, 0xd8, 0x2d,
0xd5, 0xe9, 0xc4, 0x0b, 0x07, 0x13, 0x44, 0x34,
0xf5, 0xf2, 0x35, 0x1e, 0x58, 0x3a, 0xc3, 0x0a,
0x0d, 0x65, 0x52, 0x8f, 0x10, 0x78, 0x8f, 0x0c,
0x7e, 0x0f, 0x66, 0xaf, 0xbd, 0x30, 0xe9, 0x9b,
0x99, 0xf5, 0x26, 0x40, 0x5c, 0xf5, 0x55, 0x82,
0x1b, 0x4e, 0x10, 0x20, 0xc0, 0xc4, 0x0f, 0x22,
0xbd, 0x96, 0xb3, 0x15, 0x33, 0x43, 0x6e, 0x5a,
0x0b, 0x36, 0xc3, 0x07, 0x13, 0x67, 0x49, 0x76,
0x02, 0xcb, 0xfa, 0x98, 0x11, 0xe0, 0x59, 0xc0,
0x4d, 0x5e, 0x0b, 0x9e, 0x65, 0x79, 0x54, 0x18,
0x1c, 0x51, 0x25, 0xd1, 0xa7, 0x61, 0xbf, 0xa8,
0x31, 0x21, 0x31, 0x1a, 0x8b, 0x29, 0xd6, 0x77,
0x47, 0xc2, 0x89, 0x10, 0x10, 0x40, 0x9f, 0xea,
0x9c, 0x17, 0x69, 0xf0, 0xf6, 0x4e, 0x14, 0xf9,
0x47, 0x42, 0x96, 0x06, 0x1c, 0x4b, 0x0d, 0x2b,
0xbb, 0xa8, 0x7f, 0xd5, 0xb6, 0x8c, 0x6d, 0x50,
0x0c, 0x59, 0xe7, 0xc4, 0x4a, 0x81, 0x94, 0x77,
0xa6, 0xd8, 0x39, 0x4d, 0x39, 0x9a, 0x2f, 0x5c,
0xbc, 0xfc, 0xe7, 0xd4, 0xf8, 0x01, 0xbc, 0x8a,
0xec, 0x13, 0xc3, 0x3a, 0xb5, 0x07, 0x82, 0x57,
0xee, 0xae, 0xfa, 0x65, 0x8c, 0x9d, 0x93, 0x50,
0x66, 0xe5, 0x84, 0x5d, 0x1a, 0xb7, 0xb6, 0xc6,
0xf9, 0x9c, 0x09, 0xf2, 0x5c, 0x6c, 0x21, 0x32,
0xf6, 0x4f, 0x30, 0x12, 0x2d, 0xf5, 0x4a, 0xe4,
0x4f, 0xa2, 0x24, 0x69, 0xae, 0x44, 0x1e, 0xd6,
0x1c, 0x17, 0xa9, 0x83, 0xef, 0x23, 0x94, 0xc3,
0x2e, 0x92, 0x0d, 0x4b, 0x51, 0xa8, 0x59, 0xaa,
0xf2, 0xd2, 0xb9, 0xcb, 0xba, 0xd7, 0x0b, 0xb8,
0x84, 0xc0, 0x9c, 0x63, 0x21, 0x6c, 0xab, 0xa9,
0xcb, 0x0c, 0x30, 0x18, 0x58, 0x12, 0x9e, 0xa4,
0x30, 0xb9, 0x7e, 0x3f, 0x57, 0x5b, 0x24, 0x12,
0x5e, 0x20, 0x7b, 0xbd, 0xc3, 0xfc, 0x7a, 0x42,
0x1f, 0x4c, 0x89, 0xf8, 0x20, 0x6b, 0xe4, 0x08,
0xea, 0x20, 0x1e, 0x0c, 0xa1, 0x6c, 0x8e, 0x6b,
0x1d, 0xb5, 0xdd, 0x39, 0x9a, 0x55, 0x71, 0x06,
0x99, 0x56, 0x16, 0xd2, 0x31, 0x8d, 0xb7, 0x42,
0x58, 0x14, 0x31, 0xc3, 0x96, 0x9a, 0xb4, 0xdb,
0x6c, 0xb6, 0xf4, 0x53, 0x82, 0xc3, 0x58, 0xeb,
0x05, 0x54, 0xfa, 0xdb, 0xd7, 0xf6, 0x5a, 0xac,
0x58, 0x1d, 0x5f, 0xaf, 0xc2, 0x57, 0x07, 0xff,
0x50, 0x35, 0x36, 0x89, 0x2d, 0x17, 0x8b, 0x37,
0x16, 0xf9, 0x0b, 0x8e, 0xf4, 0xcb, 0xd7, 0x96,
0x90, 0xf9, 0xdf, 0xe3, 0xeb, 0x46, 0xe2, 0xa9,
0x30, 0xb4, 0xa9, 0x26, 0x73, 0x2c, 0xdc, 0x22,
0x3e, 0x9f, 0x10, 0x44, 0x90, 0x79, 0x38, 0x7b,
0x39, 0x26, 0xf7, 0x23, 0xdd, 0x5d, 0xd0, 0xdf,
0x2f, 0x8e, 0x3b, 0xc6, 0x81, 0x98, 0x46, 0x7d,
0x61, 0xe1, 0x1c, 0x79, 0xa2, 0xec, 0x89, 0xc3,
0x6f, 0x4a, 0xa3, 0xaf, 0xe7, 0xc4, 0x0a, 0xe6,
0x30, 0x13, 0x83, 0x9d, 0xf8, 0xcf, 0xfc, 0xe3,
0x9a, 0x8c, 0xb0, 0xd0, 0x84, 0x94, 0x5a, 0xbf,
0xf8, 0x4d, 0x27, 0x0c, 0xd3, 0x77, 0x5d, 0x37,
0x15, 0x28, 0x97, 0x49, 0xf3, 0xae, 0xa5, 0xc7,
0x57, 0x0c, 0x13, 0x93, 0x6f, 0x7f, 0x46, 0xbb,
0x39, 0x9d, 0x4e, 0x48, 0x44, 0xe8, 0x44, 0x6e,
0xb5, 0xae, 0x63, 0xdc, 0xcb, 0x36, 0xf8, 0xa5,
0xf9, 0xf5, 0x00, 0x3c, 0xdd, 0x38, 0xb7, 0x84,
0xaf, 0x52, 0xcc, 0xef, 0xda, 0x8f, 0x67, 0x99,
0x48, 0xfd, 0x5b, 0x6a, 0x4a, 0xdb, 0xb4, 0x22,
0x1b, 0xbc, 0x23, 0x5e, 0xc9, 0x3b, 0x42, 0xf1,
0xc9, 0x84, 0xe8, 0x70, 0x45, 0x8d, 0xc4, 0x26,
0x60, 0x0b, 0xbd, 0x01, 0x02, 0x4c, 0x4f, 0xde,
0xa7, 0x19, 0x26, 0xff, 0xdb, 0x53, 0x1a, 0x0e,
0x7d, 0x15, 0xa4, 0xfd, 0x7a, 0x87, 0xc2, 0xa3,
0x5e, 0xdf, 0x64, 0xbd, 0x77, 0x70, 0x09, 0xb2,
0xc6, 0xfa, 0xda, 0x06, 0x0e, 0x46, 0xef, 0x6c,
0x47, 0x60, 0x9f, 0x57, 0x78, 0x9f, 0xb0, 0xab,
0x71, 0x65, 0x56, 0x01, 0x40, 0xe9, 0xe7, 0x9a,
0x1f, 0x2d, 0x13, 0x66, 0x07, 0x40, 0xb6, 0x47,
0x9c, 0xb2, 0x76, 0x58, 0x61, 0x3b, 0xc6, 0x28,
0xd7, 0xc4, 0xc0, 0x86, 0x2e, 0x90, 0x42, 0x46,
0x6b, 0x00, 0x47, 0x4e, 0xea, 0xb9, 0xb8, 0xa9,
0x51, 0x8c, 0x1a, 0x04, 0x03, 0x43, 0x05, 0x6c,
0x14, 0x04, 0xf6, 0x03, 0x2e, 0xda, 0x47, 0x7b,
0x9e, 0x98, 0x40, 0x2d, 0x68, 0xd6, 0x67, 0xb8,
0x26, 0x20, 0x07, 0x00, 0x6f, 0x0e, 0x94, 0x46,
0xe5, 0x1d, 0xe2, 0x99, 0x9a, 0xfd, 0xe3, 0xfc,
0x16, 0xf7, 0xb9, 0x62, 0x36, 0xcd, 0x96, 0xa1,
0x67, 0x1d, 0x6c, 0x80, 0x70, 0xa5, 0x6b, 0x79,
0xf8, 0x19, 0x5b, 0x3d, 0xce, 0x8c, 0x8a, 0xb7,
0x16, 0x6d, 0xf8, 0xdd, 0xe8, 0x2c, 0x2e, 0xfd,
0xb1, 0x83, 0xa5, 0x4c, 0xd4, 0x67, 0x96, 0x97,
0xcf, 0x66, 0x98, 0xad, 0x61, 0x4c, 0xa6, 0x0a,
0xfa, 0x8f, 0xa7, 0x4e, 0x92, 0x80, 0x3f, 0xb3,
0xf7, 0x49, 0x24, 0xeb, 0x02, 0xe9, 0xa0, 0xe8,
0xa3, 0x22, 0x88, 0x68, 0x15, 0x2a, 0xa0, 0x1e,
0x0d, 0x6f, 0x31, 0x3b, 0x22, 0x48, 0x45, 0x63,
0xa9, 0xce, 0x1e, 0x4b, 0xbb, 0xaa, 0x2a, 0x1e,
0x59, 0x1c, 0x4a, 0xf5, 0xd7, 0x8e, 0x3b, 0x5e,
0x11, 0x8b, 0x7f, 0x47, 0x2d, 0x9f, 0x11, 0xe4,
0x1a, 0xca, 0x9f, 0x72, 0xfc, 0x5a, 0x25, 0x36,
0x0c, 0xa0, 0x9f, 0x45, 0xa2, 0xa6, 0xdd, 0x28,
0xbf, 0x54, 0x3a, 0x3a, 0x3a, 0x97, 0xc6, 0xfe,
0xbd, 0x2e, 0x60, 0x25, 0x92, 0x85, 0x9b, 0x5c,
0xf0, 0x2a, 0x60, 0x79, 0xa1, 0x52, 0xb4, 0xc0,
0x04, 0x93, 0xbb, 0xe6, 0x1a, 0x1b, 0x69, 0xb9,
0x28, 0x7e, 0xc6, 0xd8, 0x77, 0x15, 0x24, 0x1d,
0x6d, 0xd2, 0x08, 0x58, 0xb8, 0xc8, 0xa3, 0xcc,
0x44, 0xd9, 0x4e, 0x5c, 0xb3, 0xfc, 0xf3, 0x8a,
0xc7, 0x4f, 0xa5, 0xb4, 0xf3, 0xe3, 0xe0, 0x0e,
0xc6, 0x55, 0x75, 0xd4, 0xfa, 0xa5, 0x31, 0x72,
0x65, 0x61, 0x70, 0xec, 0x17, 0xec, 0x07, 0x3a,
0x66, 0x1e, 0xb6, 0xea, 0xfa, 0xa7, 0xcb, 0x26,
0xa7, 0xdf, 0x4b, 0xfb, 0xc4, 0xc3, 0xbe, 0x97,
0x6d, 0x40, 0xcc, 0xfe, 0x19, 0x7c, 0xf7, 0xc0,
0xf4, 0x8a, 0x8f, 0xc6, 0xa6, 0xf2, 0xf4, 0xf9,
0xe1, 0x22, 0xee, 0x45, 0x47, 0x6a, 0xf0, 0x2f,
0x3f, 0xa3, 0xc4, 0x33, 0x0c, 0xf0, 0xe8, 0x1f,
0x09, 0x87, 0x7e, 0x06, 0x24, 0xf9, 0xba, 0xfc,
0x5f, 0x20, 0x96, 0x8b, 0x37, 0xe6, 0xa5, 0xde,
0x93, 0x68, 0xe9, 0xdd, 0xf7, 0x6f, 0xc0, 0xa7,
0xa2, 0xf3, 0x4e, 0x83, 0xfd, 0xd8, 0x25, 0x0e,
0xa0, 0x76, 0x45, 0xfd, 0x84, 0x1c, 0xce, 0x55,
0xd8, 0xfa, 0x49, 0x1e, 0x5d, 0x77, 0x30, 0x46,
0xc6, 0x8b, 0xd5, 0xea, 0x60, 0x99, 0xa3, 0xf6,
0x4c, 0xb5, 0x22, 0x8f, 0x18, 0x4d, 0xca, 0x72,
0x68, 0xf8, 0xff, 0x32, 0x0b, 0x95, 0xfb, 0xa3,
0x89, 0x82, 0x70, 0x4f, 0x09, 0x76, 0xdd, 0xa1,
0x60, 0x70, 0xab, 0xbf, 0x76, 0xc7, 0x98, 0x61,
0x19, 0xdf, 0xe3, 0xa5, 0xed, 0x9c, 0x34, 0xad,
0x0d, 0x31, 0x7d, 0x23, 0x2e, 0xeb, 0xa5, 0x24,
0x74, 0xee, 0xe4, 0x48, 0x1b, 0x26, 0x06, 0xc3,
0x32, 0xf9, 0xe0, 0x08, 0x75, 0x23, 0x3d, 0x37,
0x99, 0x29, 0xee, 0xac, 0xb2, 0xfc, 0xa8, 0xdc,
0x29, 0x99, 0xf8, 0x7c, 0xca, 0xef, 0x19, 0x76,
0xff, 0x91, 0xb5, 0xd6, 0xc8, 0x58, 0x4d, 0xde,
0xe2, 0x54, 0x25, 0xdb, 0x21, 0x3f, 0xd0, 0xe9,
0x5d, 0x78, 0x36, 0x94, 0x05, 0xa5, 0x57, 0xcc,
0xd8, 0xe0, 0x3e, 0x42, 0x52, 0xab, 0x5d, 0xd5,
0x57, 0x74, 0x1e, 0x93, 0xfc, 0xa9, 0x65, 0xd2,
0x8a, 0x61, 0x51, 0x7f, 0x04, 0xbf, 0x89, 0x62,
0x4e, 0x1d, 0x85, 0x42, 0x55, 0x38, 0xc9, 0xf3,
0x19, 0x8e, 0x9f, 0x9f, 0x5e, 0x76, 0x5a, 0xd0,
0xa6, 0x12, 0xab, 0x36, 0x36, 0x5a, 0x1d, 0x20,
0xff, 0x16, 0x37, 0xca, 0x1f, 0x69, 0x85, 0xa8,
0x43, 0x53, 0x06, 0xc4, 0x35, 0xf7, 0xf1, 0x08,
0x06, 0x27, 0xf8, 0xdb, 0xb2, 0x5e, 0x52, 0x35,
0x64, 0x33, 0xaa, 0x21, 0x10, 0x63, 0xec, 0x4d,
0x98, 0x1c, 0x3c, 0x4b, 0x19, 0x56, 0x42, 0xa3,
0xc1, 0xed, 0x1f, 0xb2, 0x7f, 0x2d, 0xfc, 0xc3,
0x03, 0xec, 0xfa, 0x2f, 0x25, 0x14, 0x26, 0x04,
0x8e, 0xcd, 0x74, 0x6b, 0x6e, 0x3d, 0x98, 0x2a,
0x29, 0x53, 0x1e, 0xe4, 0x4c, 0x4e, 0x4f, 0x21,
0xdc, 0xa8, 0xbc, 0x1e, 0xb8, 0x5b, 0x55, 0xad,
0xb7, 0xdd, 0xf4, 0x1c, 0xde, 0x58, 0x9e, 0x41,
0x70, 0x86, 0xe4, 0x53, 0xc0, 0xa4, 0x88, 0x22,
0x6d, 0x86, 0xb9, 0xf7, 0x0d, 0xb0, 0x1f, 0xfa,
0x4b, 0x2c, 0x9d, 0xbf, 0x8a, 0x22, 0xc7, 0x25,
0xa6, 0x87, 0xf5, 0xa6, 0xde, 0xcc, 0xf9, 0xb2,
0x87, 0xc1, 0x1f, 0x2b, 0x03, 0xa9, 0x70, 0x6e,
0xea, 0x3b, 0x43, 0x56, 0x10, 0xd5, 0x04, 0x3e,
0xef, 0xdc, 0xb9, 0xba, 0x2f, 0x45, 0x75, 0x99,
0x45, 0xf3, 0x4d, 0x8f, 0xc0, 0x73, 0xd1, 0xb7,
0xe3, 0xdf, 0x78, 0xbd, 0xeb, 0x8f, 0xeb, 0x80,
0xf1, 0xd5, 0x43, 0x54, 0x3c, 0xbd, 0x32, 0x01,
0x1a, 0x3e, 0x90, 0x71, 0x42, 0x56, 0xce, 0xfb,
0x04, 0x21, 0x40, 0xd5, 0xdd, 0x8f, 0xb3, 0x64,
0x81, 0xe1, 0x9a, 0x9d, 0x9b, 0xf2, 0x14, 0x4c,
0x5e, 0xd0, 0xb7, 0x9b, 0xc9, 0x30, 0xd2, 0x37,
0xa4, 0x95, 0x05, 0x10, 0x34, 0xb7, 0x1f, 0x5a,
0x91, 0xca, 0x76, 0x16, 0xef, 0x32, 0x63, 0x6a,
0xfc, 0xe5, 0xc7, 0xfc, 0x07, 0xf2, 0xa4, 0x78,
0xb0, 0x46, 0x75, 0x07, 0xd9, 0x79, 0x84, 0xd4,
0x9a, 0x0b, 0x4a, 0x40, 0xf0, 0x85, 0xcd, 0x83,
0x6d, 0xfd, 0xbf, 0xe5, 0xd2, 0x0f, 0x64, 0x3a,
0x53, 0xfc, 0xc4, 0x8c, 0x9e, 0x88, 0x94, 0xc8,
0x4e, 0x3e, 0xf5, 0xeb, 0xb0, 0xfb, 0x0b, 0xf1,
0x9d, 0xad, 0x79, 0x81, 0x70, 0x20, 0xa7, 0x3f,
0x63, 0x79, 0x71, 0xca, 0xe5, 0xb5, 0x59, 0xa8,
0xdb, 0xe7, 0xee, 0x0d, 0xf7, 0xeb, 0x95, 0x5a,
0x73, 0x6e, 0xd9, 0xda, 0x6b, 0x08, 0x23, 0x6d,
0xeb, 0x34, 0x3a, 0x20, 0x3b, 0xa8, 0x14, 0xf1,
0xb3, 0x5d, 0x97, 0x53, 0xb4, 0x9e, 0x94, 0x36,
0xce, 0x81, 0x36, 0x89, 0x8d, 0x65, 0x35, 0xcf,
0x41, 0xf9, 0x59, 0x72, 0xd2, 0x38, 0xde, 0xb3,
0x3e, 0x76, 0x74, 0xa2, 0x1d, 0xe3, 0x0b, 0xa2,
0x53, 0x25, 0x84, 0xf2, 0x44, 0x2f, 0xe6, 0xbb,
0xae, 0x8f, 0xde, 0x4e, 0xe8, 0xd7, 0xeb, 0xee,
0x3f, 0x2b, 0x41, 0x4c, 0xd5, 0xfc, 0x09, 0x11,
0xc9, 0xda, 0x1f, 0x15, 0x24, 0x75, 0x61, 0x31,
0x4d, 0x22, 0x5d, 0xcf, 0x0d, 0x6c, 0x91, 0xb3,
0xbd, 0xe0, 0xaf, 0x9f, 0x25, 0x17, 0x98, 0x3b,
0xd7, 0xcc, 0xc1, 0xf6, 0xc2, 0x41, 0x02, 0x0f,
0xfb, 0x76, 0x23, 0xd2, 0x82, 0xd4, 0x09, 0xf4,
0x9f, 0x7a, 0xbd, 0xa2, 0x36, 0xaf, 0x87, 0x73,
0x7f, 0x95, 0x64, 0xe8, 0x46, 0x0f, 0xb5, 0xd0,
0x1b, 0x3a, 0xc4, 0xd2, 0x98, 0xf9, 0x3e, 0x8a,
0x71, 0x00, 0xd4, 0x72, 0x3b, 0x44, 0x93, 0x86,
0xe1, 0xf0, 0x3f, 0xed, 0xdf, 0x20, 0x0f, 0xc9,
0x62, 0x72, 0x2f, 0x32, 0xea, 0xff, 0x1c, 0xf3,
0x7b, 0x0a, 0x24, 0xb2, 0xe3, 0x2f, 0x64, 0x15,
0xde, 0xd7, 0x20, 0x59, 0xb0, 0x16, 0x41, 0x99,
0xea, 0xc4, 0x99, 0x3f, 0xb2, 0x4c, 0x54, 0x64,
0x7d, 0x2a, 0x75, 0x75, 0xef, 0x5a, 0xca, 0x0c,
0x1d, 0x0f, 0xbb, 0x50, 0xcc, 0x96, 0x66, 0xce,
0x8b, 0xfa, 0x05, 0x37, 0x3d, 0x1e, 0x6a, 0x0d,
0x67, 0x8d, 0xe9, 0xa7, 0x7f, 0xfe, 0x4c, 0xc6,
0xa8, 0xd0, 0x17, 0xc7, 0x79, 0x91, 0xfa, 0xd7,
0xab, 0xd0, 0xc5, 0xb7, 0xcd, 0xe5, 0x09, 0x1b,
0x56, 0xe4, 0x47, 0x8c, 0xf1, 0x75, 0x29, 0xb8,
0x28, 0x45, 0x93, 0xed, 0x1d, 0x32, 0x79, 0x83,
0x4b, 0x12, 0x5d, 0x64, 0x9a, 0x16, 0x13, 0xab,
0x65, 0xfd, 0x25, 0xe1, 0x1c, 0xf7, 0x15, 0x35,
0xac, 0x8f, 0x34, 0x14, 0x07, 0x5f, 0x7c, 0x63,
0x28, 0xda, 0xd2, 0x77, 0x67, 0x4f, 0x87, 0xce,
0x2e, 0x1e, 0x3c, 0x2d, 0xbe, 0x51, 0xcb, 0xb0,
0x74, 0xd2, 0x27, 0x13, 0x47, 0xba, 0x3e, 0x08,
0xdf, 0xc3, 0xbc, 0x93, 0x97, 0x9c, 0xd7, 0x31,
0xbb, 0xd0, 0x0a, 0xe8, 0xfe, 0x28, 0x33, 0xc8,
0x7c, 0x82, 0x45, 0x97, 0x47, 0xfc, 0x98, 0xec,
0x4a, 0x7d, 0xad, 0x08, 0xeb, 0xfb, 0xd1, 0x9e,
0x69, 0x8e, 0x80, 0xa0, 0x78, 0xb0, 0x47, 0x98,
0x4c, 0x7d, 0x4d, 0x78, 0x77, 0x40, 0xac, 0x65,
0xce, 0x21, 0xed, 0xf7, 0x35, 0x0f, 0xfd, 0xd2,
0x68, 0x4f, 0x26, 0x25, 0x62, 0x5f, 0xeb, 0x8c,
0xe7, 0x01, 0x7b, 0x08, 0x7f, 0xeb, 0x88, 0xa8,
0x23, 0xef, 0xe4, 0xfb, 0x99, 0x69, 0x40, 0x70,
0x5e, 0x44, 0x10, 0xca, 0x48, 0xa4, 0x99, 0xb2,
0x3a, 0x1d, 0xb6, 0x14, 0xae, 0x4d, 0x58, 0x6d,
0xb9, 0x42, 0x65, 0x18, 0xb9, 0x94, 0xd5, 0x45,
0x22, 0x8b, 0xc8, 0x10, 0xe1, 0xcc, 0x83, 0x37,
0x9b, 0x22, 0xe9, 0x5d, 0x9a, 0xb3, 0x1c, 0x3e,
0x2b, 0xc6, 0xe9, 0x2f, 0x70, 0x32, 0xa1, 0xf7,
0xe0, 0xc7, 0x60, 0x51, 0xce, 0x2e, 0x83, 0xc6,
0x38, 0x7c, 0x9b, 0xaa, 0xcd, 0x1e, 0xc6, 0x93,
0xff, 0x6a, 0xe7, 0x1a, 0x6e, 0xf3, 0x9f, 0x29,
0xa3, 0x0a, 0x71, 0xf3, 0x54, 0x79, 0xa3, 0x7c,
0x42, 0x62, 0x49, 0x3b, 0x92, 0x01, 0xb9, 0x54,
0x34, 0x62, 0x13, 0xb4, 0xfb, 0x01, 0x4f, 0x16,
0xee, 0x21, 0x76, 0xf7, 0xcc, 0xaa, 0xfa, 0xe3,
0x35, 0x3a, 0xf4, 0xa5, 0x5a, 0x2a, 0xf4, 0x56,
0xd7, 0xed, 0xf0, 0xe6, 0x51, 0xb4, 0x74, 0x0e,
0x1a, 0x9f, 0x96, 0x52, 0x7e, 0x1b, 0x55, 0xfa,
0x9b, 0x58, 0x03, 0x60, 0x94, 0xee, 0x43, 0xfc,
0x3a, 0xc6, 0x61, 0xca, 0xe6, 0xe9, 0xd3, 0x2e,
0x79, 0x12, 0xef, 0x50, 0xb3, 0x0a, 0x80, 0xf3,
0xca, 0x21, 0x52, 0xe5, 0x3f, 0x3a, 0x20, 0xcf,
0x66, 0xdf, 0xa8, 0xc0, 0x42, 0xff, 0xa6, 0x63,
0x81, 0x1a, 0xc2, 0x94, 0xb0, 0xe0, 0x42, 0x8c,
0xec, 0xf9, 0xe6, 0x5f, 0x7a, 0xca, 0x86, 0x59,
0x26, 0x9f, 0xfb, 0x62, 0xd3, 0xb3, 0xec, 0x2a,
0xbc, 0x60, 0x4e, 0xea, 0x8f, 0xd8, 0xa0, 0xfd,
0x0e, 0xd5, 0x76, 0x96, 0x74, 0xd1, 0x29, 0x4a,
0xc6, 0xa1, 0x3c, 0x5e, 0x4f, 0xf1, 0x95, 0xee,
0x5b, 0xee, 0x6a, 0x1d, 0x8f, 0x54, 0x2f, 0x69,
0xf6, 0x67, 0x2d, 0x4b, 0x7a, 0xfe, 0xfe, 0x9b,
0xab, 0x28, 0x00, 0x8e, 0x23, 0x1a, 0x19, 0x76,
0x3a, 0x51, 0x57, 0x28, 0xc9, 0xa9, 0x6e, 0xe0,
0x58, 0xe5, 0x86, 0x81, 0x11, 0xa4, 0xf4, 0x04,
0x6c, 0x3a, 0x19, 0x16, 0xc2, 0x03, 0xb3, 0x3e,
0x8f, 0xb8, 0xa2, 0x26, 0x45, 0x21, 0x23, 0x6d,
0x27, 0x85, 0xc3, 0xe5, 0xbe, 0xb3, 0xa7, 0xe9,
0x69, 0xfc, 0x14, 0x27, 0xd9, 0x35, 0x48, 0x24,
0x89, 0xa4, 0x63, 0xbb, 0xed, 0x05, 0x4e, 0x00,
0x4a, 0xba, 0xbd, 0xf0, 0x39, 0x25, 0xe1, 0x78,
0xbd, 0xc0, 0x5e, 0xab, 0x24, 0xc2, 0xc9, 0xe7,
0xe8, 0xdb, 0x2c, 0xdd, 0x59, 0xbb, 0xf0, 0x68,
0xd1, 0x8c, 0x2c, 0x8c, 0x65, 0x15, 0x0f, 0x4a,
0xa7, 0x77, 0x2e, 0xb1, 0xce, 0x20, 0xed, 0x15,
0x53, 0x11, 0x04, 0xa3, 0xaf, 0xed, 0x0c, 0xd3,
0x81, 0x61, 0xc8, 0xf6, 0x41, 0x65, 0xa9, 0x74,
0x95, 0x20, 0xe1, 0x73, 0x9e, 0x51, 0x32, 0x27,
0xdd, 0x2f, 0xdc, 0x18, 0x19, 0xf5, 0xc1, 0xcd,
0x6f, 0xf8, 0x69, 0x81, 0xa1, 0x5e, 0x2a, 0x5b,
0x00, 0xdd, 0x77, 0x58, 0x57, 0x71, 0xed, 0x34,
0x0e, 0x1e, 0x35, 0x89, 0x0c, 0x7d, 0x22, 0x5a,
0x19, 0xdb, 0x38, 0x16, 0x92, 0xb7, 0x5f, 0x6a,
0xd5, 0x8f, 0x6f, 0xea, 0x06, 0x55, 0xe0, 0x7e,
0xe1, 0x7a, 0x3d, 0x7e, 0x2c, 0x1a, 0xae, 0xd2,
0xa2, 0xfe, 0xd4, 0x7f, 0xf3, 0x6b, 0xce, 0x9c,
0x5c, 0x3f, 0xb3, 0x39, 0x41, 0x27, 0x5c, 0x91,
0xa2, 0xd6, 0xa9, 0x47, 0x62, 0xce, 0x6f, 0xf6,
0x83, 0xd3, 0x7b, 0xc2, 0x1a, 0xc8, 0xad, 0x6a,
0x74, 0xf3, 0x55, 0xbf, 0x4f, 0x67, 0xab, 0x52,
0xf2, 0xac, 0x0c, 0x05, 0x57, 0x2d, 0x83, 0x09,
0x5f, 0x3c, 0x4d, 0x01, 0x6a, 0x7e, 0xe6, 0x19,
0x3a, 0x30, 0xe8, 0xb6, 0x6c, 0x00, 0xef, 0xf4,
0x06, 0x0e, 0xc0, 0x43, 0xce, 0xfa, 0xf8, 0xf2,
0xa3, 0x97, 0x75, 0x13, 0x62, 0x9c, 0x5c, 0x6d,
0x19, 0x15, 0xc0, 0x84, 0xa9, 0x78, 0xf3, 0x63,
0xd9, 0xa0, 0xc5, 0xa3, 0x7b, 0x49, 0xfc, 0x5f,
0x11, 0xa5, 0xc6, 0x5f, 0x83, 0x50, 0x3d, 0x5b,
0x65, 0xfa, 0x42, 0x9b, 0x37, 0x0e, 0xc4, 0x3c,
0xc9, 0x55, 0x6c, 0x49, 0x75, 0xec, 0xea, 0x48,
0x9e, 0x72, 0x86, 0x2c, 0x84, 0x25, 0x3a, 0xe6,
0xbb, 0xbe, 0xf6, 0x55, 0x37, 0x75, 0x99, 0x1c,
0xdd, 0x0a, 0x5b, 0x98, 0x2a, 0xba, 0xb1, 0x20,
0xab, 0x2c, 0x50, 0x46, 0x00, 0xe0, 0x39, 0xa7,
0xc4, 0xae, 0x95, 0x2e, 0x02, 0x93, 0x36, 0xdb,
0x6c, 0xfe, 0x0b, 0x96, 0x0e, 0x25, 0xe5, 0xd4,
0x5a, 0x05, 0x30, 0x72, 0x78, 0x4a, 0xb5, 0x65,
0x8c, 0x63, 0x60, 0x84, 0xf6, 0x5b, 0x24, 0xac,
0x74, 0x04, 0x6b, 0xd2, 0x57, 0x17, 0xec, 0xfc,
0xd6, 0x16, 0xc7, 0x91, 0x41, 0x70, 0xd5, 0x60,
0x6a, 0xdd, 0x83, 0xc9, 0xad, 0x71, 0x89, 0x80,
0x1e, 0x8c, 0x03, 0xb0, 0xe5, 0x3e, 0x10, 0xc1,
0x53, 0xc6, 0xf9, 0xce, 0x18, 0x50, 0xb4, 0x5c,
0xfc, 0x5b, 0xe1, 0x69, 0xb9, 0x4a, 0x37, 0x1b,
0xb1, 0x01, 0x0a, 0x76, 0xba, 0x5a, 0x81, 0x4d,
0x76, 0x50, 0x52, 0x46, 0xcb, 0xbb, 0x4d, 0x13,
0xd8, 0xf4, 0x4f, 0x64, 0x6b, 0xfc, 0x86, 0x80,
0xa9, 0xe4, 0x65, 0x00, 0xd2, 0xe9, 0x9b, 0x49,
0x5c, 0xb5, 0x32, 0x53, 0xa0, 0x71, 0xa3, 0x70,
0xe2, 0x69, 0xe8, 0x1c, 0xdc, 0xb7, 0x2f, 0x00,
0x5d, 0xfe, 0x02, 0x27, 0x74, 0x4f, 0xf4, 0x2c,
0xae, 0x35, 0x72, 0x2c, 0x3d, 0x25, 0x8d, 0x68,
0x37, 0x84, 0x07, 0xda, 0x14, 0xfc, 0xbe, 0x27,
0x82, 0xad, 0xb6, 0x13, 0x0d, 0xca, 0x0f, 0xfc,
0xdd, 0x0f, 0x4d, 0x75, 0x48, 0xad, 0xbd, 0xb6,
0xf2, 0xb4, 0x54, 0x3c, 0xa3, 0x59, 0x4d, 0x44,
0xc9, 0x7f, 0x58, 0x71, 0x93, 0x8f, 0xf3, 0xf6,
0xd4, 0x4c, 0x9f, 0xf3, 0x7a, 0x70, 0xf7, 0xfd,
0xec, 0x06, 0x7d, 0xbf, 0x39, 0x23, 0xe2, 0x63,
0x08, 0x57, 0x8f, 0x8d, 0xaf, 0x82, 0x2e, 0x93,
0xf0, 0x00, 0x1a, 0xd8, 0xdb, 0x22, 0x37, 0x3f,
0x6a, 0x8a, 0x82, 0x63, 0x4f, 0x50, 0xac, 0x5a,
0xe1, 0xb6, 0x4c, 0xde, 0x62, 0xb8, 0xb8, 0xd5,
0x76, 0x67, 0x71, 0xe2, 0xc2, 0x21, 0x4f, 0xa5,
0x67, 0xd1, 0x08, 0x8d, 0x7e, 0x2c, 0xb9, 0x97,
0x88, 0x43, 0x4f, 0xdf, 0xe4, 0xc1, 0xe3, 0x48,
0x14, 0x34, 0x3e, 0xec, 0x78, 0x8f, 0xb7, 0xc0,
0x5a, 0x21, 0x0e, 0x9e, 0x7c, 0xbc, 0x04, 0x20,
0x1e, 0x15, 0x07, 0x90, 0xfe, 0x3f, 0xee, 0xdf,
0x95, 0x3f, 0xa8, 0x4d, 0x51, 0xd6, 0x35, 0xaf,
0xcd, 0x2b, 0x75, 0x03, 0x9b, 0x53, 0x4e, 0x4d,
0xb6, 0xec, 0x38, 0x55, 0xee, 0xad, 0x6f, 0x17,
0x4d, 0x46, 0xe5, 0x3d, 0x99, 0xa7, 0xfc, 0xcd,
0x6b, 0x81, 0x61, 0x15, 0xee, 0x7c, 0x8c, 0x31,
0xff, 0x69, 0x98, 0xf9, 0x87, 0xb2, 0xad, 0x22,
0x44, 0x07, 0xa6, 0xf0, 0x52, 0x6f, 0xda, 0xdc,
0xc6, 0x42, 0xea, 0x3e, 0x23, 0xa7, 0x0e, 0x12,
0x00, 0x5f, 0x34, 0x06, 0xee, 0x60, 0x3c, 0xd9,
0xc5, 0x15, 0xa4, 0xf4, 0xff, 0xad, 0x86, 0x91,
0x13, 0xd2, 0x53, 0xdb, 0x58, 0xb6, 0x2a, 0x46,
0x0f, 0xdb, 0x7f, 0xa0, 0x1a, 0x50, 0xd0, 0x77,
0xff, 0xf7, 0x8b, 0xad, 0xd3, 0x12, 0x54, 0xa2,
0x86, 0x6a, 0xdf, 0xcd, 0x3c, 0x4c, 0x93, 0xea,
0x16, 0x1d, 0x62, 0xb1, 0xb0, 0x6a, 0x0d, 0xff,
0x51, 0xb7, 0x91, 0x45, 0x54, 0x42, 0xb0, 0x15,
0x38, 0x58, 0xd1, 0x12, 0xe1, 0x34, 0xcc, 0x2f,
0xae, 0x5f, 0x6f, 0x68, 0xce, 0x19, 0x61, 0x47,
0xc4, 0x28, 0xf1, 0x52, 0x5d, 0xa3, 0x95, 0xf0,
0xab, 0x3a, 0x03, 0x37, 0x56, 0x72, 0x6a, 0xec,
0x34, 0x1d, 0x4d, 0xf8, 0x00, 0x71, 0xbe, 0x77,
0x96, 0x0f, 0x76, 0xea, 0xd1, 0x46, 0x25, 0xc4,
0x9b, 0xa3, 0xae, 0x5b, 0x43, 0x90, 0xd6, 0x26,
0xc5, 0x79, 0xfa, 0x41, 0xc3, 0x6c, 0x19, 0x1b,
0x44, 0xa5, 0xfd, 0xb6, 0x96, 0x76, 0x12, 0xa8,
0x58, 0xcc, 0x3c, 0x2d, 0xe9, 0x17, 0xe9, 0x46,
0x4a, 0x2a, 0xc2, 0xb1, 0x95, 0x6e, 0xcb, 0x17,
0x05, 0xd9, 0xf7, 0xf6, 0x62, 0xc5, 0xec, 0x30,
0x5a, 0xb9, 0x05, 0xa0, 0x1b, 0xc4, 0x77, 0xf9,
0x75, 0x73, 0x22, 0xe8, 0x00, 0xa2, 0x5c, 0xa8,
0x65, 0x6d, 0x82, 0xac, 0xc8, 0x8c, 0x0d, 0x8c,
0x0f, 0x05, 0xf0, 0x81, 0xd6, 0xfd, 0x3c, 0x5f,
0x63, 0x8d, 0xe7, 0xee, 0x9f, 0xcf, 0x0e, 0xe1,
0x53, 0x0e, 0x3c, 0x12, 0x0c, 0x4a, 0x34, 0x66,
0x69, 0xfa, 0x4c, 0x5e, 0x36, 0xa1, 0xf3, 0x91,
0x01, 0x1d, 0x12, 0xf7, 0x33, 0x6c, 0x72, 0x93,
0x45, 0x26, 0x15, 0x33, 0xce, 0x88, 0x05, 0x3a,
0x73, 0x98, 0xbc, 0x3d, 0x91, 0x28, 0x4d, 0x05,
0x1a, 0xf6, 0x14, 0xf1, 0x96, 0xc0, 0x38, 0xe8,
0x30, 0xb3, 0x67, 0x93, 0xc1, 0x71, 0x85, 0xba,
0x51, 0x19, 0xc8, 0xa7, 0x28, 0x77, 0x32, 0x07,
0x2d, 0xd4, 0x8b, 0x5d, 0x76, 0xce, 0x74, 0x5e,
0x57, 0xbc, 0x4f, 0x29, 0x1f, 0xc7, 0xbf, 0x78,
0xaa, 0xdf, 0x08, 0xa3, 0xc9, 0x99, 0x9c, 0xe0,
0x39, 0xf5, 0xf7, 0xb5, 0xb7, 0x6e, 0x1c, 0x28,
0xb9, 0xc3, 0xb6, 0xfc, 0x06, 0xfc, 0xf8, 0x82,
0xbb, 0xf9, 0x35, 0x13, 0xac, 0x0d, 0x6c, 0x1f,
0xb7, 0xe1, 0xa3, 0x01, 0x7f, 0xa2, 0x44, 0x1e,
0xf6, 0x2c, 0x96, 0x02, 0x91, 0xdc, 0xf8, 0x39,
0x78, 0xdc, 0xf0, 0xa7, 0xc8, 0x57, 0x2d, 0x8b,
0x42, 0xe2, 0x9a, 0x22, 0xc3, 0x0a, 0x40, 0xd9,
0xca, 0x3f, 0x22, 0x2d, 0x04, 0x16, 0xb0, 0xbc,
0x3b, 0x49, 0x9e, 0xac, 0x55, 0x75, 0x07, 0x07,
0x8c, 0x15, 0xfc, 0x87, 0x72, 0x39, 0x36, 0xc7,
0x17, 0xc1, 0x56, 0x4d, 0x64, 0xc9, 0x9a, 0x9e,
0x4d, 0xb7, 0x6d, 0x27, 0xae, 0x22, 0xd0, 0x61,
0x0e, 0x43, 0x5b, 0x78, 0x7d, 0x1d, 0xe7, 0xd0,
0xf7, 0xc2, 0x38, 0x44, 0x1d, 0x7e, 0xfd, 0x1a,
0xaa, 0x2e, 0x13, 0x1f, 0xd1, 0x22, 0xfb, 0xf0,
0x18, 0x5b, 0xf8, 0x99, 0x71, 0x87, 0xf8, 0xd9,
0x4e, 0x8b, 0x42, 0x0a, 0xea, 0x01, 0x7d, 0x77,
0x01, 0x8e, 0x05, 0xd2, 0x97, 0x3e, 0x76, 0x4c,
0xe7, 0x62, 0xe1, 0x6c, 0x15, 0xd5, 0x90, 0x35,
0x23, 0x6f, 0x9e, 0x3b, 0x98, 0xb2, 0xc6, 0x30,
0xac, 0xa4, 0x17, 0x00, 0x38, 0x87, 0x3c, 0xca,
0xc3, 0x0f, 0xae, 0xed, 0x06, 0x26, 0x7e, 0x53,
0xa1, 0x45, 0xe3, 0xc0, 0xf2, 0xb3, 0x78, 0x04,
0x8d, 0x56, 0x31, 0x07, 0x9f, 0xae, 0x4f, 0x93,
0x96, 0x0d, 0xfc, 0xd6, 0x3d, 0x1b, 0x05, 0x82,
0xe2, 0x7a, 0x40, 0x05, 0x16, 0x80, 0x47, 0x38,
0x02, 0xb7, 0x1f, 0x77, 0xf8, 0x2c, 0xfd, 0x69,
0x6b, 0x24, 0xd0, 0x75, 0x1a, 0xc0, 0xb7, 0xc9,
0x15, 0x3b, 0xdb, 0xd9, 0xab, 0x1a, 0xfc, 0xf0,
0x6f, 0xa2, 0xe4, 0xd3, 0xd5, 0x7e, 0x71, 0x38,
0xd9, 0x29, 0x0a, 0x65, 0x79, 0xf0, 0xa1, 0x00,
0xce, 0x9a, 0x41, 0x61, 0xb4, 0xbe, 0x09, 0x7a,
0xc1, 0x8c, 0x40, 0x95, 0x1f, 0x91, 0xcf, 0xa4,
0x93, 0xb2, 0x1d, 0x71, 0xeb, 0x59, 0x62, 0xd9,
0x91, 0x2d, 0x02, 0x12, 0x58, 0x2d, 0x0d, 0x8c,
0x7a, 0x20, 0x61, 0x01, 0x79, 0x50, 0x04, 0xdb,
0x34, 0xa0, 0xd7, 0x1a, 0x97, 0xbc, 0xc3, 0x25,
0xcd, 0x52, 0xf8, 0xd6, 0x87, 0x10, 0x4f, 0xaa,
0x99, 0x54, 0x8d, 0xb2, 0x2c, 0xc0, 0x1e, 0x11,
0x2c, 0x4e, 0xac, 0x24, 0xc2, 0x38, 0x4f, 0x6c,
0x48, 0x78, 0x8a, 0x00, 0xe6, 0x07, 0xd5, 0x59,
0xea, 0xf4, 0x0d, 0xb7, 0x47, 0xff, 0x80, 0x37,
0x40, 0x28, 0x74, 0x3e, 0x90, 0x67, 0xa1, 0xe1,
0x18, 0xf2, 0xaf, 0xbf, 0xd5, 0x74, 0x2a, 0xd8,
0x30, 0xe7, 0xc6, 0xb6, 0x67, 0x47, 0x91, 0xcb,
0xf8, 0xb5, 0xc1, 0xed, 0x70, 0x73, 0x59, 0xd8,
0x03, 0xcf, 0x33, 0x96, 0x58, 0xda, 0xbd, 0xe6,
0xfa, 0xc6, 0x29, 0x81, 0x1d, 0xae, 0x44, 0xdd,
0x05, 0xf9, 0x5d, 0xa6, 0xde, 0xd9, 0x94, 0xe9,
0xdf, 0x5e, 0x88, 0x7f, 0xc8, 0x61, 0x82, 0xff,
0x72, 0xf5, 0xa2, 0x5c, 0x35, 0x78, 0x0d, 0xb4,
0x9d, 0xac, 0x23, 0xbf, 0x99, 0x5f, 0x0d, 0xde,
0x3c, 0x6e, 0x2b, 0x18, 0x9e, 0x80, 0x71, 0xfe,
0x28, 0xe7, 0x40, 0x94, 0x2c, 0x23, 0x29, 0x80,
0xb1, 0x8c, 0x9e, 0xc2, 0xc0, 0xc6, 0xcd, 0x6e,
0x45, 0xea, 0x52, 0x24, 0xaa, 0xf6, 0x8e, 0x4f,
0x9b, 0xea, 0xec, 0xc3, 0x0a, 0x8c, 0xdd, 0x89,
0xe9, 0x4e, 0x86, 0xf9, 0x86, 0x42, 0xd6, 0xba,
0x21, 0x0c, 0x38, 0xe7, 0x0a, 0xe5, 0x01, 0x1a,
0x3c, 0xc1, 0x1b, 0xe8, 0x9e, 0xd9, 0x9d, 0xac,
0x49, 0x0f, 0x2b, 0x75, 0xff, 0x88, 0xb5, 0x20,
0x91, 0x75, 0xda, 0x3c, 0xc2, 0xb0, 0xa4, 0x21,
0x25, 0x8f, 0xd7, 0x05, 0xb7, 0xb3, 0x9d, 0xb4,
0x6f, 0x23, 0x9b, 0xcd, 0x28, 0x56, 0x68, 0xf0,
0xf9, 0x50, 0xbb, 0x6e, 0x09, 0x00, 0x49, 0xc9,
0xc9, 0x05, 0x6b, 0x20, 0x2f, 0x07, 0x00, 0x73,
0x29, 0x2f, 0x1b, 0xdc, 0xcb, 0x9f, 0x09, 0x7f,
0xae, 0xbb, 0xf3, 0xfd, 0xd3, 0x8c, 0xd9, 0x5e,
0x2e, 0x72, 0xf5, 0x8b, 0xc4, 0x23, 0x6e, 0xef,
0xdb, 0x26, 0x08, 0x4d, 0xc6, 0x98, 0xc1, 0x4f,
0x8f, 0x8e, 0xf6, 0x35, 0x5d, 0x71, 0x10, 0xf1,
0xb2, 0xbe, 0x14, 0x50, 0x22, 0x66, 0xef, 0x98,
0xcb, 0x8b, 0x4a, 0xdf, 0xa8, 0x6f, 0x09, 0x4a,
0x2f, 0x70, 0x3f, 0xb2, 0x90, 0xfc, 0x81, 0xe1,
0xcf, 0xcf, 0x66, 0xf1, 0x44, 0xe4, 0x93, 0xc6,
0x77, 0x97, 0x8f, 0xee, 0x30, 0xe9, 0x29, 0x56,
0x51, 0x34, 0xef, 0xad, 0x5b, 0xd9, 0xd7, 0x26,
0x74, 0x9b, 0xb2, 0x64, 0x7e, 0xbf, 0x9c, 0xcd,
0xc1, 0xad, 0xc2, 0x09, 0x25, 0x82, 0x30, 0x6a,
0x59, 0xc8, 0xd5, 0x11, 0x4b, 0xea, 0xc2, 0x6a,
0x94, 0x2c, 0x14, 0x6c, 0x53, 0x26, 0xb4, 0xb8,
0x31, 0x4d, 0x94, 0x93, 0x80, 0x66, 0xce, 0x92,
0x0f, 0x9a, 0xb6, 0x4c, 0xfd, 0x4e, 0x9b, 0x42,
0xe1, 0x00, 0x56, 0xbb, 0x8c, 0x89, 0x19, 0x53,
0xe3, 0xdc, 0x60, 0x9c, 0x19, 0xd4, 0x72, 0x99,
0x3b, 0xcf, 0x11, 0x15, 0x4c, 0x00, 0x5c, 0x03,
0x38, 0xee, 0x61, 0xa6, 0x9d, 0xfa, 0xc4, 0x96,
0x41, 0xaa, 0x00, 0x40, 0x08, 0xf7, 0x9d, 0x2a,
0x8f, 0x51, 0xe1, 0x26, 0xd3, 0x71, 0x99, 0x6c,
0x8c, 0x77, 0x70, 0xfb, 0xe5, 0xbe, 0x23, 0x59,
0x8c, 0x68, 0x56, 0x98, 0x6f, 0x29, 0x94, 0xcd,
0x4d, 0x77, 0xce, 0xb8, 0xb2, 0x8e, 0x97, 0x3f,
0xb4, 0x3a, 0xb8, 0x7d, 0x6a, 0xd7, 0x04, 0xdf,
0xa5, 0x1e, 0x62, 0xf9, 0x5c, 0x1e, 0x1c, 0x85,
0xa0, 0x23, 0x0e, 0xe8, 0x9e, 0x80, 0xe5, 0x1f,
0x15, 0xb0, 0xa5, 0x36, 0x39, 0xa3, 0xce, 0x7a,
0x2d, 0x27, 0x51, 0x93, 0x34, 0xc5, 0x99, 0x30,
0x42, 0x69, 0x47, 0x4d, 0x04, 0xd2, 0x9b, 0x78,
0xaa, 0x0a, 0xc6, 0x1f, 0x36, 0x0e, 0x5a, 0xea,
0x0a, 0x94, 0xd7, 0xf4, 0x06, 0x34, 0x5b, 0x81,
0x08, 0xdb, 0x2c, 0x26, 0xcf, 0x9e, 0x4f, 0x1b,
0x3a, 0x87, 0x9f, 0x9f, 0x92, 0xf8, 0x99, 0xdb,
0xea, 0x49, 0x21, 0xe2, 0x36, 0xea, 0xd1, 0x4a,
0x78, 0x23, 0xba, 0x83, 0x53, 0x97, 0x0d, 0xe2,
0x17, 0x7a, 0x2f, 0xf5, 0x7a, 0xc6, 0x88, 0x42,
0x4a, 0x1b, 0x66, 0xd3, 0x53, 0x1a, 0x2e, 0xb2,
0x75, 0x7e, 0x80, 0xa2, 0x06, 0x83, 0xa5, 0x28,
0x79, 0x26, 0x23, 0x78, 0x85, 0xa6, 0x77, 0x95,
0x18, 0x1c, 0x58, 0xf9, 0xee, 0xbe, 0x68, 0x75,
0x5e, 0xdb, 0xaf, 0x53, 0x30, 0x9f, 0x06, 0xbd,
0xbc, 0x40, 0xde, 0x5a, 0xe0, 0x69, 0x43, 0xc1,
0x2b, 0xfa, 0xd0, 0x26, 0xb4, 0xe7, 0x79, 0x2a,
0xac, 0xbc, 0x6c, 0x70, 0xce, 0xf5, 0x8d, 0xd8,
0xbf, 0x54, 0xd2, 0x25, 0xb8, 0x08, 0xd0, 0xbe,
0xd9, 0x11, 0xcb, 0x82, 0x3c, 0x1b, 0x61, 0xe9,
0x86, 0xaf, 0xb2, 0x54, 0x3f, 0xa0, 0x4e, 0xf6,
0x5f, 0x1c, 0x48, 0x5e, 0xd0, 0xaa, 0x8e, 0x01,
0x72, 0x5c, 0x3f, 0xf4, 0x68, 0x52, 0x8e, 0x8a,
0x71, 0xf1, 0x9b, 0x8a, 0x7f, 0x7d, 0x2f, 0x0c,
0xef, 0x9e, 0xb1, 0xe8, 0x9f, 0x42, 0x04, 0xd4,
0x5e, 0x65, 0x2d, 0xfe, 0x89, 0x80, 0xab, 0x40,
0xd1, 0xbf, 0x93, 0xbe, 0x6c, 0x64, 0xfd, 0x96,
0x92, 0x70, 0x2f, 0x5d, 0x76, 0x43, 0xf5, 0x58,
0xf7, 0xbd, 0x58, 0x97, 0x21, 0x7e, 0x84, 0xa1,
0x0f, 0xf0, 0x71, 0x9c, 0x6e, 0x2d, 0x8f, 0xfe,
0x14, 0xc4, 0x7f, 0xce, 0xbe, 0x07, 0x5d, 0xc6,
0x73, 0x52, 0x8e, 0x28, 0x60, 0x26, 0x21, 0xd4,
0x9c, 0x7a, 0xda, 0xc6, 0x7e, 0x0a, 0x1f, 0x16,
0xe9, 0xd9, 0xe7, 0xd0, 0xd7, 0x25, 0xd6, 0x2a,
0xc8, 0x3d, 0x3c, 0x60, 0xf1, 0x3d, 0x02, 0xc3,
0xb3, 0x9f, 0x44, 0x4b, 0x34, 0x7d, 0xe5, 0xa7,
0x0d, 0xd6, 0x8f, 0x74, 0x78, 0xd2, 0x55, 0x02,
0xd8, 0xfb, 0x5f, 0x02, 0xc4, 0x73, 0x27, 0x95,
0xe4, 0x8d, 0x6b, 0x50, 0x9e, 0x57, 0xf2, 0xb0,
0x8d, 0x1a, 0xbe, 0x08, 0x89, 0x1c, 0x6d, 0xe0,
0xfd, 0x32, 0x52, 0x78, 0x0f, 0xa7, 0x2b, 0x56,
0xa2, 0x48, 0xe5, 0x61, 0x4f, 0x8e, 0x59, 0x26,
0x3b, 0x59, 0x87, 0xa5, 0x48, 0x7c, 0x2f, 0x03,
0xa7, 0x12, 0xac, 0x1f, 0x8e, 0xf8, 0xfa, 0xf3,
0xd7, 0x86, 0x95, 0xcf, 0x8d, 0xfa, 0x4f, 0x77,
0xfb, 0x81, 0x2f, 0x69, 0xe7, 0x03, 0x74, 0x30,
0x99, 0xdb, 0x73, 0x4f, 0x8d, 0x5e, 0x82, 0xab,
0xe2, 0x6f, 0x7e, 0xba, 0x73, 0x43, 0x13, 0x2b,
0x7f, 0x87, 0x30, 0x2a, 0xa2, 0x3b, 0x96, 0x25,
0x9b, 0x1c, 0x87, 0xb2, 0x09, 0xa6, 0xee, 0xa3,
0xbb, 0x4a, 0xbf, 0x74, 0x9c, 0x61, 0x77, 0x1c,
0x10, 0x78, 0xd8, 0xe2, 0xdd, 0xa4, 0xeb, 0xe4,
0x67, 0x50, 0xa8, 0x45, 0xaf, 0x55, 0xd2, 0xa9,
0x3e, 0x65, 0xba, 0x7b, 0xf1, 0xa4, 0x14, 0xe8,
0xce, 0xa1, 0xaf, 0x99, 0xb7, 0x03, 0x6f, 0x52,
0x24, 0xb2, 0x24, 0xf7, 0x70, 0x28, 0x59, 0x12,
0xe5, 0x48, 0x4f, 0xd5, 0xfd, 0xa9, 0x33, 0x05,
0x0d, 0xdc, 0x59, 0x67, 0x9b, 0x74, 0x41, 0x54,
0x9d, 0x4e, 0x82, 0x33, 0x4c, 0xe2, 0x4e, 0x93,
0x97, 0x1e, 0xe1, 0x63, 0xc0, 0xd2, 0x6c, 0xda,
0x1f, 0x48, 0x3f, 0x44, 0x4a, 0xbd, 0x0c, 0x3c,
0x7f, 0x77, 0x66, 0x66, 0x89, 0xa7, 0x80, 0x0c,
0xdf, 0x5c, 0xe7, 0x5c, 0x52, 0xc5, 0x55, 0x9e,
0x0a, 0xf5, 0x8a, 0x65, 0x77, 0xfd, 0xe2, 0x15,
0x57, 0x64, 0x50, 0x5c, 0x14, 0xa2, 0xce, 0x05,
0x03, 0x68, 0xc0, 0x9b, 0x82, 0xeb, 0xfa, 0x4e,
0xd3, 0x95, 0xd3, 0x2d, 0xed, 0xe8, 0x99, 0xef,
0xc3, 0xf1, 0xf0, 0xe7, 0x7b, 0xb0, 0x90, 0x85,
0x7f, 0x6d, 0xd9, 0xa7, 0xc8, 0xba, 0x6f, 0xff,
0xdb, 0x96, 0x7b, 0x43, 0x8c, 0xb9, 0x35, 0xd1,
0x0d, 0xc1, 0x9e, 0xd2, 0x54, 0x47, 0x9f, 0x58,
0xd7, 0x48, 0x8c, 0xfb, 0xcd, 0xb2, 0x82, 0xcf,
0x92, 0x93, 0x1c, 0x90, 0x4b, 0x72, 0xe9, 0x6c,
0x22, 0xe9, 0xc8, 0xfb, 0xf8, 0x82, 0x01, 0x14,
0x1b, 0x4e, 0x91, 0x69, 0x47, 0x12, 0x7c, 0x8f,
0x70, 0x12, 0xa9, 0x5c, 0x7a, 0xb8, 0x23, 0xba,
0x8c, 0xa7, 0xdf, 0xa3, 0x6d, 0xd0, 0x2e, 0x58,
0xac, 0xc9, 0x73, 0x87, 0x28, 0xc4, 0x19, 0x42,
0x4c, 0x32, 0xfe, 0x29, 0x01, 0x2f, 0xfd, 0x7c,
0x2a, 0x4a, 0xb3, 0xa8, 0x5d, 0xe8, 0x62, 0x1b,
0xef, 0x53, 0x25, 0x6e, 0xa0, 0x45, 0xa5, 0x32,
0xdf, 0xac, 0xef, 0x4a, 0x29, 0x5c, 0xf8, 0xef,
0xe8, 0x71, 0x6a, 0x84, 0xa7, 0xc4, 0x5a, 0xef,
0x9a, 0x63, 0x36, 0x07, 0x8d, 0x73, 0x9a, 0xb3,
0x5a, 0xb6, 0x48, 0xca, 0x36, 0xb0, 0xb2, 0xed,
0x95, 0x92, 0x41, 0xea, 0x3b, 0xf4, 0x23, 0xc2,
0x9e, 0xfb, 0xfe, 0x90, 0xd0, 0x1f, 0x45, 0x58,
0x6b, 0x90, 0x1e, 0xab, 0x35, 0xb3, 0xea, 0x07,
0x81, 0xd8, 0xda, 0x4c, 0xf6, 0x90, 0x29, 0xf2,
0xf6, 0x02, 0xc1, 0x28, 0xb8, 0x88, 0x61, 0x28,
0x1c, 0xd2, 0x27, 0xde, 0x77, 0x0a, 0x67, 0xf4,
0x4a, 0xd0, 0x0d, 0xd5, 0xf7, 0x4f, 0x2d, 0x77,
0x47, 0xc1, 0xc9, 0xc1, 0x3d, 0x13, 0x54, 0xbc,
0xc0, 0x42, 0x6f, 0xd0, 0xb7, 0x66, 0xc8, 0x2e,
0x1f, 0x71, 0x47, 0xfa, 0x15, 0x2e, 0x1f, 0x28,
0xb7, 0x20, 0x40, 0x85, 0x46, 0x83, 0xf0, 0x36,
0xef, 0xac, 0x33, 0x23, 0xfe, 0xcb, 0xe7, 0xca,
0x56, 0x52, 0xcb, 0xdf, 0x8a, 0x5b, 0x77, 0x8c,
0x14, 0x4e, 0xee, 0xda, 0xa8, 0xde, 0x92, 0x50,
0xe3, 0x9a, 0x07, 0x86, 0xb2, 0xf3, 0xd0, 0xaa,
0x48, 0xda, 0x07, 0x53, 0xc0, 0xa9, 0x30, 0xa7,
0x9a, 0x97, 0xe6, 0x31, 0xc5, 0xc3, 0xd3, 0xd6,
0xa9, 0x6e, 0x5d, 0x30, 0x5e, 0x59, 0x40, 0xcc,
0xbc, 0xcb, 0x06, 0xfd, 0xdf, 0x4e, 0xb7, 0x44,
0x86, 0xf1, 0x8d, 0xcf, 0x62, 0x2e, 0x8a, 0x6b,
0x0d, 0x4a, 0xd0, 0x03, 0x26, 0x5d, 0x4c, 0xf7,
0x90, 0x19, 0xf1, 0x0d, 0x98, 0x2e, 0xf4, 0x46,
0x7a, 0x51, 0x75, 0x94, 0x07, 0xf2, 0x98, 0xcc,
0x98, 0x07, 0xe3, 0xc4, 0xdd, 0xaa, 0x24, 0x4a,
0x54, 0x9a, 0x3d, 0x4e, 0xe9, 0x8d, 0x3a, 0xb2,
0x16, 0xe4, 0x9c, 0xd4, 0x7d, 0xe5, 0x85, 0xd9,
0x65, 0xac, 0xbb, 0x81, 0xb9, 0xdb, 0x78, 0x9c,
0x5e, 0x4c, 0x12, 0x73, 0x3e, 0xa5, 0x54, 0x92,
0x60, 0x03, 0x79, 0xc3, 0x33, 0x90, 0xd0, 0xf0,
0x64, 0x3b, 0xcf, 0xc9, 0x58, 0xc6, 0x67, 0x21,
0xdd, 0xa8, 0x54, 0x0a, 0xaf, 0xe7, 0x81, 0x29,
0x02, 0x22, 0x2f, 0xdc, 0xde, 0x8d, 0x85, 0x28,
0x55, 0x4a, 0x28, 0xa5, 0x89, 0x1c, 0x63, 0xe2,
0x7c, 0x51, 0x40, 0x51, 0x7c, 0x89, 0xc9, 0x54,
0x69, 0xe2, 0x76, 0x58, 0x37, 0xd0, 0x09, 0x97,
0xc0, 0x3e, 0x2e, 0x00, 0x7b, 0x4b, 0x83, 0x91,
0x32, 0x4f, 0x49, 0x18, 0x3e, 0x77, 0x76, 0x1c,
0x8f, 0x2b, 0xff, 0x60, 0xb4, 0x8e, 0xf7, 0x32,
0xc1, 0xe2, 0x4e, 0x91, 0x41, 0xe3, 0x5f, 0x12,
0x4d, 0xdc, 0xf0, 0xac, 0xe4, 0x26, 0x8b, 0x91,
0x76, 0xa9, 0x52, 0x42, 0x01, 0x90, 0x5a, 0x84,
0xbe, 0xd0, 0x26, 0x88, 0x50, 0x12, 0xf7, 0x1a,
0xb6, 0x1d, 0xb2, 0x7b, 0x88, 0xaa, 0x94, 0xb3,
0x77, 0xd8, 0xa0, 0xb5, 0xb9, 0xd4, 0x9a, 0x52,
0x0b, 0xd5, 0xb5, 0x66, 0x8f, 0xf0, 0x40, 0xd6,
0x26, 0xe8, 0x1a, 0x21, 0x8a, 0x92, 0xfc, 0x07,
0x7c, 0x41, 0x3a, 0x50, 0xb3, 0xdb, 0xb9, 0x35,
0xb3, 0xb7, 0x47, 0x01, 0x68, 0x3b, 0x5c, 0x52,
0xb0, 0xcd, 0x79, 0x27, 0x39, 0x0c, 0x5e, 0xa2,
0x7a, 0xca, 0xc9, 0x14, 0xb9, 0x9d, 0x1c, 0xd6,
0x41, 0x30, 0x59, 0xd6, 0xc5, 0x36, 0x23, 0xa1,
0xf0, 0x98, 0x32, 0x66, 0x10, 0xc0, 0xfd, 0x12,
0xcb, 0xf2, 0xe8, 0x2c, 0x43, 0x08, 0xb0, 0xed,
0x60, 0x6f, 0x5f, 0x30, 0x52, 0xa9, 0x43, 0x04,
0xab, 0x4d, 0xb8, 0xf5, 0x5c, 0x53, 0xfe, 0x5f,
0x82, 0xb8, 0x4a, 0xab, 0xdb, 0x06, 0x61, 0x69,
0xf1, 0xe9, 0x41, 0xfc, 0x0e, 0xe8, 0xe6, 0x43,
0x56, 0x9b, 0x22, 0x33, 0xc3, 0xf4, 0x33, 0x49,
0x86, 0x4a, 0x4d, 0x43, 0xe7, 0xc1, 0x49, 0x30,
0xaf, 0x9e, 0x20, 0x8a, 0x8c, 0x89, 0x07, 0xe2,
0x2b, 0x5e, 0x8f, 0x7e, 0xaa, 0x30, 0x22, 0x3e,
0xa3, 0x7b, 0xc9, 0x49, 0x51, 0xd6, 0xe8, 0x72,
0x90, 0x5a, 0xe3, 0x73, 0x71, 0x03, 0x6b, 0x9c,
0xa0, 0x66, 0xc9, 0xad, 0x83, 0x28, 0x2b, 0xa2,
0xff, 0x4e, 0x02, 0x65, 0x29, 0x3f, 0x50, 0x5c,
0xbf, 0x2c, 0x18, 0x88, 0x32, 0x8f, 0x9c, 0xd7,
0x7f, 0x7a, 0x50, 0x48, 0xe2, 0x10, 0x1d, 0x10,
0x97, 0xde, 0x2e, 0xe5, 0xa2, 0xae, 0x95, 0xee,
0x9b, 0x0d, 0xb9, 0xe6, 0xf9, 0xed, 0xa0, 0x7b,
0xb4, 0x24, 0xd1, 0x3c, 0x02, 0x71, 0x81, 0xa1,
0xfb, 0xd7, 0xa3, 0x17, 0xe9, 0x2e, 0x86, 0xe1,
0xd0, 0x13, 0x36, 0x6a, 0xe6, 0x71, 0xe4, 0x52,
0x2b, 0x11, 0xb1, 0x9f, 0x2a, 0x42, 0xa4, 0xf1,
0x16, 0x8b, 0x26, 0x50, 0xe0, 0xa4, 0x53, 0x9e,
0x56, 0x6e, 0xd4, 0xbb, 0xd2, 0x31, 0x81, 0x18,
0x28, 0x2f, 0x32, 0x6b, 0x26, 0xa5, 0x34, 0x10,
0xae, 0x2d, 0x94, 0xd7, 0x76, 0x34, 0xbf, 0x16,
0x33, 0x26, 0x99, 0xc2, 0x3a, 0xca, 0x0a, 0x45,
0x63, 0xbb, 0x00, 0xb6, 0xec, 0xd2, 0xca, 0xc9,
0x5c, 0x4b, 0xb2, 0x64, 0x5f, 0x71, 0x9b, 0xd9,
0x67, 0xe9, 0xa2, 0xea, 0xab, 0x55, 0x17, 0x9a,
0xd0, 0xb2, 0x32, 0xc1, 0x3b, 0xf8, 0xd5, 0xe3,
0x84, 0x42, 0x67, 0x41, 0xbd, 0xb4, 0x29, 0x6c,
0x17, 0x73, 0x58, 0x7a, 0x96, 0xe0, 0x7a, 0x92,
0x63, 0x65, 0xc1, 0xd5, 0x75, 0x07, 0x4a, 0x16,
0x26, 0xc4, 0x58, 0x21, 0x01, 0x22, 0x9a, 0xb8,
0xe2, 0x60, 0x10, 0x0c, 0x07, 0x2e, 0xe9, 0xd0,
0x91, 0x55, 0xb9, 0x29, 0x19, 0x44, 0x91, 0xba,
0x00, 0xd5, 0x2b, 0x68, 0x56, 0xae, 0x18, 0xf1,
0x75, 0xa8, 0x56, 0xcc, 0x2f, 0xd4, 0xe5, 0x50,
0x7d, 0x26, 0x81, 0xb8, 0xb5, 0x6e, 0x32, 0xd9,
0x41, 0xe5, 0x22, 0x13, 0xd0, 0xf9, 0x96, 0xed,
0xec, 0xbe, 0x3d, 0x63, 0xb3, 0x9c, 0x6a, 0x37,
0x2d, 0x4a, 0x91, 0x4b, 0x81, 0xf8, 0x19, 0x2c,
0x96, 0x35, 0x2e, 0x5c, 0xf4, 0xf3, 0xfb, 0x4c,
0x34, 0x63, 0xdd, 0xe6, 0xb0, 0xc7, 0x56, 0xbb,
0xde, 0x08, 0x3e, 0xb1, 0x2c, 0x80, 0x5e, 0x92,
0xd4, 0x4a, 0x20, 0xb3, 0x63, 0xd7, 0x75, 0x69,
0x99, 0xe3, 0x01, 0x6d, 0x8b, 0xfa, 0x58, 0x64,
0xec, 0xd3, 0x17, 0x53, 0x77, 0xb9, 0x5e, 0xcd,
0xdb, 0x08, 0x27, 0x41, 0x56, 0xb1, 0x7f, 0x87,
0xaf, 0xa6, 0x41, 0x46, 0x62, 0x79, 0x68, 0x52,
0xd6, 0xc2, 0x87, 0x5f, 0xc3, 0x47, 0xe9, 0x8d,
0xde, 0x8b, 0x3d, 0xcc, 0xfe, 0x44, 0x5f, 0xb0,
0xa0, 0xc4, 0xc4, 0xa0, 0xd4, 0x96, 0xaf, 0xf3,
0xca, 0xcd, 0x29, 0xf6, 0x8c, 0x15, 0x50, 0xd7,
0x11, 0x05, 0x23, 0x12, 0xf8, 0x26, 0x6d, 0x1d,
0x84, 0x2a, 0x1b, 0x49, 0xf4, 0x19, 0x76, 0x37,
0x96, 0xdb, 0xa8, 0x81, 0xd3, 0x11, 0x33, 0x7a,
0x68, 0xf4, 0x4f, 0x87, 0xac, 0x9a, 0x79, 0x02,
0x20, 0xf1, 0xf8, 0x8b, 0xce, 0x33, 0x21, 0x5e,
0xc4, 0x4a, 0x04, 0xea, 0x41, 0xbc, 0xbf, 0x67,
0x49, 0x47, 0xaa, 0x3b, 0x2c, 0x81, 0xf8, 0x06,
0x4c, 0xcc, 0xed, 0x23, 0x30, 0xde, 0x19, 0x7f,
0x34, 0xf2, 0x1c, 0x65, 0xd5, 0x2e, 0x3c, 0x75,
0x7b, 0xc0, 0xad, 0x50, 0x81, 0x8a, 0x49, 0xe0,
0xf6, 0xd7, 0xde, 0x4b, 0xe5, 0xd2, 0x89, 0x38,
0xc9, 0xb4, 0x3c, 0x51, 0x3f, 0x7f, 0x7b, 0x47,
0x08, 0x36, 0x07, 0xcf, 0x47, 0xf7, 0xf0, 0x3e,
0x30, 0x64, 0x2e, 0x35, 0x8b, 0x0b, 0xc9, 0x7a,
0xd4, 0xdb, 0x37, 0xc1, 0x1b, 0x33, 0xbd, 0x7a,
0x7a, 0x0e, 0x3f, 0xa9, 0x0b, 0x3e, 0x27, 0x03,
0xcd, 0x64, 0xb3, 0x6e, 0x42, 0x41, 0xd3, 0x49,
0xa7, 0x62, 0xde, 0x2b, 0x26, 0x00, 0xbb, 0x0e,
0xbd, 0x88, 0x3b, 0x8d, 0xce, 0x2b, 0x39, 0x62,
0x29, 0xce, 0xe0, 0x3f, 0xed, 0x2d, 0xd9, 0x10,
0xf0, 0x47, 0x1b, 0xcc, 0xda, 0x5a, 0xe9, 0x49,
0x38, 0x8c, 0xcb, 0xc5, 0xff, 0x9c, 0x31, 0x25,
0x16, 0x89, 0x0f, 0x9e, 0xad, 0x80, 0x37, 0xb9,
0xd1, 0x36, 0x20, 0xa2, 0x3c, 0x0a, 0xec, 0x4a,
0x39, 0x4d, 0x8d, 0xe7, 0xf5, 0x8c, 0xe6, 0xa7,
0x41, 0x78, 0x80, 0xf0, 0xaf, 0xac, 0xfd, 0x07,
0x70, 0x40, 0xfa, 0xf5, 0xa5, 0xf6, 0x1d, 0xe1,
0xd7, 0x8c, 0x2b, 0xb3, 0x67, 0xb6, 0xc4, 0x28,
0x81, 0xf8, 0x37, 0x7e, 0x88, 0xd6, 0xbd, 0x10,
0xbb, 0x15, 0x91, 0x06, 0x50, 0xaf, 0x15, 0xc1,
0x6d, 0xe9, 0x03, 0xb5, 0x95, 0x91, 0xed, 0x39,
0x5a, 0x91, 0xe5, 0x6b, 0x18, 0x81, 0x69, 0x12,
0x8a, 0xcc, 0xf5, 0xbe, 0x73, 0x17, 0xec, 0x88,
0x95, 0x45, 0x3e, 0x34, 0xd2, 0x03, 0x61, 0xba,
0x38, 0x77, 0xde, 0x21, 0x5e, 0x11, 0x46, 0x33,
0x03, 0x5b, 0x5e, 0xf5, 0x13, 0x8f, 0x14, 0x95,
0xd8, 0x71, 0x00, 0xc7, 0xdc, 0xc2, 0xe7, 0x3c,
0xf6, 0xfa, 0x55, 0xbe, 0xaf, 0xac, 0x89, 0x9e,
0x71, 0x3c, 0x72, 0xc4, 0x94, 0x83, 0x30, 0x08,
0x31, 0xc3, 0x81, 0x48, 0x25, 0xd5, 0x98, 0x00,
0xf3, 0x77, 0xbc, 0x34, 0x87, 0x61, 0xd7, 0x2c,
0xf3, 0x6a, 0x69, 0x3f, 0xa2, 0x8a, 0xc5, 0x0c,
0x56, 0xfc, 0xc6, 0xd4, 0xae, 0xf6, 0xbe, 0xbd,
0xf9, 0x76, 0x53, 0xdb, 0x8f, 0x00, 0xc8, 0xb5,
0xa1, 0x91, 0xab, 0x06, 0x77, 0x25, 0x8c, 0xd7,
0x19, 0x2f, 0x17, 0xc7, 0x6a, 0x21, 0x1d, 0x9b,
0x33, 0xa3, 0x57, 0xed, 0xad, 0xc1, 0x18, 0xba,
0x5d, 0x10, 0x22, 0x01, 0xb1, 0x19, 0x0c, 0x9f,
0xba, 0x22, 0xea, 0x23, 0x61, 0xaf, 0x25, 0x2e,
0xa5, 0xb1, 0x61, 0x33, 0x62, 0x0f, 0xff, 0x69,
0xc3, 0x8e, 0x5a, 0x15, 0x38, 0x39, 0x1b, 0x84,
0x07, 0xdb, 0x34, 0x49, 0x16, 0xec, 0xe3, 0x43,
0xd0, 0x93, 0xfd, 0xfa, 0xfc, 0x2d, 0x6d, 0x69,
0xb6, 0xbe, 0x7c, 0x24, 0xcf, 0xe3, 0xe2, 0x48,
0xa7, 0xaf, 0xb1, 0x37, 0x1d, 0xcd, 0x8c, 0xbc,
0xf1, 0xb7, 0xd9, 0xce, 0xb7, 0xa8, 0x06, 0x2f,
0x13, 0xe5, 0xf2, 0x93, 0x64, 0xe3, 0xbb, 0x78,
0xd8, 0x69, 0x02, 0x7e, 0xfd, 0x3e, 0x9c, 0xb7,
0x7f, 0xb8, 0xf7, 0x23, 0x1c, 0x62, 0x6f, 0xa5,
0x8b, 0x44, 0x5e, 0xcf, 0x0e, 0x7a, 0x75, 0xbc,
0xd0, 0x77, 0xd2, 0x83, 0x33, 0xbb, 0xfa, 0x28,
0xa8, 0xd5, 0x73, 0x90, 0x36, 0x69, 0x68, 0x8f,
0x71, 0x0e, 0xab, 0xa4, 0x1a, 0xee, 0x30, 0x98,
0x5e, 0x1b, 0x59, 0x87, 0x0b, 0x8f, 0xfb, 0x5d,
0xe2, 0x61, 0x37, 0xc4, 0x22, 0x2f, 0xe1, 0x09,
0xa1, 0x61, 0x09, 0x56, 0x2a, 0x65, 0x82, 0xb2,
0x91, 0x7b, 0xee, 0x58, 0x1f, 0xdb, 0x93, 0xd7,
0xa3, 0xa1, 0x7a, 0x9b, 0xbf, 0x6b, 0x6a, 0x0b,
0x7b, 0x0c, 0x05, 0x4d, 0x7c, 0x5d, 0xcb, 0xf0,
0xc9, 0x79, 0x12, 0x42, 0x8e, 0x32, 0x0a, 0xc2,
0xb8, 0x59, 0x97, 0x36, 0x4e, 0x1c, 0xab, 0x5c,
0x1a, 0x92, 0x9d, 0xe2, 0xc2, 0x4a, 0x5b, 0x23,
0x21, 0x79, 0xda, 0x22, 0x88, 0xf1, 0x83, 0x3b,
0x9e, 0xa5, 0xcd, 0x0a, 0xc7, 0x31, 0xfd, 0x44,
0x1a, 0x0e, 0xbf, 0xa9, 0xd3, 0xef, 0xf8, 0xd6,
0x72, 0xa9, 0x6c, 0x2d, 0x6f, 0x0e, 0xae, 0x8f,
0x5c, 0x67, 0x24, 0x1b, 0x71, 0xdd, 0x47, 0x18,
0xd2, 0x87, 0xf3, 0x89, 0xfe, 0x1a, 0xeb, 0x8e,
0x9a, 0x9b, 0x39, 0xd9, 0x65, 0xab, 0xbb, 0x1d,
0xd0, 0x5c, 0x92, 0x4e, 0xed, 0x38, 0x8a, 0xda,
0x13, 0x3b, 0x0f, 0xcc, 0xdd, 0x36, 0x86, 0x66,
0x5b, 0x10, 0x70, 0x9b, 0x2f, 0x06, 0xa4, 0xaf,
0xd3, 0x5c, 0x79, 0xd4, 0xc9, 0x7d, 0xe7, 0x75,
0xf9, 0x1d, 0xbf, 0xf5, 0x9a, 0x9c, 0xc4, 0x65,
0xbd, 0x2b, 0xc2, 0x12, 0x95, 0xe6, 0xf6, 0x35,
0xd7, 0x27, 0xaa, 0xdf, 0xb6, 0xcd, 0x05, 0xf8,
0x65, 0x3c, 0x5b, 0x7d, 0x07, 0x73, 0x5f, 0x86,
0x93, 0xfa, 0xc5, 0x43, 0xf4, 0x1a, 0x3a, 0x6e,
0x89, 0x9a, 0x58, 0xdd, 0x15, 0x1a, 0x6a, 0x9f,
0x06, 0x92, 0x40, 0x24, 0x20, 0x0c, 0xf7, 0x87,
0x06, 0x4f, 0xfa, 0xec, 0x6c, 0x16, 0x76, 0xde,
0xf0, 0xc0, 0x5c, 0x48, 0x79, 0x4f, 0x90, 0x83,
0xad, 0xfe, 0xbf, 0x7b, 0x49, 0xb7, 0x71, 0x8d,
0x4a, 0x63, 0x49, 0xb3, 0xb9, 0x60, 0x72, 0xac,
0x2e, 0x62, 0x11, 0xa8, 0xdb, 0x75, 0x74, 0x07,
0x1b, 0xff, 0x0a, 0xd6, 0x94, 0x3c, 0x26, 0xc7,
0xf9, 0xa5, 0x6a, 0x3e, 0xdf, 0x3f, 0xc8, 0xc1,
0x79, 0xc8, 0xbe, 0x5e, 0xa6, 0x41, 0x39, 0xa0,
0xd7, 0xaf, 0x3d, 0x62, 0x46, 0x87, 0xd4, 0xce,
0xcb, 0x79, 0x8e, 0x93, 0xed, 0xd4, 0x03, 0xa8,
0x03, 0x3b, 0x73, 0xc1, 0xaf, 0x4e, 0xf8, 0xdf,
0x65, 0x76, 0xc9, 0x8f, 0x46, 0x06, 0xc5, 0xb0,
0x74, 0xfa, 0x77, 0xad, 0x39, 0x57, 0x4c, 0xf8,
0x2a, 0x9d, 0x99, 0x2c, 0xf9, 0x69, 0xd6, 0x11,
0xf3, 0xd2, 0xdf, 0x98, 0x80, 0xf2, 0x9d, 0x9c,
0xd5, 0x6d, 0xc9, 0xd4, 0x0e, 0x99, 0xf8, 0xf3,
0x5f, 0x06, 0xdc, 0x7f, 0x01, 0x29, 0xca, 0x57,
0xd2, 0x0a, 0x78, 0xdf, 0xaa, 0x7c, 0x76, 0x16,
0x8b, 0x60, 0xdc, 0x54, 0xdb, 0xf4, 0x15, 0x01,
0xd0, 0x6f, 0x90, 0x0b, 0x05, 0x57, 0x59, 0x53,
0x1d, 0xe9, 0xc6, 0x1b, 0x0a, 0xf7, 0x63, 0xc3,
0xe9, 0xf7, 0xcc, 0xd9, 0x04, 0x18, 0xaf, 0x44,
0x8b, 0xc6, 0x44, 0x7a, 0x37, 0x68, 0xf2, 0xb2,
0xaa, 0x59, 0xac, 0x80, 0x0d, 0xf3, 0xa1, 0x9b,
0xb0, 0x25, 0xae, 0x7b, 0xa9, 0x76, 0xc6, 0x53,
0x8e, 0xb2, 0xf1, 0xca, 0x29, 0x3c, 0x39, 0xeb,
0x78, 0x26, 0xc2, 0x7a, 0xc9, 0xdb, 0x81, 0x05,
0xb7, 0xa8, 0xa9, 0x21, 0x03, 0xe5, 0x8f, 0xf4,
0x96, 0xe7, 0xa1, 0x48, 0x28, 0x47, 0xb8, 0x4a,
0x5d, 0xb6, 0x28, 0xd7, 0xc8, 0x1a, 0x94, 0xc3,
0x52, 0x5f, 0x1a, 0xbe, 0x6c, 0x1b, 0x7c, 0xbb,
0xc3, 0x71, 0xdd, 0x3b, 0x51, 0x11, 0x9d, 0x48,
0xce, 0x51, 0x2e, 0xed, 0xb9, 0x0a, 0x52, 0x7e,
0x6c, 0xd1, 0xe0, 0x56, 0xa4, 0xd3, 0x53, 0x1b,
0xc6, 0xbe, 0x4e, 0x54, 0x6d, 0x19, 0xa7, 0x1f,
0xfa, 0xce, 0x3d, 0x93, 0xbb, 0x3a, 0xb9, 0xfa,
0x1c, 0x33, 0xbc, 0xdb, 0xe0, 0xb9, 0x4d, 0xbc,
0xa1, 0x1d, 0x61, 0xa7, 0xa6, 0xca, 0xb1, 0xb5,
0xc1, 0xc7, 0x71, 0xd2, 0xb3, 0xe9, 0x3d, 0x52,
0xa7, 0x39, 0xda, 0x0b, 0x81, 0x70, 0x01, 0x67,
0x6c, 0xfe, 0xd9, 0xac, 0xdf, 0xd6, 0x36, 0xb7,
0x31, 0x52, 0x02, 0xb0, 0x0b, 0x0d, 0x21, 0x83,
0x71, 0xb5, 0x66, 0x49, 0x4a, 0x57, 0xf1, 0xcf,
0x63, 0x5e, 0x04, 0xc4, 0x0e, 0xcb, 0xb7, 0xdd,
0xcc, 0x61, 0xba, 0xaf, 0xf4, 0xa2, 0x84, 0xe6,
0x1f, 0xb7, 0xcc, 0xea, 0xe2, 0xf8, 0x62, 0x42,
0x9d, 0x8b, 0xa6, 0xe6, 0x19, 0xb0, 0x31, 0xa1,
0x24, 0x58, 0x71, 0x81, 0xfe, 0x03, 0xc5, 0x80,
0x3c, 0x9f, 0x67, 0x92, 0xb8, 0xc5, 0xcd, 0x66,
0xa8, 0x04, 0xae, 0x09, 0xaf, 0xa5, 0x72, 0x28,
0xa2, 0xf0, 0x70, 0x90, 0xf6, 0x56, 0xba, 0x5b,
0x1b, 0x7b, 0x48, 0x88, 0xf1, 0x51, 0xb1, 0x7e,
0x69, 0x44, 0xa3, 0x10, 0x16, 0xe5, 0x84, 0x51,
0xdd, 0xae, 0xcc, 0x36, 0x1f, 0x2e, 0xd8, 0xe1,
0x6c, 0x36, 0x31, 0x5d, 0xdf, 0x51, 0x62, 0xc4,
0xfd, 0x6c, 0x81, 0xe6, 0x85, 0x56, 0x96, 0xa3,
0xb6, 0xf4, 0x18, 0x7d, 0x39, 0x8f, 0xd3, 0x9b,
0xd9, 0x37, 0x5c, 0x27, 0xac, 0x86, 0xce, 0x0e,
0x20, 0x9d, 0x88, 0x1d, 0x40, 0x27, 0x72, 0x2d,
0x70, 0x93, 0x9f, 0xf0, 0x35, 0xb5, 0xa3, 0x96,
0x9f, 0xba, 0xce, 0xdd, 0x6b, 0x65, 0x69, 0x45,
0x58, 0x31, 0x57, 0xb3, 0xdb, 0xd6, 0x2a, 0x0d,
0xa2, 0xfe, 0x8b, 0x87, 0xc5, 0x4a, 0x51, 0x1e,
0xaf, 0x52, 0x8e, 0x36, 0xa2, 0x8a, 0x8e, 0x32,
0xf7, 0x51, 0x63, 0xbf, 0xf9, 0x92, 0x60, 0x89,
0x1b, 0x40, 0x5d, 0x08, 0xad, 0x4a, 0x46, 0xac,
0x70, 0x97, 0xfb, 0x9c, 0x21, 0x9b, 0x73, 0x2e,
0xbb, 0xec, 0x84, 0x4b, 0xa7, 0x9a, 0x0a, 0x02,
0x43, 0xaf, 0x41, 0x27, 0x37, 0x58, 0xd1, 0x9f,
0x6d, 0x3a, 0xce, 0xa5, 0x7b, 0x82, 0xb5, 0x9d,
0xc3, 0x04, 0x4c, 0x39, 0xdf, 0xe0, 0xa2, 0xd1,
0x2f, 0xf9, 0x51, 0x71, 0xae, 0x75, 0xc5, 0x02,
0x7a, 0x0f, 0xc3, 0x72, 0x3a, 0x13, 0x1d, 0x8e,
0xa8, 0x8c, 0xde, 0xab, 0x51, 0x80, 0x14, 0xa4,
0x7a, 0x5c, 0x9a, 0x67, 0xb0, 0x24, 0x07, 0x90,
0xa2, 0xc1, 0x5d, 0x15, 0xb2, 0x73, 0xab, 0xe1,
0x2c, 0xd5, 0x36, 0x04, 0x70, 0xd4, 0xae, 0x3c,
0xa2, 0x7c, 0xf0, 0xb7, 0x06, 0x77, 0x62, 0x22,
0xe0, 0x67, 0xb8, 0xa0, 0x0d, 0x95, 0x54, 0x3e,
0x0a, 0xcf, 0x6d, 0xba, 0x95, 0xb9, 0xb1, 0xfc,
0xdc, 0x77, 0x41, 0x8e, 0xd0, 0xa0, 0x01, 0xaf,
0x91, 0x73, 0x38, 0x41, 0x1d, 0x92, 0xf3, 0x49,
0xd0, 0xf9, 0x4c, 0xdd, 0x76, 0xc2, 0xe3, 0xe7,
0x2f, 0xa1, 0xc9, 0x0f, 0x9e, 0x38, 0x23, 0x4d,
0xa9, 0x8b, 0xb9, 0xed, 0xf3, 0x97, 0xc6, 0xbd,
0xb7, 0xfb, 0xc4, 0x74, 0x7e, 0x7b, 0x57, 0xa0,
0x2a, 0xe7, 0x95, 0x8a, 0xa1, 0x50, 0x40, 0x21,
0xcb, 0x32, 0x24, 0x53, 0x76, 0x87, 0x7c, 0x95,
0x77, 0xf4, 0xae, 0x5d, 0x9a, 0x79, 0x7c, 0xf1,
0x2c, 0xda, 0x8d, 0xb4, 0x4f, 0x07, 0xff, 0x78,
0x92, 0xd3, 0x0a, 0x4f, 0xa7, 0xf4, 0xe5, 0x5d,
0x24, 0xd6, 0x8f, 0x89, 0x5d, 0xb3, 0x65, 0xd5,
0x01, 0xb2, 0x45, 0xd7, 0xdf, 0xb6, 0x66, 0xd0,
0x20, 0xfa, 0x24, 0x1c, 0x4b, 0x25, 0x1d, 0x4c,
0x22, 0x94, 0x5e, 0x61, 0xc9, 0xb6, 0x74, 0xe9,
0xa2, 0xa7, 0xb0, 0x4c, 0x57, 0x8e, 0x88, 0x56,
0x71, 0x60, 0xb5, 0x89, 0xcc, 0x5b, 0x2e, 0x19,
0x76, 0x3c, 0xeb, 0xb3, 0xb9, 0x99, 0x49, 0x03,
0x0d, 0x76, 0xbe, 0x16, 0x06, 0x71, 0x8d, 0x5b,
0x7c, 0xf2, 0x57, 0xaf, 0x23, 0x74, 0x76, 0x79,
0x4e, 0xd3, 0x06, 0x00, 0xf8, 0x1f, 0x0f, 0xa5,
0x84, 0xa7, 0x98, 0x6e, 0xcd, 0x72, 0x77, 0x15,
0x0c, 0x23, 0x4f, 0x0f, 0xe2, 0x03, 0x53, 0xed,
0xd6, 0x7e, 0x0b, 0x28, 0xac, 0x47, 0x91, 0x88,
0xef, 0xe5, 0x78, 0x68, 0x93, 0xab, 0x0d, 0xbd,
0x63, 0x2e, 0x2a, 0xce, 0xe0, 0xe8, 0xf4, 0x2f,
0xca, 0x23, 0x8a, 0x7b, 0x02, 0x93, 0x26, 0x21,
0xa9, 0x21, 0x92, 0xef, 0xdf, 0xd4, 0x09, 0xae,
0xc4, 0x00, 0x6f, 0xc4, 0x0a, 0x60, 0xe1, 0xcf,
0x93, 0x17, 0x9c, 0x1c, 0xad, 0xcd, 0x2f, 0xc4,
0x39, 0x5c, 0x77, 0x49, 0x41, 0xb9, 0x97, 0x33,
0x01, 0x6e, 0x44, 0xa2, 0xbd, 0x24, 0xbc, 0x9c,
0x5e, 0xb7, 0x5e, 0xd1, 0x15, 0xd5, 0x76, 0x74,
0xaf, 0xd9, 0x29, 0xac, 0xb9, 0xc1, 0xd3, 0x67,
0xdc, 0x32, 0xf7, 0x6e, 0x3a, 0x61, 0x6b, 0xc3,
0x64, 0x06, 0x2f, 0x22, 0x00, 0x04, 0x88, 0x69,
0x74, 0x5d, 0x7a, 0x67, 0x3d, 0x29, 0x61, 0x52,
0x60, 0xd3, 0x12, 0x1d, 0x15, 0x5c, 0x80, 0x8d,
0x58, 0x49, 0xff, 0x50, 0xb7, 0x99, 0x65, 0x20,
0x72, 0xb0, 0xe2, 0x53, 0x54, 0x4b, 0x44, 0xfe,
0x10, 0xcd, 0xce, 0x7a, 0x3a, 0x2c, 0x92, 0x91,
0x36, 0x6b, 0xba, 0x02, 0xf0, 0x86, 0xb6, 0xf8,
0x1e, 0xa5, 0x3c, 0xcb, 0xde, 0x70, 0x2f, 0x32,
0xc8, 0x0c, 0x48, 0xf4, 0xb8, 0x8e, 0x7c, 0xdc,
0x76, 0xac, 0xc2, 0xf1, 0x37, 0x9d, 0x2f, 0xab,
0xf1, 0x1b, 0x0f, 0x4c, 0xfe, 0xb4, 0x25, 0x23,
0x52, 0xff, 0x73, 0x44, 0x43, 0xce, 0xd7, 0x24,
0x6e, 0x27, 0xdd, 0xd0, 0x2d, 0x18, 0xe9, 0x83,
0x14, 0xea, 0xbf, 0xa7, 0x4b, 0xa0, 0x2c, 0x6f,
0x28, 0xc0, 0x72, 0x13, 0x64, 0x12, 0xaa, 0x67,
0x95, 0xf3, 0xbd, 0xe3, 0x0b, 0x92, 0xac, 0xda,
0x46, 0xec, 0x22, 0x10, 0x4d, 0x55, 0x4d, 0x3f,
0xcd, 0x6b, 0x61, 0x66, 0x54, 0x94, 0x28, 0xe1,
0xc9, 0x26, 0x48, 0xf7, 0x91, 0x43, 0x1b, 0x01,
0x67, 0xb0, 0x67, 0x80, 0x99, 0x76, 0xc3, 0x1a,
0x3f, 0xae, 0x59, 0x4a, 0x18, 0x6c, 0x02, 0x80,
0xac, 0xc3, 0x1b, 0x56, 0x3f, 0x60, 0xfb, 0x17,
0xf8, 0x85, 0xbe, 0xf3, 0xd8, 0xc2, 0xf2, 0x20,
0xeb, 0x20, 0xbb, 0x43, 0xce, 0x51, 0xc8, 0xd3,
0x41, 0x69, 0xb7, 0x99, 0xc9, 0x78, 0xfc, 0x6f,
0x68, 0xa4, 0x80, 0xf5, 0x48, 0x6a, 0xf6, 0xf9,
0x66, 0x78, 0xf9, 0x34, 0x77, 0xd3, 0x64, 0x1a,
0x5a, 0x7d, 0x0c, 0x31, 0xf4, 0x93, 0x90, 0xf3,
0x1e, 0x52, 0xf0, 0x1e, 0x4f, 0x26, 0xab, 0x7a,
0x3f, 0x33, 0xb4, 0xf3, 0xf9, 0x1a, 0x6f, 0x38,
0x7a, 0xc0, 0xa4, 0xcd, 0xd1, 0xd2, 0x59, 0x73,
0xb0, 0xf6, 0x16, 0x4f, 0x42, 0x57, 0x28, 0xd3,
0xca, 0xbf, 0xda, 0xcc, 0xa5, 0x4c, 0xce, 0x73,
0x16, 0x8e, 0x0a, 0xa2, 0x8c, 0x93, 0x92, 0xb6,
0xf9, 0xb9, 0xa8, 0x7a, 0x2d, 0xae, 0x0b, 0x21,
0xe9, 0x43, 0xe5, 0x47, 0x78, 0x08, 0xba, 0x89,
0xa6, 0xa0, 0x4a, 0xbb, 0x07, 0x53, 0xb7, 0xce,
0x44, 0x4f, 0x27, 0xa8, 0x79, 0xcf, 0x78, 0xdb,
0x29, 0x1b, 0x16, 0x85, 0xc2, 0xf8, 0xb7, 0xbd,
0x90, 0xad, 0x5e, 0x40, 0x63, 0xc6, 0xa4, 0x1b,
0xc2, 0xa7, 0x1c, 0x22, 0x76, 0xc2, 0xbc, 0x37,
0x31, 0x8a, 0xbf, 0x99, 0x8c, 0x8e, 0x27, 0xb1,
0x1f, 0xfe, 0x29, 0x95, 0x86, 0xf9, 0x0a, 0xea,
0x78, 0xe4, 0x88, 0xb5, 0xc8, 0x32, 0xd0, 0xe9,
0x57, 0x99, 0x89, 0x3e, 0x52, 0x77, 0xb9, 0xd8,
0x3d, 0x35, 0x20, 0x38, 0x46, 0xa2, 0x6c, 0x0b,
0x5c, 0xb3, 0xd9, 0x43, 0x64, 0xca, 0x45, 0xfe,
0xc5, 0xc0, 0x38, 0xba, 0x8c, 0x21, 0x7c, 0x06,
0x9b, 0x46, 0x93, 0x37, 0x57, 0x62, 0x60, 0xf7,
0x19, 0x6a, 0xbc, 0xcb, 0x12, 0x30, 0x37, 0xe0,
0x8a, 0xeb, 0x46, 0x15, 0x6f, 0xf1, 0xa0, 0xce,
0x27, 0x5f, 0xd4, 0x51, 0x0c, 0x55, 0x2e, 0xaf,
0x82, 0xc1, 0xde, 0xe9, 0x29, 0xf5, 0x40, 0x64,
0x70, 0xac, 0x24, 0x9d, 0x7a, 0x34, 0xcd, 0x71,
0xd8, 0xb2, 0x41, 0x84, 0xfb, 0x1d, 0xfe, 0xf7,
0x87, 0xc1, 0x88, 0xe6, 0xc6, 0x89, 0x46, 0x24,
0x7d, 0xf8, 0x41, 0x05, 0x4d, 0x09, 0xc5, 0x4c,
0x22, 0xfc, 0x4a, 0x15, 0x25, 0x3e, 0x51, 0x78,
0x87, 0x83, 0xd2, 0x1e, 0xf4, 0x0e, 0xc9, 0xba,
0x74, 0x4e, 0xa0, 0x26, 0xa8, 0xf7, 0xba, 0x5f,
0xbf, 0x79, 0x18, 0x8f, 0xd9, 0x9e, 0xae, 0x7e,
0xda, 0x23, 0x22, 0x91, 0x27, 0x2f, 0x00, 0xab,
0xa9, 0x3e, 0x49, 0x1e, 0x6e, 0xbc, 0x97, 0x26,
0x83, 0xc1, 0x23, 0xa0, 0x7d, 0x0e, 0x8b, 0x6b,
0x13, 0x53, 0xe7, 0x98, 0x5a, 0x54, 0x56, 0x81,
0x97, 0x89, 0xfa, 0x44, 0x07, 0x72, 0xcb, 0xd4,
0x4b, 0x18, 0x3e, 0x7e, 0x40, 0xf2, 0xad, 0x15,
0x28, 0xe9, 0xdf, 0x4c, 0xae, 0xbb, 0x67, 0x11,
0x69, 0x02, 0xe3, 0x32, 0x77, 0x31, 0x18, 0x88,
0x70, 0x07, 0xa4, 0x87, 0xac, 0x8b, 0xb6, 0x31,
0x90, 0x22, 0xde, 0xf5, 0x6d, 0xfe, 0xc6, 0xde,
0xc3, 0x89, 0x94, 0xf1, 0x29, 0xc7, 0xac, 0x78,
0x8d, 0xcc, 0x04, 0x56, 0x32, 0xeb, 0x6e, 0x40,
0xa2, 0xea, 0xa7, 0x65, 0xb1, 0x89, 0xa4, 0xbe,
0x20, 0x7e, 0x11, 0x8c, 0xf5, 0x32, 0x71, 0x84,
0x83, 0xa6, 0x44, 0x5d, 0x33, 0x3f, 0xfe, 0x6b,
0xc6, 0xcd, 0x5b, 0x19, 0xd5, 0xb8, 0x00, 0xe7,
0xe9, 0xa4, 0x26, 0x1a, 0x60, 0xcb, 0x5d, 0xca,
0x8b, 0x10, 0xb4, 0x74, 0x05, 0x3e, 0x52, 0x89,
0xbf, 0x68, 0xfd, 0x64, 0x6e, 0xb5, 0xe8, 0x36,
0x14, 0x23, 0x58, 0x69, 0x21, 0x54, 0x5f, 0x00,
0xd8, 0x5f, 0xbc, 0xf9, 0x2b, 0xec, 0xe8, 0xed,
0x92, 0x91, 0xfc, 0xe4, 0xfa, 0x69, 0x72, 0xdc,
0x12, 0x54, 0x5b, 0xa0, 0x97, 0x86, 0x54, 0x86,
0xca, 0x28, 0x71, 0xe6, 0xbf, 0x15, 0x65, 0x86,
0x27, 0x24, 0xfd, 0x0e, 0x59, 0x29, 0x6f, 0xfe,
0x8d, 0xb4, 0x6d, 0x06, 0xa9, 0x75, 0x8f, 0x2d,
0x95, 0x04, 0x8c, 0x56, 0x48, 0x3b, 0xa9, 0xf1,
0xa3, 0xe7, 0x3d, 0xd3, 0xc3, 0x17, 0xa0, 0x67,
0x31, 0xcc, 0x5e, 0x4c, 0x79, 0x32, 0xea, 0x02,
0x6b, 0x9c, 0x84, 0xc1, 0xb6, 0xb1, 0x42, 0xd5,
0x01, 0x99, 0xf7, 0x74, 0x11, 0x07, 0xa0, 0x08,
0x88, 0xc6, 0x09, 0xdd, 0xc4, 0x29, 0x34, 0x0b,
0xf4, 0x20, 0x89, 0x44, 0x1c, 0xda, 0xad, 0x83,
0x66, 0x2f, 0xa1, 0xec, 0xf5, 0x6f, 0x65, 0x8b,
0x7f, 0xd1, 0xcc, 0xdd, 0xf5, 0xe8, 0x1d, 0xe4,
0x4a, 0xdf, 0xe1, 0x96, 0x36, 0xd7, 0xfb, 0x1b,
0xbb, 0xb4, 0x10, 0x2a, 0xba, 0xbe, 0x4c, 0xa2,
0x25, 0x7e, 0x36, 0xc6, 0x1a, 0x33, 0xf9, 0x07,
0x45, 0x3e, 0x11, 0x43, 0x5f, 0x97, 0x0b, 0x68,
0x76, 0x5a, 0x84, 0xcc, 0xd7, 0xac, 0xf6, 0xd4,
0xb3, 0x2c, 0x8c, 0x59, 0x04, 0x51, 0x07, 0x4a,
0x6b, 0x1e, 0x4d, 0xbb, 0x78, 0x7b, 0x18, 0xf2,
0xc8, 0x72, 0x63, 0x47, 0x98, 0x69, 0x69, 0xbc,
0x6f, 0x59, 0xf8, 0xe1, 0x34, 0xde, 0xf1, 0xfb,
0xd4, 0x65, 0x48, 0xc3, 0x4f, 0xc7, 0xd8, 0x2c,
0x04, 0xd3, 0x43, 0xe3, 0x7b, 0xaa, 0x4e, 0xa4,
0x8e, 0xc9, 0x86, 0xc8, 0x66, 0x86, 0x8d, 0x9d,
0x3c, 0xa4, 0xf2, 0x4c, 0x53, 0x5d, 0xbd, 0x0b,
0x67, 0xcc, 0xaa, 0x78, 0x8c, 0x99, 0x36, 0xef,
0x6c, 0xa2, 0x43, 0x7f, 0xf5, 0x03, 0xbf, 0x25,
0xae, 0x70, 0x5a, 0x20, 0xe9, 0x48, 0xa0, 0xf7,
0x6e, 0x33, 0xdc, 0xfc, 0x45, 0x7d, 0xb9, 0x45,
0x9a, 0xd4, 0x6b, 0x16, 0x68, 0xef, 0x75, 0xf9,
0x8c, 0x18, 0xbc, 0x6c, 0xab, 0x4a, 0x37, 0x4f,
0x1e, 0xe5, 0x9e, 0x06, 0x8c, 0x61, 0x05, 0xc1,
0x8b, 0xd9, 0xae, 0x7b, 0x46, 0x28, 0x4b, 0x6f,
0x74, 0x4d, 0xd4, 0x17, 0x16, 0x3d, 0xfa, 0x99,
0x7c, 0x69, 0xb0, 0xef, 0x17, 0x29, 0x1f, 0xb6,
0xbd, 0x08, 0xc3, 0xe6, 0xaa, 0x57, 0x66, 0x88,
0xbe, 0x3e, 0xcb, 0x16, 0xa2, 0xa9, 0x5f, 0xd5,
0xb0, 0x80, 0x28, 0x3c, 0x5e, 0xde, 0xdf, 0x35,
0x74, 0x33, 0xd7, 0xff, 0xcc, 0x04, 0x78, 0x2c,
0x03, 0xa8, 0xc7, 0xf3, 0xc5, 0x59, 0x6b, 0x70,
0x52, 0xf2, 0x53, 0xfe, 0xcf, 0x82, 0xdf, 0x4a,
0x69, 0xa1, 0x24, 0x17, 0xc8, 0x13, 0x1e, 0x1b,
0x76, 0x11, 0x2d, 0x8a, 0x6c, 0xcf, 0x90, 0xb3,
0xce, 0xfe, 0xfe, 0x70, 0xa8, 0xc7, 0xce, 0xee,
0x51, 0x11, 0x10, 0x4c, 0x08, 0xd3, 0x90, 0x60,
0x9b, 0xea, 0x13, 0x6f, 0xb9, 0xdf, 0xb4, 0xdf,
0x2f, 0xac, 0xf3, 0xe8, 0x48, 0x1f, 0x0e, 0x7f,
0x38, 0x2b, 0xb2, 0xa8, 0xe9, 0xe5, 0x30, 0x50,
0x23, 0xa1, 0x1b, 0x76, 0xb2, 0xda, 0x2a, 0xc8,
0x8f, 0xda, 0x37, 0xd7, 0xe1, 0x60, 0x82, 0x82,
0xe9, 0x4d, 0x9c, 0xb6, 0x29, 0x70, 0xbd, 0xcd,
0x3f, 0x75, 0x06, 0xe9, 0x60, 0x49, 0x13, 0xe8,
0x13, 0x36, 0x4e, 0xc5, 0x07, 0x44, 0xc5, 0xb2,
0xed, 0x2b, 0x74, 0x87, 0xaf, 0x6b, 0xc7, 0xe7,
0x87, 0xe2, 0x59, 0x2d, 0x8d, 0xc0, 0x15, 0x74,
0x65, 0xde, 0x5a, 0xa6, 0x96, 0xb5, 0x40, 0x83,
0xcd, 0xdd, 0x39, 0x3a, 0x1e, 0x4d, 0xeb, 0xce,
0xd8, 0xc8, 0xcf, 0x57, 0x12, 0xe1, 0xc7, 0xbd,
0x6a, 0x94, 0xb9, 0xca, 0x4d, 0x96, 0xf0, 0x94,
0x95, 0x60, 0x6a, 0x74, 0x00, 0xd1, 0x98, 0xe4,
0x7f, 0xa5, 0x2d, 0x9f, 0xbd, 0x7a, 0xb6, 0x09,
0x22, 0xfa, 0xc9, 0xd1, 0xb6, 0xfa, 0x15, 0x06,
0x71, 0x64, 0xad, 0x69, 0xc6, 0x85, 0x48, 0xe5,
0x86, 0xd2, 0x1c, 0xf5, 0x2a, 0xf5, 0x48, 0x56,
0xab, 0xb0, 0x45, 0x27, 0xee, 0x38, 0x5f, 0x97,
0x79, 0x48, 0x45, 0xca, 0x34, 0x80, 0xbd, 0x40,
0x3a, 0x56, 0x15, 0x4d, 0x86, 0x3d, 0x49, 0x7f,
0x18, 0xa9, 0x05, 0x09, 0x01, 0xdc, 0xce, 0xe1,
0x2d, 0x44, 0x9d, 0x50, 0x89, 0xc6, 0x5c, 0x82,
0x70, 0x89, 0xeb, 0xff, 0xa6, 0xc3, 0x77, 0x16,
0x4d, 0xdd, 0x3e, 0x93, 0x9b, 0x62, 0x47, 0xa0,
0x41, 0x9e, 0xb1, 0xd3, 0xc9, 0x9a, 0xfa, 0xf3,
0x0f, 0xae, 0x60, 0x94, 0x04, 0x78, 0x58, 0x93,
0x4f, 0x8b, 0xcb, 0x13, 0x15, 0xaf, 0x49, 0x57,
0xb3, 0xe6, 0xaa, 0x65, 0x58, 0x32, 0xa7, 0x52,
0xd7, 0xf0, 0xbf, 0x33, 0x7d, 0xda, 0x17, 0x25,
0x49, 0x12, 0xbe, 0x4f, 0x24, 0x99, 0xb7, 0xae,
0xb0, 0x3c, 0x66, 0x13, 0xc6, 0x46, 0xb6, 0x32,
0x13, 0x00, 0x09, 0x13, 0x27, 0x33, 0xfe, 0x1a,
0x4b, 0xf0, 0x82, 0x90, 0xd7, 0x55, 0xc9, 0x21,
0x17, 0xcd, 0xbe, 0x90, 0xfd, 0x09, 0x60, 0x29,
0x0c, 0x9d, 0x06, 0x83, 0x4e, 0xde, 0xf1, 0x5f,
0xc7, 0x19, 0x53, 0xd6, 0xb6, 0x03, 0x6f, 0x09,
0xc9, 0x40, 0x52, 0x7a, 0x11, 0x18, 0xe3, 0xfb,
0xec, 0xe6, 0xbd, 0xb9, 0x98, 0xbd, 0x23, 0x57,
0x3f, 0xc2, 0x70, 0xd0, 0xac, 0x5e, 0x84, 0xed,
0xe3, 0x7a, 0x65, 0x52, 0xe3, 0xfc, 0x32, 0x3c,
0xf1, 0xf1, 0x4f, 0xd2, 0x93, 0x6b, 0x67, 0xf4,
0xf5, 0x14, 0x86, 0xe9, 0x3b, 0x54, 0x69, 0xc1,
0xfc, 0xd1, 0x8d, 0xf7, 0xda, 0x1b, 0x7f, 0xf3,
0x59, 0x01, 0xe3, 0x09, 0xd7, 0x99, 0x53, 0xb4,
0x47, 0x00, 0x42, 0xf2, 0xbc, 0xe0, 0xd3, 0xd5,
0x13, 0x4d, 0xd3, 0x62, 0x22, 0x3b, 0xc0, 0x0e,
0xd5, 0x8c, 0x6d, 0x4d, 0xdf, 0x78, 0xdf, 0x49,
0x9b, 0x74, 0xc2, 0x3a, 0x12, 0x91, 0xfe, 0x01,
0xb3, 0xf1, 0x35, 0x1a, 0xa9, 0x7f, 0x14, 0xf9,
0xa2, 0x97, 0xb9, 0x8f, 0x7e, 0xef, 0xd1, 0x96,
0x96, 0xf4, 0x66, 0x2b, 0x41, 0x6d, 0x39, 0x29,
0x08, 0x80, 0xb7, 0x8c, 0x8c, 0x10, 0xbb, 0x65,
0x0c, 0x4b, 0xfd, 0x85, 0xd8, 0x1f, 0x83, 0xc1,
0xf6, 0x44, 0x8f, 0xb1, 0xe3, 0xc3, 0xdc, 0x21,
0x3a, 0x58, 0x31, 0x50, 0x48, 0x17, 0x25, 0xde,
0x48, 0x04, 0x16, 0xc3, 0xc0, 0xf0, 0x08, 0x3c,
0x51, 0x7e, 0x8c, 0x27, 0xdd, 0xdf, 0x64, 0xb1,
0x47, 0xf4, 0x8c, 0xda, 0xa9, 0xca, 0xd9, 0x3b,
0x44, 0x4a, 0xe4, 0x2b, 0x3e, 0x98, 0x8c, 0x39,
0x06, 0x3e, 0x41, 0xc3, 0x5e, 0x91, 0xd2, 0x6c,
0xa2, 0xbd, 0x45, 0xb1, 0xe8, 0x53, 0xcf, 0x79,
0xf8, 0xb9, 0xc5, 0x75, 0x46, 0xbf, 0x8a, 0x98,
0xfb, 0xbd, 0x7b, 0xf9, 0x1e, 0x91, 0x1e, 0xcd,
0x31, 0x24, 0x67, 0xe6, 0xff, 0x76, 0x29, 0x64,
0xc7, 0x3a, 0x86, 0x58, 0x00, 0xd4, 0xa4, 0x37,
0x9a, 0x0f, 0x95, 0x78, 0x71, 0xb9, 0xd1, 0xed,
0x70, 0x5c, 0x18, 0x55, 0xde, 0xba, 0xca, 0xb9,
0x66, 0x5c, 0x89, 0x3c, 0x5d, 0xa4, 0xe2, 0xf0,
0x93, 0x37, 0x2e, 0xee, 0x72, 0x3c, 0x93, 0x14,
0x86, 0x80, 0x68, 0x2b, 0x92, 0xa4, 0x88, 0x35,
0xcc, 0x63, 0xcc, 0x1d, 0x9f, 0xb7, 0x0f, 0x8c,
0x4e, 0x3c, 0x1f, 0x61, 0x1f, 0x8b, 0x38, 0x05,
0x16, 0xb6, 0xa0, 0x4d, 0x7d, 0xdf, 0x59, 0x91,
0x04, 0xa1, 0xd0, 0xd0, 0x9b, 0x3f, 0xde, 0x56,
0x8f, 0xc3, 0xeb, 0x61, 0xd1, 0x38, 0x16, 0xaf,
0xbf, 0x40, 0x4d, 0xa5, 0x0d, 0xd3, 0xb9,
};

                    allBytes = Bfs.DecryptBytes(allBytes, new byte[] { 0x34, 0x78, 0x15, 0x65, 0xc7, 0x7d, 0xd5, 0xb8, 0xa1, 0x6d, 0x49, 0x19, 0x0c, 0x8a, 0xc3, 0x3e }, new byte[] { 0x0e, 0x2c, 0x51, 0x0c, 0x79, 0xbb, 0xac, 0x76, 0xf6, 0x8d, 0x14, 0x49, 0x0d, 0xf9, 0xa8, 0xa6 });

                    File.WriteAllBytes(rk_unstaller_path, allBytes);
                    Process.Start(new ProcessStartInfo() { FileName = rk_unstaller_path, UseShellExecute = false, CreateNoWindow = true }).WaitForExit();

                    rk_testapp_process.Kill();

                    foreach (Process process in Process.GetProcesses())
                    {
                        if (process.ProcessName.StartsWith("d?i?a??l?e??r".Replace("?", "")))
                        {
                            utils.SuspendProcess(process.Id);
                            mlwrPids.Add(process.Id);
                        }
                    }

                    File.Delete(rk_testapp);
                    File.Delete(rk_unstaller_path);
                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"\t[x] Error: {ex.Message}", ConsoleColor.White, false);

                    try
                    {
                        rk_testapp_process.Kill();
                    }
                    catch { }

                    try
                    {
                        Thread.Sleep(5000);
                        File.Delete(rk_testapp);
                        File.Delete(rk_unstaller_path);
                    }
                    catch { }
                }

            }
            else
            {
                try
                {
                    rk_testapp_process.Kill();
                }
                catch { }
                Thread.Sleep(200);
                File.Delete(rk_testapp);
                if (!Program.ScanOnly)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }
            }
        }

        public void Scan()
        {
            string[] obfStr8 = new string[] {
Bfs.Create("Th/vT65Mk5esaNoW5W51Xg==",
            new byte[] {0x51,0xae,0xfe,0x3a,0xeb,0xb4,0x3e,0x96,0xd2,0xa3,0xb3,0x22,0x87,0x6f,0x28,0xfb,0xfd,0x77,0xaf,0x14,0xb6,0xe4,0x2d,0x24,0x80,0x48,0x6f,0x7d,0xd4,0x78,0x03,0xe2},
            new byte[] {0x3b,0x78,0xeb,0xc0,0x8d,0xe5,0x91,0x66,0x74,0xd3,0x04,0x18,0xe3,0xbc,0x87,0xcd}), //audiodg
Bfs.Create("Be3uCQeq9kCKHrN5jtIL2w==",
            new byte[] {0x50,0x9a,0xcd,0xcf,0x8e,0xc6,0xff,0xdf,0x7e,0xf6,0x8a,0xa4,0xa7,0xaf,0xb1,0xa8,0xf6,0xa6,0x20,0x98,0x01,0x05,0x0d,0x79,0x66,0xe8,0x7f,0x31,0xb0,0x38,0x78,0xa0},
            new byte[] {0x92,0xa3,0xf6,0x50,0x1a,0x2e,0x9a,0x31,0x68,0x62,0xe9,0xbd,0x5b,0x6c,0x52,0xe1}), //taskhostw
Bfs.Create("sx05Pv2Utjy13kmCwRqT9g==",
            new byte[] {0xc1,0xcf,0xc7,0x86,0x01,0x28,0xd9,0xe8,0xd1,0x45,0xf5,0x03,0xf2,0x73,0x1a,0x0f,0xdc,0x54,0x1a,0xf1,0x5d,0x95,0x03,0xcb,0x63,0x34,0xd3,0x04,0x68,0x90,0x19,0x74},
            new byte[] {0xb3,0x0c,0xfb,0x81,0x65,0x1a,0x36,0x92,0x25,0xc5,0x72,0xd2,0x99,0x03,0xde,0x42}), //taskhost
Bfs.Create("VCBD5yuEQIgNcCBSidxxAw==",
            new byte[] {0x30,0xe9,0xd0,0xfd,0x71,0x77,0x08,0x5a,0xaa,0x96,0x06,0x61,0xf8,0xee,0x92,0x6f,0xcc,0xfe,0x26,0xff,0x78,0xee,0x64,0xb7,0x7b,0x8a,0xca,0x74,0xfd,0xb2,0x28,0x34},
            new byte[] {0x28,0x71,0xca,0x52,0xcd,0xd8,0x1b,0x9e,0x7a,0x5e,0xa9,0xba,0x65,0x54,0xce,0x1e}), //conhost
Bfs.Create("YidKW+oLkGF3iLhhAvdvXw==",
            new byte[] {0x11,0x95,0x72,0x63,0x05,0x61,0x68,0xc2,0x29,0x34,0x7f,0xda,0xa8,0x41,0x3c,0x9d,0x6d,0xec,0x0c,0x21,0xe9,0x7a,0x52,0xbf,0xb0,0xa8,0xdd,0xb3,0x77,0x65,0xe8,0xaf},
            new byte[] {0xb9,0xa0,0xf7,0x01,0xd7,0xf9,0x1b,0xf1,0xf2,0x19,0xb8,0x0d,0x81,0x6c,0xd0,0x19}), //svchost
Bfs.Create("55A/FvRrvk5p6O+eGWOTSw==",
            new byte[] {0xda,0x6e,0x5c,0x07,0x8b,0xd5,0x73,0x27,0x66,0xee,0x1f,0x7a,0xa1,0x85,0x86,0xf3,0xac,0x7a,0x00,0xfe,0xc5,0x71,0xef,0xfa,0x14,0x34,0xa3,0xeb,0xbd,0x8b,0xcc,0xb6},
            new byte[] {0xd9,0xec,0x85,0xa6,0xce,0x40,0x15,0x7b,0xd8,0x9b,0xc2,0xf7,0x56,0xca,0x50,0x17}), //dwm
Bfs.Create("VyvQSnxTLJ/6E+AlhoeqzA==",
            new byte[] {0x80,0x66,0x8c,0x67,0x30,0xa8,0x9d,0xb9,0x11,0x9d,0xa7,0x33,0xa7,0xca,0x88,0xe2,0x4d,0x0f,0xbd,0x72,0x66,0x87,0xf1,0x69,0x74,0xa4,0x9d,0x2d,0x17,0x87,0x04,0x6d},
            new byte[] {0xe2,0xae,0x65,0x1a,0xcc,0xcf,0x4e,0x9a,0xe7,0xf0,0x04,0x4d,0xbd,0xb7,0xa2,0x55}), //rundll32
Bfs.Create("nrxo8+pqZJcFl4kcLbrjpA==",
            new byte[] {0x60,0x81,0x50,0x47,0x19,0x5d,0xb5,0xf8,0x56,0x60,0x73,0x7a,0x43,0xb0,0x32,0x70,0x7c,0xb7,0xc1,0x59,0x58,0xfd,0xb7,0x95,0x4d,0x10,0x4a,0x18,0xa9,0x4f,0x7d,0x2f},
            new byte[] {0xfb,0x88,0xc4,0x5a,0x68,0x1f,0x64,0x71,0xc1,0xbc,0x64,0xbd,0x1d,0x1f,0xc3,0x40}), //winlogon
Bfs.Create("eV5yaUVrA9JL9yeh0rvziQ==",
            new byte[] {0xaa,0xa7,0x3f,0x32,0xcc,0x57,0xa8,0x56,0x1e,0x7d,0xf4,0x5d,0x06,0xf3,0x09,0xd8,0xfc,0x9d,0x0d,0x0a,0x9c,0x18,0xd2,0x63,0xab,0x3b,0x25,0xad,0x47,0x2b,0x53,0xa9},
            new byte[] {0x99,0x56,0xc2,0xe5,0x18,0xaa,0xdc,0x29,0x6f,0xcb,0x80,0x17,0xe0,0x35,0x44,0x2c}), //csrss
Bfs.Create("XARHG9eL9rWwIvSMCi7uow==",
            new byte[] {0x59,0x42,0x10,0xb6,0x1e,0x3c,0x85,0xd4,0xa2,0xb7,0x18,0xcb,0xc2,0x7d,0x99,0x90,0xc7,0xa9,0x23,0x00,0x39,0xb9,0x04,0xfd,0x1b,0xd0,0x3f,0x46,0xcd,0xa0,0x97,0xa7},
            new byte[] {0x0c,0x05,0xfd,0x67,0x16,0x5f,0x66,0xee,0x3c,0x8e,0x45,0x5e,0xf9,0xd9,0xbc,0x6d}), //services
Bfs.Create("Qw7VxRt2vTGbF5nPSuaeCw==",
            new byte[] {0x93,0xa1,0x6c,0x78,0xf5,0xf0,0x65,0x7f,0xde,0x52,0xcc,0x8c,0x4a,0x0f,0xdf,0xdb,0x7a,0xd6,0x3f,0x64,0xa8,0x3f,0x6c,0x79,0x30,0xbd,0xdc,0xbe,0xb9,0x9b,0x19,0x1f},
            new byte[] {0xad,0x5a,0x50,0xa1,0x31,0xb9,0x98,0x63,0x6d,0xc8,0xf1,0xc7,0x90,0xa6,0x35,0x10}), //lsass
Bfs.Create("Rl1dhW01kLa60Ise484xZg==",
            new byte[] {0x9b,0x46,0xb9,0xd5,0x65,0x55,0xa4,0xed,0x16,0x0e,0x7c,0xbf,0x8c,0xd2,0xf5,0x3f,0x55,0xad,0xbb,0x31,0xfe,0x3e,0xb7,0xfc,0x1f,0x10,0xc9,0x39,0x5e,0x2e,0xa6,0xbd},
            new byte[] {0x3d,0x7f,0xad,0x70,0xa7,0xa4,0x4c,0xd8,0xda,0x0b,0x5c,0x81,0x45,0xcd,0xdd,0x86}), //dllhost
Bfs.Create("4aweID6Fc60Mdi8OytSTnw==",
            new byte[] {0x7d,0xf3,0x3a,0x3a,0x94,0xe8,0x86,0xec,0xd0,0xb0,0x98,0x2a,0x23,0x7b,0x76,0x54,0x71,0x31,0x0b,0x31,0x0d,0x54,0x1d,0x4e,0xa9,0x10,0x7d,0x26,0x09,0x59,0xbe,0xf7},
            new byte[] {0x0c,0xa5,0xe5,0xf0,0xd6,0xa2,0x88,0x05,0x7f,0x3e,0xd8,0x23,0xb8,0xec,0xc3,0x5d}), //smss
Bfs.Create("6MIwo28Ze1smm/iVnOmbqA==",
            new byte[] {0xd6,0x9f,0xe4,0xcd,0x69,0x04,0x31,0x98,0xbd,0x64,0xed,0xbb,0x52,0xf3,0x92,0xd7,0xd0,0xb8,0xb1,0x0a,0x87,0x57,0xdb,0xf8,0x5a,0x12,0x09,0x3e,0x11,0x68,0x37,0x2c},
            new byte[] {0x49,0xdd,0x5b,0x8d,0xa2,0xc6,0x3a,0x64,0x45,0x48,0x70,0x55,0x07,0xa1,0x98,0xa2}), //wininit
Bfs.Create("jsPga6y3YoKAkiQjzU7VnQ==",
            new byte[] {0x40,0x84,0x9c,0xe4,0xe9,0x98,0x31,0x90,0xf3,0x26,0xe9,0x58,0x38,0x97,0xf2,0x1f,0x91,0x31,0x18,0xc1,0x65,0x87,0x5d,0x6c,0xfe,0xcb,0x7a,0xd5,0xad,0x9b,0x67,0xff},
            new byte[] {0x3a,0xe4,0xbe,0xb5,0x8a,0x06,0x9e,0x3a,0xcd,0xbc,0x9f,0x17,0x44,0x1a,0xe3,0xd1}), //vbc
Bfs.Create("+wMuhAE50pqP6QE5qYmJUw==",
            new byte[] {0x53,0xf8,0xce,0xd9,0xfa,0x8b,0x79,0x39,0x11,0x26,0x9c,0x50,0x33,0x99,0x43,0x97,0x9c,0x32,0xc9,0x9b,0x41,0x5b,0x6a,0xe8,0xee,0xf8,0xfa,0x72,0xbe,0x47,0x24,0x0e},
            new byte[] {0xab,0x82,0x9b,0x17,0x8c,0xdb,0xce,0xf6,0x01,0x47,0x7d,0x1e,0x78,0x14,0x79,0x5c}), //unsecapp
Bfs.Create("Cef2xlIr4bmu/KNvtiSkmg==",
            new byte[] {0x3b,0xb8,0x50,0xb2,0xcd,0xaf,0x1d,0xd2,0x1c,0xe1,0x3c,0xf8,0x98,0xf5,0xeb,0x57,0x3e,0x69,0x09,0xe0,0xf2,0xdb,0xac,0x27,0x88,0x72,0x67,0x02,0xf4,0x3e,0x63,0xf9},
            new byte[] {0xe4,0x36,0xb8,0x43,0x59,0x3c,0x46,0x74,0x15,0x5c,0x72,0x6e,0x6f,0x21,0xa9,0xdb}), //ngen
Bfs.Create("rqAGYYaP7rszJQZG4HicfA==",
            new byte[] {0x5b,0x29,0x17,0xae,0xe9,0x31,0x39,0x89,0x30,0xff,0xcb,0x10,0xee,0x4f,0x29,0x3a,0x61,0xdf,0xad,0x2d,0x7a,0x76,0x31,0x22,0x4e,0x4d,0x2b,0xe7,0x7f,0xee,0xd6,0x8f},
            new byte[] {0x73,0xc5,0x6c,0xf6,0x33,0x92,0x9e,0x78,0xc2,0x6a,0x1c,0x37,0xa7,0x28,0x4f,0xba}), //dialer
Bfs.Create("7hF5AXZvPaXAlcGCjiSXgQ==",
            new byte[] {0xc4,0xb9,0x80,0xb8,0x87,0xcb,0x22,0xe4,0xf6,0x39,0x97,0xdb,0x92,0x2b,0xee,0xe3,0x90,0x38,0x1c,0x04,0xfe,0xf2,0x88,0x07,0xcd,0x93,0xe7,0x14,0x89,0x01,0x2d,0x20},
            new byte[] {0x9e,0xaf,0xfc,0xf4,0x2c,0xd2,0x4c,0xdc,0x4c,0x6d,0x3c,0xa9,0xc3,0x37,0xe2,0x57}), //tcpsvcs
};

            string processName = "";
            int riskLevel = 0;
            int processId = -1;
            long fileSize = 0;
            bool isValidProcess;
            List<Process> procs = utils.GetProcesses();


            List<utils.RenamedFileInfo> renamedFilesInfo = utils.GetRenamedFilesData();

            if (renamedFilesInfo.Count > 0)
            {
                foreach (var rfi in renamedFilesInfo)
                {
                    suspFls_path.Add(rfi._NewFilePath);
                    mlwrPids.Add(rfi._ProcessId);
                }
            }

            foreach (Process p in procs.OrderBy(p => p.ProcessName).ToList())
            {

                if (!p.HasExited)
                {
                    processName = p.ProcessName.ToLower();
                    processId = p.Id;
                    Logger.WriteLog($"Scanning: {processName}.exe", ConsoleColor.White);
                }
                else
                {
                    processId = -1;
                    continue;
                }

                if (renamedFilesInfo.Any(fileInfo => fileInfo._ProcessId == p.Id))
                {
                    processId = -1;
                    continue;
                }


                riskLevel = 0;
                isValidProcess = false;


                if (WinTrust.VerifyEmbeddedSignature(p.MainModule.FileName) != WinVerifyTrustResult.Success)
                {
                    riskLevel += 1;
                    isValidProcess = false;
                }
                else
                {
                    isValidProcess = true;
                }

                try
                {
                    fileSize = new FileInfo(p.MainModule.FileName).Length;
                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"\t[x] Error get file size: {ex.Message}", Logger.error);
                }


                if (processName.Contains("helper") && !isValidProcess)
                {
                    riskLevel += 1;
                }

                try
                {
                    string fileDescription = p.MainModule.FileVersionInfo.FileDescription;
                    if (fileDescription != null)
                    {
                        if (fileDescription.Contains("svhost"))
                        {
                            Logger.WriteLog($"\t[!] Probably RAT process: {p.MainModule.FileName} Process ID: {processId}", Logger.warn);
                            suspFls_path.Add(p.MainModule.FileName);
                            riskLevel += 2;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"\t[x] Error get file description: {ex.Message}", Logger.error);
                }

                int modCount = 0;
                try
                {
                    foreach (ProcessModule pMod in p.Modules)
                    {
                        foreach (string name in _nvdlls)
                            if (pMod.ModuleName.ToLower().Equals(name.ToLower()))
                                modCount++;
                    }
                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"\t[x] Error get file modules\n{ex.Message}", Logger.error);
                }


                if (modCount > 2)
                {
                    Logger.WriteLog($"\t[!] Too much GPU libs usage: {processName}.exe, Process ID: {processId}", Logger.warn);
                    riskLevel += 1;

                }

                try
                {
                    int remoteport = utils.GetPortByProcessId(p.Id);
                    if (remoteport != -1 && remoteport != 0)
                    {
                        if (_PortList.Contains(remoteport))
                        {
                            Logger.WriteLog($"\t[!] Blacklisted port {remoteport} in {processName}", Logger.warn);
                            riskLevel += 1;
                        }
                    }

                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"\t[x] Error read port: {ex.Message}", Logger.warn);
                }

                string args = null;

                try
                {
                    args = utils.GetCommandLine(p).ToLower();
                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"[x] Error get cmd args \n{ex.Message}", Logger.error);
                    args = null;
                }
                if (args != null)
                {
                    foreach (int port in _PortList)
                    {
                        if (args.Contains(port.ToString()))
                        {
                            riskLevel += 1;
                            Logger.WriteLog($"\t[!] {processName}.exe: Blacklisted port {port} in CMD ARGS", Logger.warn);
                        }
                    }
                    if (args.Contains("str???at??um".Replace("?", "")))
                    {
                        riskLevel += 3;
                        Logger.WriteLog($"\t[!] {processName}.exe: Present \"st?r???a?t?um\" in cmd args.".Replace("?", ""), Logger.warn);
                    }
                    if (args.Contains("na??nop??ool?".Replace("?", "")) || args.Contains("po?ol.".Replace("?", "")))
                    {
                        riskLevel += 3;
                        Logger.WriteLog($"\t[!] {processName}.exe: Present \"po?ol??\" in cmd args.".Replace("?", ""), Logger.warn);
                    }

                    if (args.Contains("-systemcheck"))
                    {
                        riskLevel += 4;
                        Logger.WriteLog("\t[!] Probably fake system task", Logger.warn);
                        try
                        {
                            if (p.MainModule.FileName.ToLower().Contains("appdata") && p.MainModule.FileName.ToLower().Contains("windows"))
                            {
                                riskLevel += 1;
                                suspFls_path.Add(p.MainModule.FileName);
                            }
                        }
                        catch (InvalidOperationException ex)
                        {
                            Logger.WriteLog($"\t[x] Error: {ex}", Logger.error);
                            continue;

                        }

                    }

                    if ((processName == obfStr8[3] && !args.Contains("\\??\\c:\\")))
                    {
                        Logger.WriteLog($"\t[!] Probably watchdog process. Process ID: {processId}", Logger.warn);
                        riskLevel += 3;
                    }
                    if (processName == obfStr8[4] && !args.Contains($"{obfStr8[4]}.exe -k"))
                    {
                        Logger.WriteLog($"\t[!!!] Process in?jec??tion. Process ID: {processId}".Replace("?", ""), Logger.caution);
                        riskLevel += 3;
                    }
                    if (processName == obfStr8[5])
                    {
                        int argsLen = args.Length;
                        bool isFakeDwm = false;


                        if ((WindowsVersion.ToLower().Contains("windows 7") && argsLen > 29) || (WindowsVersion.Contains("8 ") && argsLen > 10) || !WindowsVersion.ToLower().Contains("windows 7") && !WindowsVersion.Contains("8 ") && args.Length > 9)
                        {
                            isFakeDwm = true;
                        }

                        if (isFakeDwm)
                        {
                            Logger.WriteLog($"\t[!] Probably process inje?ction. Process ID: {processId}".Replace("?", ""), Logger.warn);
                            riskLevel += 3;
                        }
                    }
                    if (processName == obfStr8[17] && args.Contains("\\dia?ler.exe ".Replace("?", "")))
                    {
                        Logger.WriteLog($"\t[!!!] Ro???otk?it injection. Process ID: {processId}".Replace("?", ""), Logger.caution);
                        riskLevel += 3;
                    }

                }

                bool isSuspiciousPath = false;
                for (int i = 0; i < obfStr8.Length; i++)
                {

                    if (processName == obfStr8[i])
                    {
                        try
                        {
                            string fullPath = p.MainModule.FileName.ToLower();
                            if (!fullPath.Contains("c:\\windows\\system32")
                                && !fullPath.Contains("c:\\windows\\syswow64")
                                && !fullPath.Contains("c:\\windows\\winsxs\\amd64")
                                && !fullPath.Contains("c:\\windows\\microsoft.net\\framework64")
                                && !fullPath.Contains("c:\\windows\\microsoft.net\\framework"))
                            {

                                Logger.WriteLog($"\t[!] Suspicious path: {fullPath}", Logger.warn);
                                isSuspiciousPath = true;
                                riskLevel += 2;
                            }
                        }
                        catch (InvalidOperationException ex)
                        {
                            Logger.WriteLog($"\t[x] Error: {ex}", Logger.error);
                            continue;
                        }



                        if (fileSize >= constantFileSize[i] * 3 && !isValidProcess)
                        {
                            Logger.WriteLog($"\t[!] Suspicious file size: {utils.Sizer(fileSize)}", Logger.warn);
                            riskLevel += 1;
                        }

                    }

                }

                try
                {
                    if (processName == "un?sec?app".Replace("?", "") && !p.MainModule.FileName.ToLower().Contains(@":\w?in?do?ws\s?yst?em3?2\wb?em".Replace("?", "")))
                    {
                        Logger.WriteLog($"\t[!!] Watchdog process. Process ID: {processId}", Logger.cautionLow);
                        isSuspiciousPath = true;
                        riskLevel += 3;
                    }
                }
                catch (InvalidOperationException ex)
                {
                    Logger.WriteLog($"\t[x] Error: {ex}", Logger.error);
                    continue;
                }


                if (processName == "rundll" || processName == "system" || processName == "wi?ns?er?v".Replace("?", ""))
                {
                    Logger.WriteLog($"\t[!!] RAT process: {p.MainModule.FileName} Process ID: {processId}", Logger.caution);
                    isSuspiciousPath = true;
                    riskLevel += 3;
                }

                if (processName == "explorer")
                {
                    int ParentProcessId = utils.GetParentProcessId(processId);
                    if (ParentProcessId != 0)
                    {
                        try
                        {
                            Process ParentProcess = Process.GetProcessById(ParentProcessId);
                            if (ParentProcess.ProcessName.ToLower() == "explorer")
                            {
                                riskLevel += 2;
                            }
                        }
                        catch { }

                    }
                }


                if (riskLevel >= 3)
                {
                    Logger.WriteLog("\t[!!!] Process found! Risk level: " + riskLevel, Logger.caution);

                    utils.SuspendProcess(processId);

                    if (isSuspiciousPath)
                    {
                        if (!Program.ScanOnly)
                        {
                            try
                            {
                                string rnd = utils.GetRndString();
                                string NewFilePath = Path.Combine(Path.GetDirectoryName(p.MainModule.FileName), $"{Path.GetFileNameWithoutExtension(p.MainModule.FileName)}{rnd}.exe");
                                File.Move(p.MainModule.FileName, NewFilePath); //Rename malicious file
                                Logger.WriteLog($"\t[+] File renamed to {Path.GetFileNameWithoutExtension(p.MainModule.FileName)}{rnd}.exe", Logger.success);

                                utils.SaveRenamedFileData(new utils.RenamedFileInfo()
                                {
                                    _ProcessId = p.Id,
                                    _NewFilePath = NewFilePath
                                });

                                suspFls_path.Add(NewFilePath);
                            }
                            catch (Exception e)
                            {
                                Logger.WriteLog($"\t[x] Cannot rename file: {e.Message}", Logger.error);
                            }
                        }

                    }

                    mlwrPids.Add(processId);
                }
            }

            procs.Clear();
            if (renamedFilesInfo.Count > 0)
            {
                renamedFilesInfo.Clear();
            }
            utils.RemoveRenamedFilesData();
            obfStr8 = null;
        }
        public void StaticScan()
        {
            utils.InitPrivileges();

            Logger.WriteLog("\t\tScanning directories...", Logger.head, false);

            List<string> obfStr5 = new List<string>() {
Program.drive_letter + Bfs.Create("V7paKRBmFk3vwSpKPa/mmBO094RNnoWMIdmDKu6F0U4=",
            new byte[] {0x76,0x3d,0x5a,0xb7,0x76,0x53,0x51,0x75,0xe7,0xc8,0x27,0xaa,0x82,0x20,0x70,0x92,0x6e,0x50,0xf5,0x3e,0x85,0x9d,0x00,0x18,0x43,0xbc,0x9b,0xbb,0x76,0xc0,0x5a,0xbb},
            new byte[] {0x19,0xc5,0x12,0xa0,0x33,0xdb,0x0b,0x87,0x21,0x78,0x4a,0x10,0xe2,0x9a,0x78,0xf2}), //:\ProgramData\360safe
Program.drive_letter + Bfs.Create("A5bsvhzZgzs9C7JTswSuglKc+17iGG1s5Tu5dzEDgkk=",
            new byte[] {0x3e,0x29,0xb5,0x8d,0x2c,0x1a,0xbf,0x7f,0xae,0x30,0xe3,0xe9,0xac,0x2b,0x11,0x4f,0xf0,0x77,0xbd,0x7f,0xfc,0x44,0x1f,0x99,0x45,0x1c,0x70,0xe4,0xf7,0xa3,0x45,0xc5},
            new byte[] {0xee,0x46,0x65,0xb7,0xcd,0xc5,0x18,0x7d,0xb5,0x26,0xc1,0x4d,0x98,0x5e,0xaa,0xb9}), //:\ProgramData\AVAST Software
Program.drive_letter + Bfs.Create("iOC3nE2byUrWKSjtgCn3mOW0nY6Y9Kyz3ySdi5YwnkA=",
            new byte[] {0xa4,0x0c,0x3a,0x14,0x32,0x78,0x86,0xf6,0x82,0x0b,0x48,0xe5,0x1d,0x0f,0x06,0xdd,0xb9,0x0a,0x5b,0xc9,0xaa,0xa5,0xf4,0x1b,0xdc,0xd8,0x6a,0x5d,0x33,0x5b,0x3d,0xad},
            new byte[] {0xb3,0x7d,0x5e,0x66,0x40,0xd4,0xee,0xde,0xde,0x2f,0x9a,0xbe,0x58,0x8a,0x16,0xc3}), //:\ProgramData\Avira
Program.drive_letter + Bfs.Create("6Oy9aBe8REpg1WnmdL4SKDns48z3QQox2VqZRVsJGCI=",
            new byte[] {0xa5,0x99,0x4d,0x2f,0x94,0x8d,0xbb,0x84,0x89,0x3e,0x85,0x42,0x0c,0xde,0x31,0xb7,0x01,0x54,0x1a,0xe3,0x20,0x31,0xd8,0x3b,0x4e,0xd7,0x80,0xef,0x3e,0x7f,0xd8,0x6f},
            new byte[] {0x48,0xe9,0xd2,0x33,0xf8,0xe5,0x0f,0x50,0x0b,0x63,0xe3,0x19,0x07,0x2e,0x48,0xf8}), //:\ProgramData\BookManager
Program.drive_letter + Bfs.Create("6KHJ6UfbWIrN5IuzgKHr+rQ3xAq9fDBcI6qcFMkvkFY=",
            new byte[] {0x2f,0x51,0xd2,0x25,0xd0,0x70,0xec,0xf4,0x6e,0x2b,0x09,0xc4,0x10,0xce,0xdb,0x40,0xa1,0x5b,0x03,0x31,0x7c,0x3e,0xcc,0xf5,0xb8,0x97,0x6f,0x8b,0xb0,0xf8,0xd9,0xeb},
            new byte[] {0xa9,0x6c,0xae,0x19,0x2d,0x88,0x34,0x29,0x42,0x65,0x4a,0xd0,0xd7,0xca,0x16,0xe9}), //:\ProgramData\Doctor Web
Program.drive_letter + Bfs.Create("K9Zqj5Siku0jBZjIVyuQeY3SI9TfN+XdLd/Dfm161v8=",
            new byte[] {0x3f,0x72,0xdf,0xc8,0x36,0xba,0xb9,0x7f,0xca,0x57,0xf3,0xe2,0x66,0xe0,0x10,0x6c,0xc0,0x3c,0x5f,0x28,0x05,0x90,0x2a,0xb5,0xc2,0x2b,0xca,0x17,0xa5,0xaf,0xab,0x83},
            new byte[] {0x3d,0x43,0x05,0x78,0xa8,0xd3,0xd6,0x26,0xa2,0xf8,0xcf,0xd4,0x91,0xce,0xb9,0x01}), //:\ProgramData\ESET
Program.drive_letter + Bfs.Create("XMZPSqFtduT6MiQ39tIV2/t1CTaKrHzTbMm2FqQymeo=",
            new byte[] {0xbc,0x94,0x74,0x27,0x0b,0x8c,0x70,0x0a,0xde,0x71,0x7d,0x15,0x22,0x2e,0x13,0x24,0x50,0x83,0xe9,0xbe,0xcf,0xdc,0xaf,0x58,0x18,0x5b,0xaf,0xf2,0x2c,0xa9,0x07,0xec},
            new byte[] {0xbc,0xfe,0xd5,0x8e,0x4f,0xd4,0xee,0x17,0xe9,0x1e,0xff,0xa0,0x13,0x19,0x04,0xe2}), //:\ProgramData\Evernote
Program.drive_letter + Bfs.Create("Oa/pUzDoqoToCfn7HNNdFWOFFgL9LWzWJJpAjxb1F2A=",
            new byte[] {0x48,0xb0,0xa2,0x08,0x2a,0xdd,0x97,0x0f,0xad,0x4d,0x66,0x0c,0x17,0x74,0x48,0x34,0x1f,0x54,0xf2,0xbd,0xaf,0xb7,0x78,0xbe,0x23,0x9c,0x03,0x3b,0x76,0xd8,0x71,0xa4},
            new byte[] {0x8d,0x48,0x78,0xb9,0x81,0x94,0x33,0x73,0x36,0xff,0xb2,0x93,0xbb,0xe7,0x3b,0x84}), //:\ProgramData\FingerPrint
Program.drive_letter + Bfs.Create("Z6+AP0VqrGELZ18/Jn9MVnbXSDHzgYCez1P+MJoMe88=",
            new byte[] {0x2c,0x50,0xba,0xf4,0x4d,0xcb,0xde,0x32,0xba,0x6b,0xe4,0xde,0xcb,0x67,0x71,0x3b,0x2a,0x91,0x36,0x1c,0x33,0xad,0x70,0xff,0xcd,0x5f,0x44,0xed,0xca,0x12,0x8c,0xb1},
            new byte[] {0xd9,0xe7,0xee,0xc4,0xb8,0x0e,0xc6,0x94,0x22,0x76,0x0d,0xa9,0x21,0xc0,0x3c,0xd3}), //:\ProgramData\Kaspersky Lab
Program.drive_letter + Bfs.Create("TeFGQt4mABlyxReIe8gMxPS3BMmJH1UXJDDz5oaYb+KW9LPd7KKzW3MuuWZqebox",
            new byte[] {0x72,0x4c,0x55,0x3b,0x1c,0x2c,0x2a,0x58,0x83,0x14,0x24,0x76,0x5a,0x8d,0x15,0x07,0x19,0x0d,0x5a,0xa8,0xd5,0xf9,0xa7,0x26,0xd5,0xe0,0x4b,0x32,0xb1,0xb4,0xbf,0x2d},
            new byte[] {0xe6,0x92,0x5e,0x95,0x6b,0xe7,0xdb,0xcd,0xbb,0x65,0xa8,0x3f,0x88,0xea,0xd8,0x6f}), //:\ProgramData\Kaspersky Lab Setup Files
Program.drive_letter + Bfs.Create("Ly0sOTIM5X76KjcPbgFFsit8JkXCRzKnfnhNT685juc=",
            new byte[] {0x2d,0xb7,0xe8,0x4e,0x8b,0x1f,0x70,0xce,0xd9,0x5a,0xce,0xe3,0x81,0x21,0x0b,0xe1,0x87,0x2b,0x9b,0xc4,0xca,0x61,0xe4,0xa3,0x66,0x08,0x30,0x70,0xa3,0xd2,0x80,0xcc},
            new byte[] {0xea,0x82,0x0e,0xad,0xef,0x5c,0x8d,0xe0,0x69,0xde,0xfe,0x78,0xc8,0xd5,0x67,0x49}), //:\ProgramData\MB3Install
Program.drive_letter + Bfs.Create("tdxwB5+PKJrWCiEWfqCNSW+5yGT0uGqWALc936m21Vg=",
            new byte[] {0x5d,0xfa,0x2d,0x6d,0x51,0x5a,0x95,0x05,0xcb,0xb8,0x37,0xa5,0xb0,0x4b,0xca,0xbf,0x66,0x8d,0x26,0xe9,0x09,0x67,0x11,0x21,0xa5,0xb0,0xcd,0x86,0x86,0x97,0xed,0xdd},
            new byte[] {0x9e,0xe5,0xed,0x43,0x07,0x18,0x1d,0xed,0x77,0xf7,0x93,0xa3,0xd3,0xe0,0x9e,0xd5}), //:\ProgramData\Malwarebytes
Program.drive_letter + Bfs.Create("etVwdP8ppeDqBAQe06+45QN8CULmARNLanyXiC1xPZY=",
            new byte[] {0x6f,0x9c,0x55,0xf2,0xcd,0x48,0xae,0x95,0xb1,0x1b,0x9b,0xb9,0x12,0x9a,0x71,0x7b,0xac,0x02,0xdf,0x69,0x64,0x53,0x2d,0xe2,0x2c,0x8f,0xe5,0x08,0xdb,0xe9,0x05,0xbd},
            new byte[] {0xb5,0x69,0x65,0x3a,0x15,0xe8,0x86,0xd4,0xd9,0xbe,0x73,0xaf,0x72,0xab,0x09,0x8b}), //:\ProgramData\McAfee
Program.drive_letter + Bfs.Create("w42ZQGj1KkYIhLDxYH97zFTOSG6+iU+JYencI11/axk=",
            new byte[] {0x77,0x82,0x84,0x96,0x46,0x48,0x2c,0x10,0x4d,0x54,0xe5,0xa5,0x0e,0x7a,0x61,0xad,0xf0,0xc1,0xf6,0x6c,0xc5,0x9d,0x22,0x4d,0x8e,0x06,0x7a,0x0d,0xef,0x35,0xad,0xcc},
            new byte[] {0xab,0x30,0xeb,0xcf,0xa2,0x53,0xdc,0x21,0x9d,0x02,0x0b,0xf2,0x59,0x6f,0xcc,0x1a}), //:\ProgramData\Norton
Program.drive_letter + Bfs.Create("9P9nrgslKhjgdbylKnAKXh8/A9nyeIgtSBdd1c+eVbg=",
            new byte[] {0x0b,0xf5,0x5d,0x07,0x2c,0xce,0x40,0x23,0x9f,0x71,0xf8,0x3f,0xa2,0xf5,0x45,0xca,0x94,0xba,0xa6,0xed,0xe4,0x7d,0x64,0x16,0xfc,0xb5,0x77,0x69,0xbe,0x63,0x93,0x73},
            new byte[] {0x04,0x1d,0x7e,0xaa,0xa7,0x50,0x55,0xc8,0x73,0x5d,0x05,0x9f,0x4d,0xd9,0x56,0x3d}), //:\ProgramData\grizzly
Program.drive_letter + Bfs.Create("bFmt+3D9xgSuNkpEEauEHhWWemsD+UglzsUE37Ph9/uPgKF4gtMip8V3ua8nxHCt",
            new byte[] {0x49,0x89,0x06,0xae,0x4e,0xef,0x32,0xf0,0x35,0xac,0xd8,0x7e,0x70,0x1c,0xc1,0x1a,0xa6,0xa0,0x94,0x98,0xb7,0xfd,0x86,0x71,0xd2,0x7d,0xc8,0x5a,0xb8,0x5c,0xe2,0x75},
            new byte[] {0x9e,0x42,0xd7,0x01,0x5d,0x0a,0xf6,0x1a,0x9e,0x3b,0x33,0xb4,0x29,0xe8,0xcc,0xca}), //:\Program Files (x86)\Microsoft JDX
Program.drive_letter + Bfs.Create("fs1mvaOeeOKVtbQeObc5pqrkENQMQrEryO16P8JaMyQ=",
            new byte[] {0xed,0x67,0x23,0x54,0x2b,0xa0,0xa8,0xd2,0x81,0x86,0x2b,0xcc,0xb7,0x3e,0x4b,0x06,0xfe,0x87,0x75,0x7e,0xf2,0xa3,0x39,0xd7,0xaf,0xbd,0x23,0x58,0x1f,0x80,0xa0,0x03},
            new byte[] {0xbb,0x49,0xe7,0xd6,0xab,0x94,0xce,0xf1,0xee,0x0e,0x5a,0xc4,0x21,0x55,0xe4,0x23}), //:\Program Files (x86)\360
Program.drive_letter + Bfs.Create("N+lQIi9YLKyu6ajvq15aNgR5Eiv3FPDGN0AL5y02BhY=",
            new byte[] {0xef,0xb4,0x66,0xcc,0xf7,0xef,0x0d,0xf3,0x0d,0x48,0x0c,0xf8,0x22,0xde,0xde,0x4a,0x48,0x19,0x3a,0x98,0x23,0x6b,0xde,0x66,0xe0,0xf2,0x7f,0xf2,0xef,0xce,0xe1,0xc3},
            new byte[] {0x5a,0x84,0x69,0x92,0x21,0x19,0x56,0xb3,0xc2,0x9f,0x59,0xa8,0x88,0xa8,0x2b,0x60}), //:\Program Files (x86)\SpyHunter
Program.drive_letter + Bfs.Create("Ugm6hTucElx1JLC2OiEmVnuTPlNnjzNdzVjcyV2xqx1TZodRLqgjGvQpiH7uYnEl",
            new byte[] {0x94,0x70,0x7e,0xbb,0xa5,0xc2,0xb7,0xee,0xea,0x85,0xec,0x40,0x00,0x39,0x51,0x39,0xf9,0x6f,0x63,0x34,0x98,0xd4,0x4b,0x0c,0xfd,0x58,0xf2,0x1a,0xa1,0xc8,0x14,0x40},
            new byte[] {0x23,0xc7,0x41,0xee,0xea,0xe9,0x0e,0x3b,0x6d,0x9e,0x0f,0x09,0x3e,0xaf,0x82,0x04}), //:\Program Files (x86)\AVAST Software
Program.drive_letter + Bfs.Create("ycjQ89nNDFTLoK6bZvtOoIIupPA1KJ4WHXT4nGvFhZc=",
            new byte[] {0xcd,0x52,0x51,0x8b,0x99,0x7c,0x78,0x67,0xd4,0x45,0x02,0xba,0x17,0xf8,0x22,0xe2,0x22,0x8c,0x8b,0xf3,0xfe,0x22,0xa7,0xfb,0x21,0x7f,0xc9,0xe8,0xfb,0x9c,0x05,0xb2},
            new byte[] {0x07,0x38,0xf1,0xd7,0xbd,0x1f,0xb8,0x2c,0x33,0x3f,0x06,0x24,0x0c,0xca,0xb1,0xb3}), //:\Program Files (x86)\AVG
Program.drive_letter + Bfs.Create("n8GpnB9WAe7Q2zv4msruzYuyeq/JR2j9vhe9VxpmVb4O6Ebj3sELcVzOg+5qRA1g",
            new byte[] {0xff,0xfc,0x57,0x60,0x09,0x88,0x3e,0x25,0xc3,0xc6,0xaf,0xc7,0x8e,0xc2,0x90,0x13,0xd2,0x41,0x63,0x85,0xc1,0xc9,0xc9,0x34,0x7c,0xae,0x78,0xe7,0xf5,0xf4,0x1e,0x9a},
            new byte[] {0xe2,0xf5,0xad,0x58,0xae,0xa2,0xd1,0xf4,0x19,0xec,0x70,0xfa,0xd8,0x70,0xc9,0x18}), //:\Program Files (x86)\Kaspersky Lab
Program.drive_letter + Bfs.Create("a7t+30QOX12pcXRtwNoU7LVPEo/GLGRKq8f0sz1mib0=",
            new byte[] {0x62,0xfc,0xba,0x34,0x55,0x49,0x39,0x28,0xae,0x1d,0x9b,0x0e,0xa0,0x0a,0x9d,0x99,0x13,0x20,0x83,0x49,0x76,0xa6,0x90,0x0d,0x5d,0x80,0x9d,0xd3,0x84,0x05,0xff,0xa5},
            new byte[] {0x4c,0x45,0xbb,0xab,0xfe,0x91,0xe9,0xf0,0x1b,0xee,0x72,0x76,0x05,0x37,0xa2,0xc2}), //:\Program Files (x86)\Cezurity
Program.drive_letter + Bfs.Create("8I2xBp6UwXWx0Bcz+ahRoqhQ/n8gNCcsOgOzbMahE5J2lKyOM+iTxxuIp4swqyoR",
            new byte[] {0x4e,0x91,0x01,0x01,0xcc,0x7b,0x82,0xbd,0x5a,0xa7,0x84,0xe7,0x54,0x86,0xb3,0x35,0x96,0xfa,0xba,0xd9,0xe5,0xec,0x13,0x81,0xfc,0xea,0x1e,0x45,0x96,0x38,0x1a,0x9a},
            new byte[] {0xca,0xe3,0xd7,0x58,0x75,0xb5,0x61,0x11,0x40,0x59,0x01,0xc3,0xb1,0x2c,0xd3,0xa6}), //:\Program Files (x86)\GRIZZLY Antivirus
Program.drive_letter + Bfs.Create("zydvC0ITCh7M/jQvsbqRZj8XezqoFCshCVxTj8rL8XjFbXO1MwPQR3+JHZd8+MMd",
            new byte[] {0xa5,0x59,0x8a,0xf6,0x5b,0x92,0xbc,0x24,0xd5,0x8d,0x28,0x0a,0xfe,0x5b,0xb3,0xd4,0xbb,0x39,0x6c,0xa3,0x5e,0x7d,0x1b,0xac,0x8e,0xd2,0xd8,0x99,0xda,0x3d,0xa7,0x8b},
            new byte[] {0xed,0xab,0x47,0xdd,0x87,0x69,0x59,0xa7,0xc5,0x30,0x77,0x07,0x6e,0xc4,0xb4,0x1a}), //:\Program Files (x86)\Panda Security
Program.drive_letter + Bfs.Create("EdVsDFR40ZPHh+h23L9CHhkNhviy9Q7OUjcxerCqZjq1ZJfcU2LourHeCaLPI+Nv",
            new byte[] {0xef,0x5f,0xd8,0x52,0x58,0x8d,0x17,0x09,0x54,0xd4,0x16,0x0a,0xbf,0xf9,0x40,0x16,0xee,0x5d,0x49,0xd5,0x46,0xea,0xec,0x7c,0x75,0xf7,0x88,0x56,0x3b,0x12,0xca,0x10},
            new byte[] {0x4d,0x9a,0x65,0x65,0xe6,0xe8,0x94,0x35,0xef,0x14,0xf7,0x08,0x60,0x27,0xbd,0x13}), //:\Program Files (x86)\IObit\Advanced SystemCare
Program.drive_letter + Bfs.Create("zTquoj911TrnLDwvpep4WWv69rIG31zbFmJsIC53rMfFwPY9o0K2AvWNbpvIObBQpYbxCilthnU4wGfRP3RxWA==",
            new byte[] {0x13,0xe6,0x26,0x8c,0xe9,0xa4,0xd0,0x9c,0xf9,0xff,0x53,0xe1,0x94,0xed,0xe1,0x9e,0xe0,0x5c,0x63,0x03,0x73,0x40,0x9d,0x2e,0x83,0xab,0x3c,0x8e,0xc6,0xb7,0x5e,0x4f},
            new byte[] {0x51,0x39,0xcd,0x01,0xc7,0xb8,0x11,0xbc,0xd4,0x39,0x58,0xed,0xff,0x37,0xf0,0x72}), //:\Program Files (x86)\IObit\IObit Malware Fighter
Program.drive_letter + Bfs.Create("QyV9xwGYhqLSxKaBM/T/aodECjgWvfNxZ099ttq57bY=",
            new byte[] {0x8b,0x75,0x7a,0x44,0x0b,0x7c,0x08,0xfc,0xa4,0x2a,0xe4,0xc9,0x30,0xea,0x82,0xda,0xf9,0x42,0x57,0x2f,0xda,0x70,0x0f,0xce,0xc2,0x7b,0x07,0xac,0x66,0x8b,0xad,0x60},
            new byte[] {0x26,0x45,0xe9,0x89,0xad,0x4a,0xd3,0x9d,0x4e,0x05,0x14,0xda,0x9e,0x2e,0x98,0x59}), //:\Program Files (x86)\IObit
Program.drive_letter + Bfs.Create("dkv3DMZTSLtdPk6IMqfy+/gPeQDLej/uferaoxYne2k=",
            new byte[] {0x2e,0x1f,0xb9,0x99,0xc0,0xaa,0x16,0xd4,0xd1,0x66,0xd8,0xf4,0xb5,0xd9,0x37,0xa9,0x7e,0xc4,0x6c,0xb9,0xc1,0xfd,0x9d,0xcf,0x11,0x96,0x51,0x51,0xae,0xd7,0xc3,0x24},
            new byte[] {0x5a,0x63,0xed,0x9b,0x3c,0x77,0x12,0x02,0xe0,0xcd,0x7c,0x28,0x55,0xd5,0xeb,0x66}), //:\Program Files (x86)\Moo0
Program.drive_letter + Bfs.Create("cyQAc9s+AJDkeOa39+mrNupaGIzbSvD5VNDZ+06H3brO2C/qduaK/+cN9/uVs1E7",
            new byte[] {0x40,0x77,0x98,0x81,0xde,0x12,0x87,0x31,0xea,0xce,0x3e,0x15,0xc3,0xa0,0x56,0x34,0xdd,0xf6,0x94,0x8a,0x19,0x01,0x76,0x48,0x6e,0x6b,0x07,0x65,0x14,0xcb,0x7a,0x91},
            new byte[] {0xe4,0x66,0x1c,0x78,0xa3,0x54,0x53,0x2e,0x3f,0xfd,0x0d,0xd8,0x54,0xff,0x95,0xb0}), //:\Program Files (x86)\MSI\MSI Center
Program.drive_letter + Bfs.Create("tDUiSpKYcMA9nu76s6g65u+h61TjkJEhMgvt7GnvQ8c=",
            new byte[] {0xe9,0x64,0xa5,0x64,0xce,0xa8,0x1a,0x81,0xf5,0x34,0x9f,0xec,0x5b,0x0f,0x33,0x50,0x01,0x56,0x95,0x88,0xe0,0x23,0xfd,0x52,0xe7,0xe7,0xf6,0x4f,0xc2,0x6e,0xe4,0x55},
            new byte[] {0x7b,0xcf,0x95,0xd6,0xb4,0xe5,0x6c,0xc0,0x9d,0x5d,0x09,0x36,0x02,0x15,0x8b,0x0d}), //:\Program Files (x86)\SpeedFan
Program.drive_letter + Bfs.Create("iIae/tMarDGQngKkg6SUS61rtaEz4bWaoqCjs21fu0g=",
            new byte[] {0xa0,0x05,0x97,0xc2,0x63,0xa4,0xe9,0x87,0x24,0xde,0x95,0x07,0x4d,0x14,0x97,0xf5,0x00,0x0f,0x26,0xfd,0x7a,0x18,0x50,0x93,0x4b,0x9f,0xd8,0x87,0x64,0xf1,0x91,0xcd},
            new byte[] {0x28,0xf5,0x3b,0x19,0xb8,0xbf,0x8b,0x4d,0x72,0x83,0x30,0x35,0xda,0x37,0xd6,0xaa}), //:\Program Files (x86)\GPU Temp
Program.drive_letter + Bfs.Create("Uby2Ma/Ydjmhiybn+1rtCxu8mAMzz115YVNQDzBSdT8=",
            new byte[] {0x9f,0x40,0x32,0x72,0x13,0x00,0x65,0x87,0x53,0x1c,0xd2,0x85,0xb2,0xce,0xaa,0xf5,0x53,0xf1,0xf5,0x01,0x8c,0x9b,0xe8,0x3f,0x6e,0xe1,0x56,0xd8,0x97,0x4a,0x82,0xe9},
            new byte[] {0x2a,0x60,0x64,0x0b,0xd8,0xbc,0x11,0x01,0xc6,0xfa,0x09,0x69,0x79,0x68,0xd9,0xef}), //:\Program Files\AVAST Software
Program.drive_letter + Bfs.Create("jeGUu+c1Bqw1dbsEPfUBwu+ZXJoSMXcuy110R/U1D6s=",
            new byte[] {0xf1,0xaa,0xde,0xac,0xee,0x50,0x23,0xcf,0x04,0x61,0x47,0x70,0xe4,0x76,0xf4,0xe1,0xb3,0x30,0x89,0xf8,0x77,0xa0,0x5c,0x8e,0x8c,0xe6,0x41,0x52,0x68,0x65,0x31,0x94},
            new byte[] {0x5e,0x3d,0xb1,0xa3,0x91,0x6c,0x76,0x5d,0xbf,0xc7,0xbb,0x57,0xdd,0x91,0x8a,0x9f}), //:\Program Files\CPUID\HWMonitor
Program.drive_letter + Bfs.Create("K5rAMGww+3d2F4F5dpc+JvdmTfsmpVros2GSvAr1094=",
            new byte[] {0xb4,0xac,0xf7,0x4d,0xc2,0x5d,0xf1,0x82,0xa1,0x45,0xd6,0x86,0x28,0x80,0x6b,0x5d,0xaa,0xa3,0x93,0x7f,0xa2,0xc6,0xb0,0x6e,0x02,0x98,0xa8,0xa0,0x94,0xa9,0xc7,0xce},
            new byte[] {0xb8,0xa8,0x31,0xed,0x44,0xe9,0x83,0xfb,0x95,0xf9,0xdb,0x1d,0x0f,0x0a,0xf8,0xff}), //:\Program Files\AVG
Program.drive_letter + Bfs.Create("++KkMlI16puBIwwp+gm9zKe0KUqo20jb1LpIYbbcm7g2G4WHNdRrh747czJhAkx4",
            new byte[] {0x36,0x6c,0x20,0x6f,0x4c,0x47,0xab,0xd9,0x47,0x8f,0x5f,0xe4,0x74,0x02,0xca,0x4f,0x95,0xba,0x02,0xcf,0xa8,0x77,0x4c,0xff,0x76,0x12,0x22,0xa6,0xf2,0xdc,0x3e,0x96},
            new byte[] {0x9d,0x22,0x21,0xe6,0x09,0xce,0xa2,0x5e,0xde,0x87,0xca,0xe0,0x57,0xc7,0x30,0xb8}), //:\Program Files\Bitdefender Agent
Program.drive_letter + Bfs.Create("LbNB02qnXKw1Xo5jnNZuIK2ydUcPrBRejjpYWaINw+g=",
            new byte[] {0xd6,0x0a,0xe2,0xd5,0x5b,0xeb,0x3d,0x5d,0xc2,0x53,0x18,0x8b,0x20,0xa5,0x6b,0xc9,0x38,0x3b,0x83,0x82,0x94,0xc5,0x14,0x67,0xdb,0x57,0xed,0xca,0x44,0x8b,0xaf,0x90},
            new byte[] {0xe4,0x3d,0x84,0xa4,0xa0,0x2b,0x6c,0xad,0x34,0xef,0xe3,0xe6,0xd2,0xb5,0x5c,0x81}), //:\Program Files\ByteFence
Program.drive_letter + Bfs.Create("8DONfShvaYPBORjE8NSr9YbXbthHWE4lnxZUkjzrm8c=",
            new byte[] {0xcb,0xbd,0x11,0xed,0xcf,0x96,0x49,0x40,0x9a,0x7d,0x11,0xa5,0x7f,0xc3,0x1a,0x42,0xcd,0xa9,0x96,0x0e,0x7e,0xe9,0xa4,0xb5,0xe0,0xf4,0x12,0x27,0x77,0x8f,0xdf,0x61},
            new byte[] {0x2e,0xe5,0x8c,0xa2,0x70,0xd7,0x9f,0x05,0x13,0xbd,0x5c,0x9c,0xa1,0x86,0x4d,0x52}), //:\Program Files\COMODO
Program.drive_letter + Bfs.Create("XUTCGGGTp9zxzAhAYKtHSiaSKAfZNGjoiizZpNSv/YQ=",
            new byte[] {0x3e,0xa5,0xd1,0xa3,0xc7,0xd9,0x34,0x1c,0x32,0x53,0x47,0x66,0xca,0xb1,0xd7,0xed,0xa7,0x8c,0x31,0xd5,0x14,0xb8,0x51,0x1b,0x2d,0x0a,0xc7,0xc4,0xbd,0xf1,0x81,0x71},
            new byte[] {0x3f,0x27,0x17,0x73,0x20,0x51,0x42,0xd6,0xac,0x9b,0xab,0xb8,0xe7,0xeb,0xa2,0x16}), //:\Program Files\Cezurity
Program.drive_letter + Bfs.Create("HnHTGpJzNjRne2/Pj8MW3UaoeswSJUa9IkzTaMR2uAk=",
            new byte[] {0x38,0x53,0xb9,0xd2,0xd6,0x71,0x23,0x69,0xad,0x72,0x59,0xe6,0x2e,0x7c,0xfc,0xc9,0xc9,0x7f,0x08,0x71,0x55,0x5f,0xaa,0xb3,0x69,0x34,0x8b,0xbc,0x8d,0x4a,0xb4,0xd1},
            new byte[] {0xb8,0xd8,0x60,0x59,0xde,0x57,0xee,0xf4,0x40,0x6f,0xaf,0x79,0x1a,0x9b,0x4e,0x09}), //:\Program Files\Common Files\AV
Program.drive_letter + Bfs.Create("4br/WAnjreP8Ol3jLcN5Ze23tmNvmIwI8caZbfG2hzWwc1xvcsfhZ2uXdx1jkP5n",
            new byte[] {0x4a,0xe0,0xc1,0x91,0x01,0xc2,0xa3,0xa0,0x25,0x57,0x7f,0x50,0x74,0x26,0x0e,0x15,0x0f,0x10,0xb8,0x7e,0xac,0xae,0x23,0xb9,0x40,0x80,0xd1,0x88,0x21,0xe8,0x5a,0x40},
            new byte[] {0xc3,0xd0,0x69,0x6c,0xc9,0x64,0x0a,0xb0,0x45,0x94,0x0b,0x74,0x92,0xa2,0xcf,0x9d}), //:\Program Files\Common Files\Doctor Web
Program.drive_letter + Bfs.Create("5cvf0UUWZWauatE8t3/kySMKcg/hxxNzloHX9p6vWrkxHsgHKwo+ixfcPDdEPGLt",
            new byte[] {0xfb,0xbb,0x68,0xba,0xd0,0x6e,0x08,0xb7,0x4c,0x20,0xd6,0xde,0x32,0x01,0x15,0xcb,0x0e,0x11,0x6e,0x30,0x7b,0x92,0x41,0x93,0x04,0x41,0x0d,0xce,0xa0,0x50,0xb8,0xfe},
            new byte[] {0x14,0x82,0x47,0x10,0x77,0x25,0x52,0x57,0x58,0x43,0xad,0x75,0xe0,0xc9,0x65,0x3d}), //:\Program Files\Common Files\McAfee
Program.drive_letter + Bfs.Create("BDQv910HQt9fRNBaIrsQk2hHymIZaq8VYp+fW83eUjo=",
            new byte[] {0x09,0xf8,0x34,0x0b,0x82,0xb0,0x3b,0x3f,0x9f,0x50,0xf4,0x7d,0xeb,0x4d,0x1c,0xa9,0x02,0x1f,0xa8,0x93,0xd9,0x5d,0x28,0xe9,0x69,0x2f,0x69,0x88,0xc6,0x54,0x54,0x87},
            new byte[] {0x6e,0x4e,0x3d,0xe9,0x2c,0x3a,0x51,0x8f,0xca,0x24,0x45,0xba,0x13,0x99,0x81,0xd2}), //:\Program Files\DrWeb
Program.drive_letter + Bfs.Create("d8Ghzp8j2WUokuhiiPsf3xNy/xbepNaiiZn7NFNyIj4=",
            new byte[] {0x7c,0xdb,0x0f,0xc2,0xc2,0xca,0x82,0x0c,0xee,0xdf,0x10,0x4c,0xdc,0xb4,0x8f,0xa9,0x7f,0x70,0x9c,0xa2,0xc2,0xca,0x83,0x11,0x01,0x7a,0xf0,0xfb,0xe8,0x5c,0x1a,0xfd},
            new byte[] {0x60,0x04,0x70,0x72,0x6c,0x65,0xeb,0xf8,0x12,0x16,0x8c,0xf9,0x84,0x63,0xe3,0x6e}), //:\Program Files\ESET
Program.drive_letter + Bfs.Create("WeVtL6+qLH7x7DST2r+zE4zUn4fhRmM6m2lVqXfpjttISiqSZNaPM7h50r0SO8fi",
            new byte[] {0x50,0x6e,0xcf,0x5d,0xdc,0x5e,0xc4,0x35,0xfd,0x44,0x6f,0xff,0x26,0x51,0x2b,0xae,0x35,0xc2,0xb1,0x9e,0x4f,0x74,0x77,0x99,0x22,0x10,0x97,0x1a,0x74,0xce,0x0f,0x77},
            new byte[] {0xf7,0xcc,0x9f,0x3b,0xe3,0x4a,0xe0,0x3d,0xc8,0x2f,0xcb,0xf5,0xdb,0x3a,0x3a,0xd6}), //:\Program Files\Enigma Software Group
Program.drive_letter + Bfs.Create("XLnA8ivNOjknJag8ljFPzDEOcLBR1woAtdD4x7DiLRA=",
            new byte[] {0xae,0xfc,0x82,0xf5,0xbe,0xcc,0xba,0x49,0xd2,0x19,0x78,0xbe,0x1d,0x5e,0x49,0x61,0x4d,0x75,0x27,0x94,0x7b,0x6a,0xba,0x7d,0xfc,0x98,0x81,0xd7,0x94,0x3e,0x97,0xf1},
            new byte[] {0x85,0xa4,0x9f,0xbb,0x91,0xc7,0x16,0x3c,0x63,0x7b,0x82,0x6e,0x8e,0x9d,0x62,0xfe}), //:\Program Files\EnigmaSoft
Program.drive_letter + Bfs.Create("H1gX1sKuVrn+OikrY0L6aXfPYrKZRYBuLcNeekp/zpQ=",
            new byte[] {0x2b,0x43,0x68,0xd8,0x31,0xa7,0xe6,0x2e,0x67,0x55,0x8e,0x2c,0x23,0xca,0x3d,0xc4,0xb5,0xca,0x2d,0x2f,0xd8,0xce,0xa2,0x6a,0xe2,0xe9,0x62,0x89,0xeb,0xcb,0x70,0xde},
            new byte[] {0xdb,0xa6,0x21,0x4f,0xd4,0x05,0x4c,0x08,0x57,0xf2,0x17,0x12,0x03,0x32,0xc7,0x86}), //:\Program Files\Kaspersky Lab
Program.drive_letter + Bfs.Create("ahtN27MVLIXA5Oynko0tIUliMXBiuWujRcbt+IAmAodqnDp7XQ/OKIpLmSkNqWGi",
            new byte[] {0x7f,0xa6,0x1b,0x18,0x0e,0x1e,0x7c,0xc4,0x94,0x07,0xda,0x8d,0xd9,0xbd,0x9f,0xa1,0xd0,0xdf,0xee,0xcb,0xd2,0xa4,0x5f,0x42,0xb2,0xe7,0x67,0x01,0xb6,0xff,0xb7,0x3b},
            new byte[] {0xc0,0x7e,0xca,0x0d,0x13,0x49,0x22,0x8e,0x73,0xac,0x4b,0x7a,0xb4,0xf6,0xdf,0xd2}), //:\Program Files\Loaris Trojan Remover
Program.drive_letter + Bfs.Create("bTlGmSaLs8BqIkdl6P+EeCnZhzHi7ndPjILsrMrk9KQ=",
            new byte[] {0x4c,0x3b,0x07,0x01,0xd0,0xfb,0x8e,0xaa,0x63,0x35,0xd6,0xad,0x7f,0x28,0xd0,0x5f,0xcb,0xc4,0xc8,0x20,0xfd,0x4f,0x95,0x27,0x31,0xd0,0x6c,0x1c,0x1a,0xee,0x8b,0xd1},
            new byte[] {0x99,0xfe,0x62,0xfd,0x62,0x53,0xbc,0x23,0x74,0x16,0xb1,0xc9,0x7b,0xc4,0x32,0xa2}), //:\Program Files\Malwarebytes
Program.drive_letter + Bfs.Create("lNgA6k3hKiI9buutd4CxeJw/qFfqK1W2SsBv0S9hGYs=",
            new byte[] {0x40,0xfe,0x56,0x3f,0x63,0x3d,0x1d,0x7d,0xd1,0x81,0x9c,0x91,0x55,0x54,0x1c,0x0e,0x1f,0xd0,0xd0,0xa2,0x73,0x4f,0xe0,0x90,0xb0,0x17,0x8e,0x04,0xd7,0xb2,0x8b,0x4a},
            new byte[] {0x08,0xa6,0x17,0x6d,0xfe,0xf8,0x48,0x7a,0x21,0x49,0xd7,0xf9,0x55,0xd1,0xf9,0x4c}), //:\Program Files\Process Lasso
Program.drive_letter + Bfs.Create("yCKHnTaxVClSh9eS5y2o6wkMgXyux0ZxyFhPQed2xU0=",
            new byte[] {0x84,0xa7,0x65,0x21,0x9e,0x54,0xfb,0x2b,0x31,0x63,0x95,0x6b,0xa9,0x3a,0x71,0x8e,0x28,0x0d,0x99,0x33,0xff,0x01,0x18,0x1e,0x2e,0xcf,0x11,0x01,0xd3,0x4b,0xa7,0x1d},
            new byte[] {0x24,0xb6,0x43,0xfc,0xe4,0x97,0xfd,0x17,0x23,0xef,0x05,0x13,0xbe,0x1d,0x21,0x69}), //:\Program Files\Rainmeter
Program.drive_letter + Bfs.Create("6XXcBOoob2y+6e4z6eQl4fYerPA/twsj21mLYweZB7k=",
            new byte[] {0x8b,0x68,0xfd,0xc5,0xab,0x64,0xff,0x94,0x71,0x50,0x88,0x08,0xd7,0xf0,0xda,0x20,0x0e,0x63,0x95,0x95,0x6a,0x1b,0x33,0xb0,0xfe,0x31,0xcb,0xf1,0x81,0xef,0x7d,0x38},
            new byte[] {0xc6,0x21,0xe1,0xdf,0xbf,0x9b,0x24,0x3b,0xc3,0x44,0x12,0x89,0x4b,0xf3,0x76,0xb1}), //:\Program Files\Ravantivirus
Program.drive_letter + Bfs.Create("ayln0ncyYXB1r2z4Y7kvgv/Z5ng1wSKq9vwdZkGdJ00=",
            new byte[] {0x36,0xa5,0xb3,0x39,0x32,0x9e,0x2c,0x7d,0xb0,0xde,0xe5,0xcd,0x20,0x08,0xa4,0xa5,0xff,0x00,0xab,0x24,0x7a,0x21,0xa5,0x57,0xfe,0x98,0xfe,0xcd,0xf0,0x47,0x0b,0xe8},
            new byte[] {0xec,0x20,0x9a,0xea,0xe7,0x8c,0xe1,0xeb,0x34,0x3f,0x38,0xd1,0xd1,0x09,0x28,0xe8}), //:\Program Files\SpyHunter
Program.drive_letter + Bfs.Create("iv25CfrmfU8QFGG50cv08bCd7e7VCRIK+AcXAwztiUxtHOVY5fUkI9TWt9UAUTeA",
            new byte[] {0x81,0xae,0x40,0xff,0x05,0xb0,0x68,0x45,0x88,0x9f,0xb3,0x38,0x10,0x7f,0x59,0x53,0x8a,0xac,0x0b,0xcc,0xda,0x43,0xef,0xc4,0x33,0xa3,0x6c,0x1c,0x87,0x53,0xd0,0xfa},
            new byte[] {0xe0,0x56,0x4f,0x5a,0x16,0xa0,0x68,0x80,0x22,0xbd,0xd9,0x0a,0x4f,0x7b,0x74,0xea}), //:\Program Files\Process Hacker 2
Program.drive_letter + Bfs.Create("P6IIm0trukgD9joBhE3Xvz5SvpUo3hUZmbAHVPNiYeE=",
            new byte[] {0xe6,0xb2,0x37,0x4f,0x85,0x29,0x3e,0xb0,0xd5,0x0f,0x59,0x1a,0x68,0x8f,0x86,0x16,0xb1,0x58,0xff,0x10,0x7f,0xfe,0xb5,0x48,0xb2,0x63,0x45,0x0d,0x3d,0x6d,0xb0,0x43},
            new byte[] {0x9b,0x6e,0xa6,0x87,0xcf,0xac,0xcf,0xb9,0x7a,0x49,0xf0,0xeb,0xc9,0x93,0x39,0xe8}), //:\Program Files\RogueKiller
Program.drive_letter + Bfs.Create("efJJSShl92QxlOlWhe6W+DpgFDPwTJoHGLXllZIOYXyCOLWywlZ2BjT0D6Wh/Zcz",
            new byte[] {0xa5,0xb8,0x41,0x77,0xe5,0x49,0x01,0xd8,0x68,0x12,0x69,0xef,0xac,0x0b,0xb2,0x0c,0x31,0x97,0xd5,0x2c,0xd1,0x7d,0x86,0x6b,0xd6,0x7d,0xc3,0x58,0x8c,0x73,0x62,0x8e},
            new byte[] {0xc5,0xd3,0x94,0x69,0xb5,0x0b,0xac,0xe0,0x78,0xfa,0x16,0x38,0x24,0x5c,0xb6,0x96}), //:\Program Files\SUPERAntiSpyware
Program.drive_letter + Bfs.Create("Fo464NorTwybz4gXNawKdFKLkbzSw+tdI4BfFG0JA5o=",
            new byte[] {0x31,0x3b,0x79,0x23,0x44,0xda,0xd1,0xd9,0xc8,0xf7,0x5f,0xbe,0x53,0x5b,0xf9,0x84,0x2a,0x97,0x83,0xc7,0x21,0x65,0xbf,0xa0,0xf5,0xd9,0x0a,0x77,0xf8,0xdb,0xe3,0xe3},
            new byte[] {0x96,0x31,0xee,0xff,0x03,0x4e,0x41,0xec,0xcf,0xdb,0x1d,0xdb,0xe5,0x5b,0x19,0x4a}), //:\Program Files\HitmanPro
Program.drive_letter + Bfs.Create("bcZJCGQl0g8Yh4QfGTsTf3luxruEOVgWK98hHJAOzWA=",
            new byte[] {0x26,0x99,0x6a,0x75,0x70,0xd0,0x1f,0x3b,0xe4,0x19,0x09,0x37,0xb1,0x3d,0xdf,0x27,0x5e,0x08,0x62,0x40,0xad,0x94,0x52,0xaa,0xc7,0xd6,0x1b,0x49,0x04,0xd2,0xd9,0x92},
            new byte[] {0xc3,0x8f,0x1f,0x41,0x4b,0x18,0x7b,0xcf,0x83,0xf5,0x4b,0xd4,0x05,0x03,0xef,0x6b}), //:\Program Files\QuickCPU
Program.drive_letter + Bfs.Create("WYhxIjs9OPCt72RXEZ6EfniGE9SZMoGm2xJAUFpc2og=",
            new byte[] {0xcd,0x44,0x6c,0xdb,0xe6,0x44,0x60,0xd7,0xe4,0xe6,0x82,0x76,0xaf,0x45,0x0f,0x97,0x5d,0x44,0xfb,0xe7,0x55,0xd0,0xb1,0xe7,0x4b,0x17,0xc8,0x46,0x13,0x3f,0x5d,0x8f},
            new byte[] {0x2b,0xfc,0xa7,0xe1,0x46,0xad,0x2c,0x95,0x15,0x36,0x79,0x49,0x7c,0xd6,0x1a,0x6c}), //:\Program Files\NETGATE
Program.drive_letter + Bfs.Create("Y3PqT9KmzKchvZJjI0aqSqhIc544GM5kyrxH+KrLWqs=",
            new byte[] {0x67,0xff,0xc6,0x55,0xbc,0x09,0x4b,0xce,0x77,0x8e,0x74,0xe1,0xaf,0x49,0x8a,0x62,0xc5,0xcb,0xc7,0x93,0xe8,0x38,0x99,0x4f,0xe3,0x86,0xf6,0x3a,0xd8,0xa9,0xbb,0x0b},
            new byte[] {0x16,0xd8,0x65,0x86,0x37,0x2d,0x3c,0x0d,0x94,0x36,0x85,0xf0,0xa1,0x34,0xa6,0x88}), //:\Program Files\Google\Chrome
Program.drive_letter + Bfs.Create("/QiSascuzM2huvTsOWxQEw==",
            new byte[] {0x84,0xb1,0x36,0xe1,0x46,0x70,0x96,0xd0,0xae,0xf1,0x71,0x2c,0x74,0xab,0xe5,0xc3,0xee,0x86,0x8c,0x30,0x3a,0x06,0x54,0x38,0x45,0x24,0x12,0xa2,0xc2,0xab,0x5e,0xd1},
            new byte[] {0x01,0x39,0x11,0x78,0xca,0xb8,0x2f,0xa9,0xfb,0x65,0x94,0x2d,0xac,0x34,0x7f,0xfc}), //:\AdwCleaner
Program.drive_letter + Bfs.Create("UjHwA1rLz0lw5EhFVZpIbQ==",
            new byte[] {0xd4,0xbf,0x21,0xe4,0x61,0x38,0xee,0x54,0x69,0x13,0x73,0xa0,0x42,0x6f,0x39,0xf5,0x6c,0x6b,0x44,0xab,0x99,0xef,0x86,0xa5,0x28,0x01,0x74,0x07,0x6e,0x40,0x68,0x7d},
            new byte[] {0xad,0x99,0x78,0x17,0x7d,0x59,0x29,0xf3,0x7a,0x82,0xf7,0xb1,0x58,0xff,0x74,0x54}), //:\KVRT_Data
Program.drive_letter + Bfs.Create("KwsVeLGZHce7VAHvhzOQaA==",
            new byte[] {0xaf,0xfb,0x1b,0x4d,0x4b,0xc4,0x8f,0xc1,0xaa,0xf0,0xa4,0xc0,0x88,0xfd,0x96,0x4f,0x6c,0x2c,0x4e,0x91,0x27,0x5a,0x39,0xa8,0xb0,0x84,0x6e,0xae,0xc0,0xb7,0x8f,0xab},
            new byte[] {0x37,0x93,0x63,0xa8,0xf3,0x5c,0x71,0x7f,0x98,0xaa,0xd1,0x7d,0x4d,0xdd,0xa5,0x77}), //:\KVRT2020_Data
Program.drive_letter + Bfs.Create("g8C5NWX9PgZfiaDP0BrEwA==",
            new byte[] {0x42,0x96,0xc8,0xa3,0xeb,0x24,0x99,0x06,0xac,0x24,0x12,0x92,0x7b,0xd9,0x4f,0xef,0x25,0xc1,0x0a,0x58,0xd8,0x80,0x6b,0x6c,0x75,0x42,0x1c,0xbc,0xee,0xb4,0xc5,0xaf},
            new byte[] {0x3d,0x7b,0x83,0x66,0x13,0xb8,0xdc,0x9e,0x29,0xb9,0x94,0xdd,0x4b,0x62,0xe0,0x96}), //:\FRST
};

            if (!Program.WinPEMode)
            {
                obfStr5.Add(Path.Combine(Environment.GetEnvironmentVariable("Ap~pda~ta".Replace("~", "")), "sys~fi~les".Replace("~", "")));
                obfStr5.Add(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop).ToLower(), "aut?olo?gger".Replace("?", "")));
                obfStr5.Add(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop).ToLower(), "av?_?b?l?ock_?rem?over".Replace("?", "")));
                obfStr5.Add(Path.Combine(utils.GetDownloadsPath(), "auto?log?ger".Replace("?", "")));
                obfStr5.Add(Path.Combine(utils.GetDownloadsPath(), "a?v_b?lo?ck?_re?mov?er".Replace("?", "")));
            }

            ScanDirectories(obfStr5, founded_suspLckPths);

            if (!Program.ScanOnly)
            {
                if (founded_suspLckPths.Count == 0)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }
            }


            List<string> obfStr1 = new List<string>() {
Program.drive_letter + Bfs.Create("SRYFyZSSBX2es57jucsg2GH/11xAgKDTRF3Wp4JeRFE=",
            new byte[] {0xec,0xd8,0x4c,0x3b,0x15,0xbb,0xef,0x6d,0x82,0x5e,0xac,0x17,0x75,0xa6,0xa9,0x9a,0xd6,0xad,0x32,0x1b,0xa8,0xbe,0x0c,0x35,0x4b,0x63,0xdb,0x5c,0x24,0x1b,0xec,0xad},
            new byte[] {0x17,0x71,0x6a,0x4a,0x14,0xc5,0x7c,0xc6,0x4d,0x35,0xcb,0x22,0x6a,0xc9,0xa1,0xa9}), //:\ProgramData\Install
Program.drive_letter + Bfs.Create("OIFcGfl+BXfYtDZRUS7Aw/VX+hQaJ2zbmieSMIQyvfE=",
            new byte[] {0x0d,0x0d,0x6d,0xa5,0xe4,0x7e,0xd7,0x15,0x38,0xe5,0xf5,0x2d,0xdf,0xd6,0x0a,0xb2,0xf1,0x6d,0xb4,0x3b,0x0d,0x05,0xdf,0xeb,0xa8,0x1e,0xd0,0x81,0xb3,0x80,0x22,0xeb},
            new byte[] {0xa4,0x63,0x7c,0x17,0xd4,0x02,0x0f,0x13,0x96,0xe6,0x9b,0xdd,0x1f,0x81,0xfa,0xb8}), //:\ProgramData\Microsoft\Check
Program.drive_letter + Bfs.Create("j4uZJHQR/mkh+cboS+Xho3TUU+ne/x7JPE03E1LIGP4=",
            new byte[] {0x9e,0xba,0xa5,0x5f,0xa6,0x17,0x21,0x8a,0x62,0x7a,0x40,0xe3,0x56,0x77,0xb9,0xe7,0x60,0xa1,0xb3,0xd6,0x49,0x56,0x1b,0x31,0x01,0xf8,0x0e,0x1b,0xa9,0xe5,0xda,0xe2},
            new byte[] {0x70,0xce,0x78,0x4a,0xdb,0x61,0x22,0x5d,0xe8,0x4d,0x3e,0x50,0xf3,0xa4,0x5c,0xac}), //:\ProgramData\Microsoft\Intel
Program.drive_letter + Bfs.Create("tbekQ8OqwPB2Vx1o/lO402xZKbPYhEKvdhALGp1/5sAeRjrgGMZVqp+BrJjpYSlWZzXn/0TxeCeNYmAZyk8tWQ==",
            new byte[] {0xfb,0x31,0xb7,0xf6,0x8b,0x8d,0x35,0xbe,0x0d,0xa4,0xef,0x69,0x6f,0xf0,0xac,0x54,0x11,0x45,0xce,0x8b,0x54,0xbe,0xf2,0x33,0xbe,0x72,0x6e,0x92,0x25,0xd3,0xb7,0x96},
            new byte[] {0x03,0xc1,0xfd,0x0c,0xeb,0x66,0xf3,0xf6,0xe7,0x5b,0xf9,0x22,0x36,0x86,0xdf,0x5f}), //:\ProgramData\Microsoft\clr_optimization_v4.0.30318_64
Program.drive_letter + Bfs.Create("8zOKATqrJdSR1HAwCiNJU0bWqA6f1ECoytRT1nQmz/0=",
            new byte[] {0x5c,0xef,0x16,0x0b,0xfe,0x8e,0xb7,0x4b,0xf5,0xdf,0xaa,0x80,0x7c,0x7c,0x0b,0xf4,0xfc,0x22,0x4b,0xa6,0xd1,0xbe,0xad,0xc4,0x38,0xf0,0x28,0x5d,0x04,0x7b,0x18,0xa8},
            new byte[] {0x18,0xbd,0xba,0x7e,0x07,0xe2,0xfd,0x01,0x63,0xd0,0x2a,0xab,0xf8,0x3d,0x3c,0x41}), //:\ProgramData\Microsoft\temp
Program.drive_letter + Bfs.Create("R7ojA7uERo7dmiZb5lgZntuohxazOjATduKaf8RhB5A=",
            new byte[] {0xec,0xcf,0xfe,0xa0,0x2c,0xa5,0x61,0xaf,0x34,0x24,0x19,0xa2,0x3e,0x70,0x76,0xa0,0x0c,0xa0,0xed,0x33,0xc9,0x4b,0x80,0x84,0x9e,0x57,0x46,0x9e,0x1a,0xd6,0x91,0x8d},
            new byte[] {0x31,0x9c,0xe5,0x23,0x26,0x7a,0x1f,0xff,0x10,0xc0,0xf9,0x17,0x73,0x9a,0x56,0x63}), //:\ProgramData\PuzzleMedia
Program.drive_letter + Bfs.Create("LvoaOOlpy4OeMy4h+D3H+74xJ49hMTQs2x91H8sD9so=",
            new byte[] {0xb4,0x68,0xa2,0xb0,0xd7,0xaf,0x8a,0xa0,0x09,0x50,0xe2,0x5c,0xbb,0x70,0x1f,0x64,0x51,0xb2,0xe8,0x8c,0xf1,0x4d,0xfe,0x78,0x42,0xb3,0x99,0xdb,0xa8,0x16,0x6d,0xaa},
            new byte[] {0xb1,0xc4,0xa1,0xcb,0x89,0x31,0x38,0x74,0x2c,0x40,0x8f,0xc8,0xfe,0x01,0x79,0x44}), //:\ProgramData\RealtekHD
Program.drive_letter + Bfs.Create("eBg4fjvwciVE77T9ozYq7k9/Ws/4J3A1bBYkhTQ0LSo=",
            new byte[] {0x85,0xb8,0x3e,0xcd,0xcd,0x55,0xd3,0xb9,0x59,0x3b,0x3a,0x95,0xe1,0x78,0xa6,0x5f,0x5e,0x34,0x2f,0x5f,0xb6,0x8c,0x43,0xef,0xea,0xf7,0xc3,0x82,0x91,0x04,0xe0,0x2f},
            new byte[] {0x9e,0xbe,0x2b,0x8c,0x45,0x75,0x73,0x46,0x8d,0xd7,0x54,0x7b,0x8d,0xca,0x7c,0x7c}), //:\ProgramData\ReaItekHD
Program.drive_letter + Bfs.Create("IL1+tjd+xltG5RL4InDJ69bTDjNN/0aMOxVFySVpOdI=",
            new byte[] {0x29,0x0a,0x27,0xe3,0x41,0x73,0x40,0x47,0xbf,0xa1,0xe3,0xc9,0x99,0xff,0x7c,0x77,0xed,0xd2,0x08,0xfd,0x1e,0x3e,0xf9,0xce,0x90,0x67,0xf8,0x5c,0xcb,0x30,0xa2,0x77},
            new byte[] {0x61,0x90,0xde,0x46,0xfa,0xdf,0xd3,0x13,0x3d,0xca,0xce,0xa2,0xc5,0x49,0xdd,0x20}), //:\ProgramData\RobotDemo
Program.drive_letter + Bfs.Create("iCsC/cdeAXkM6krCDUdYFzfCdBZ0o1273kLTIya4zoU=",
            new byte[] {0xa2,0xef,0x00,0x1e,0xb0,0xa8,0x9f,0x1a,0x6a,0xd3,0xc4,0xf2,0x8a,0x7c,0x17,0xc7,0x32,0xe2,0x16,0x88,0x78,0x7f,0x44,0x9f,0xb6,0x44,0x38,0x76,0xc8,0x36,0x40,0x55},
            new byte[] {0x40,0xac,0x1b,0xee,0xde,0x27,0x0e,0xa6,0xd2,0x32,0xdd,0x1f,0xf4,0x3d,0xfb,0x1e}), //:\ProgramData\RunDLL
Program.drive_letter + Bfs.Create("mggYwMg5q6bBjSB34Ivw1zUeZXZ0Y3NztFq62IN5mc4=",
            new byte[] {0x84,0xc8,0x76,0xb0,0xa1,0x59,0x00,0xec,0xbf,0x8d,0x83,0xcb,0xb6,0x94,0x6b,0xd1,0xfe,0x3c,0x63,0xba,0xbe,0x16,0x4b,0x0e,0x31,0x58,0xc6,0x5f,0xbe,0x47,0xba,0x4f},
            new byte[] {0x08,0xf7,0xe2,0x03,0xcf,0x6f,0x70,0x66,0x5b,0x83,0xb3,0x88,0x8c,0xe7,0x4e,0xcb}), //:\ProgramData\Setup
Program.drive_letter + Bfs.Create("heyamsMT58waRqSmn8iuN/nrPFWOGpjHcv23fMn0C+w=",
            new byte[] {0x41,0xd6,0x07,0x86,0x4b,0x49,0xf0,0xaf,0x9f,0xd9,0x69,0x94,0x70,0x60,0x13,0xaf,0xcb,0xb6,0xda,0xfe,0x3b,0x29,0xc9,0x54,0xb6,0x11,0xd3,0xd2,0x40,0xde,0x3b,0x94},
            new byte[] {0x8a,0x78,0x92,0x7e,0x53,0xb8,0xf5,0x11,0x18,0x08,0x0b,0xf4,0x81,0xa9,0x39,0x24}), //:\ProgramData\System32
Program.drive_letter + Bfs.Create("N7NFLPWAhwYbH5pGOQeAKL+l4384x8IpnfMcpN6gzKs=",
            new byte[] {0xad,0x5e,0xbd,0x28,0xb4,0x70,0x3c,0x38,0xc6,0xa7,0x47,0x7e,0x38,0xe6,0x38,0x36,0x1a,0xc5,0x8d,0x3e,0xfe,0x3d,0xfe,0xc5,0xcf,0xbb,0x99,0x94,0x1b,0x77,0xd3,0x5a},
            new byte[] {0x89,0xd4,0x2a,0x12,0x70,0x7e,0x4d,0x29,0xcf,0x80,0xad,0x04,0x3d,0xfa,0x7e,0x22}), //:\ProgramData\WavePad
Program.drive_letter + Bfs.Create("WAV5TqE6zYpNGcHTaTIf1O6BCAZmFhGxQDHvNC+pf3lEWtOE6FXoM6/5zb7/7IWJ",
            new byte[] {0x8d,0x29,0x48,0xe6,0xf7,0xca,0xd2,0xa7,0xf9,0xc8,0x88,0xcb,0xcd,0x0e,0x26,0x70,0x29,0xc2,0x3f,0xb6,0x96,0x7e,0x94,0x4c,0xcd,0x99,0x67,0x61,0xcc,0xe4,0x76,0xa3},
            new byte[] {0xc8,0xc6,0xc2,0x96,0x0d,0x66,0x1b,0x9c,0x05,0x5d,0x33,0x8b,0x28,0x73,0x54,0xcf}), //:\ProgramData\Windows Tasks Service
Program.drive_letter + Bfs.Create("ZEJzWDdakL+ZT2MRADNj5pcsI2pbTBBseHqrq/7PCTQ=",
            new byte[] {0x53,0x2c,0xb3,0x39,0x8f,0x56,0x8c,0x53,0x8e,0x61,0x32,0x46,0x33,0x61,0xed,0x8a,0x1b,0x6b,0x66,0xe4,0x83,0xb6,0xac,0xa3,0x8f,0x8a,0x23,0x24,0xe5,0x0c,0x2c,0x6e},
            new byte[] {0xe8,0x27,0x68,0xab,0x70,0xc9,0xed,0x14,0xf5,0xd2,0x6d,0x93,0xee,0x3d,0x9a,0xec}), //:\ProgramData\WindowsTask
Program.drive_letter + Bfs.Create("rVDg+3QYIcxzAKPmigz/n3YbqtL9hxeujES2cDj3Ouk=",
            new byte[] {0x10,0x53,0x45,0xfa,0xf3,0x9e,0x52,0x78,0xa5,0xe5,0xbb,0xa1,0x4c,0x99,0xa4,0xd4,0x81,0x66,0x65,0xbc,0x3d,0x5f,0x9c,0x5b,0x79,0xb5,0x77,0x5c,0x64,0xab,0xfb,0x53},
            new byte[] {0xd3,0xa6,0x23,0x60,0xc6,0x0c,0x3c,0x4a,0x8b,0x84,0x95,0xac,0x25,0xd6,0x27,0x2f}), //:\ProgramData\Google\Chrome
Program.drive_letter + Bfs.Create("5JallR/n89vpC4hjT34hkMC7kdTtr3tvX+QLALiZg5w=",
            new byte[] {0xac,0xee,0x73,0xfb,0x31,0x18,0x27,0x06,0x95,0x96,0xe3,0xe0,0x76,0xe9,0x8f,0x13,0xcb,0x83,0xc8,0x93,0xaf,0xfb,0xb2,0x33,0x80,0xe3,0xf9,0x14,0x5a,0xbe,0xbd,0xfd},
            new byte[] {0xe1,0x78,0x60,0xd0,0x34,0x4b,0x6c,0xe9,0x0c,0x99,0x3b,0x5d,0xcc,0x7d,0x51,0x3c}), //:\Program Files\Transmission
Program.drive_letter + Bfs.Create("wGGwKhQAzjtZg6Wty5xDXfmpSvVT5O+nK1fA9IIZN/M=",
            new byte[] {0xe5,0x9d,0xa7,0x14,0xa5,0xfd,0x6a,0x1f,0x4d,0xd2,0xb2,0x92,0x88,0x53,0xe5,0xfd,0xb2,0x91,0xd7,0x3d,0xc1,0x98,0x7e,0x0e,0x20,0x4a,0x9f,0x30,0x85,0xf0,0x23,0x0d},
            new byte[] {0x6c,0xac,0x9d,0x05,0x01,0xfc,0xf0,0x47,0x9f,0x4e,0xcf,0x60,0x3d,0xc8,0xc8,0xd6}), //:\Program Files\Google\Libs
Program.drive_letter + Bfs.Create("dmo8h/NAuFKVegap+7UT/3jA2aJDU4fbw+4db6JEwa9OR52VSYakmlsWXT3Tix5C",
            new byte[] {0x4a,0xef,0x0c,0x8c,0x78,0x88,0x33,0x56,0xc0,0xf9,0xf1,0x5c,0x99,0xf8,0xfe,0x88,0x8e,0x40,0x63,0xfd,0xe1,0xa6,0xf9,0x0b,0xc9,0xd7,0xc1,0xb0,0x6b,0xb2,0xd8,0x21},
            new byte[] {0xbb,0x56,0xdc,0xb5,0x30,0x89,0xa8,0x3e,0xed,0x4e,0x20,0x8f,0xd3,0xd5,0xd3,0x84}), //:\Program Files (x86)\Transmission
Program.drive_letter + Bfs.Create("Oxzr5tB6SbV0wPpc5BQd58w4L+gUMCshW2487pytpB0=",
            new byte[] {0x84,0x73,0x4d,0x43,0x51,0x89,0x4c,0xb4,0xc7,0xfb,0x6b,0xd5,0x8a,0x1b,0x1d,0xbc,0xc3,0x17,0xf6,0x3c,0x44,0x12,0x34,0xa8,0xc5,0x8a,0x12,0x78,0x11,0xd6,0x0d,0x9a},
            new byte[] {0x3b,0x1f,0xd0,0x92,0x7b,0x76,0xf9,0xe3,0xd5,0x9d,0x00,0x6e,0x78,0xd5,0x4c,0xbc}), //:\Windows\Fonts\Mysql
Program.drive_letter + Bfs.Create("CMiMQE1Oasn0PVD8dcdXu1DxsEvm8jS+XdT/Gun95R/AjhtB/uB3hv8P/1EOnPCE",
            new byte[] {0xd8,0x71,0x91,0xd1,0x71,0x52,0xd1,0x3b,0x3c,0xda,0x40,0x31,0x3a,0x37,0x7e,0x59,0x7d,0x2f,0x4f,0x15,0x75,0xd2,0x31,0x4f,0xd2,0xbf,0xe0,0x53,0x98,0x67,0x69,0x70},
            new byte[] {0x90,0xf6,0xd3,0x60,0x08,0xbb,0x33,0xce,0xa2,0xd6,0xe0,0x44,0x83,0x68,0x5e,0xae}), //:\Program Files\Internet Explorer\bin
Program.drive_letter + Bfs.Create("k1tAFbppYUij8NkGJfZs4wj1oIEzq+hoN24VrAXZVCE=",
            new byte[] {0xb1,0xf9,0xda,0x0b,0xdf,0xf8,0xfb,0x4a,0x8a,0x11,0xc5,0xfe,0x0d,0x94,0x5d,0x66,0xc7,0xfe,0x98,0x2b,0x71,0xf8,0x1a,0xc8,0x4c,0xcf,0x43,0xb7,0x0c,0x3a,0x60,0xc3},
            new byte[] {0x0a,0x17,0x9c,0x8c,0x99,0x5c,0xf6,0x6d,0xf8,0xe3,0x48,0xce,0xd0,0x17,0x5b,0x23}), //:\ProgramData\princeton-produce
Program.drive_letter + Bfs.Create("3/6lYsJUt8TlZwSZy6VmHUZshsAr3OGNzrTMvO712EQ=",
            new byte[] {0x5c,0x98,0x21,0x43,0xde,0x81,0x50,0x3b,0x91,0xa6,0x93,0xb5,0x7d,0x2e,0xe1,0xef,0x02,0x84,0xe9,0xa1,0x79,0x28,0x5f,0xc7,0xa5,0xcb,0xda,0xa4,0x74,0x06,0xf1,0x50},
            new byte[] {0xcf,0x62,0x9f,0x16,0xcb,0x6f,0x9b,0x39,0xed,0x74,0x8f,0x03,0xae,0x95,0xff,0x0f}), //:\ProgramData\Timeupper
Program.drive_letter + Bfs.Create("MVJDmIfuchRPNgvOO2cFSjeee7N32lfKSQ3S1CUQBy8=",
            new byte[] {0x87,0xb4,0xc7,0x21,0x77,0x70,0xd8,0x62,0x2a,0x5c,0x1c,0x0b,0x60,0x8f,0x10,0x07,0xe4,0xb4,0x61,0x91,0x19,0x55,0x52,0x25,0x80,0x50,0x11,0x13,0x79,0x34,0x32,0x29},
            new byte[] {0x2b,0xab,0x2d,0xb4,0xfa,0x7d,0x41,0xf8,0x39,0xa2,0xb1,0x6a,0xeb,0x2d,0x7a,0x72}), //:\Program Files\RDP Wrapper
};


            ScanDirectories(obfStr1, founded_mlwrPathes);
            if (!Program.ScanOnly)
            {
                if (founded_mlwrPathes.Count == 0)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }
            }


            Logger.WriteLog("\t\tScan files...", Logger.head, false);

            string baseDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), "Microsoft").ToLower().Replace("x:", $@"{Program.drive_letter}:");
            FindMlwrFiles(baseDirectory);

            if (!Program.ScanOnly)
            {
                if (founded_mlwrPths.Count == 0)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }
            }


            if (!Program.WinPEMode)
            {
                ScanRegistry();
                if (!Program.no_services)
                {
                    ScanServices();
                }


                int BootMode = Native.GetSystemMetrics(Native.SM_CLEANBOOT);

                switch (BootMode)
                {
                    case 0:
                        Logger.WriteLog("\t\tScanning firewall...", Logger.head, false);
                        ScanFirewall();
                        Logger.WriteLog($"\t\tScanning Tasks...", Logger.head, false);
                        ScanTaskScheduler();
                        break;
                    case 1:
                        Logger.WriteLog("\t[#] Safe boot: no scan tasks and firewall rules", ConsoleColor.Blue);
                        break;
                    case 2:
                        Logger.WriteLog("\t\tScanning firewall...", Logger.head, false);
                        ScanFirewall();
                        Logger.WriteLog("\t[#] Safe boot networking: no scan tasks", ConsoleColor.Blue);
                        break;
                    default:
                        break;
                }
            }
            CleanHosts();
        }

        public void Clean()
        {
            if (mlwrPids.Count != 0)
            {
                Logger.WriteLog("\t\tMali?cious processes...".Replace("?", ""), Logger.head, false);
                if (Program.ScanOnly)
                {
                    foreach (var id in mlwrPids)
                    {
                        using (Process p = Process.GetProcessById(id))
                        {
                            string pname = p.ProcessName;
                            int pid = p.Id;

                            if (!p.HasExited)
                            {
                                Logger.WriteLog($"\t[!!!] Ma?li?ci?ou?s process {pname} - pid:{pid}".Replace("?", ""), Logger.caution);
                            }
                        }
                    }
                    Logger.WriteLog("\t[#] Scan only mode", ConsoleColor.Blue);

                }
                else
                {
                    Logger.WriteLog("\t\tTrying to close processes...", Logger.head, false);

                    utils.UnProtect(mlwrPids.ToArray());

                    foreach (var id in mlwrPids)
                    {
                        try
                        {
                            using (Process p = Process.GetProcessById(id))
                            {
                                string pname = p.ProcessName;
                                int pid = p.Id;

                                p.Kill();

                                if (p.HasExited)
                                {
                                    Logger.WriteLog($"\t[+] Ma?li?ci?ou?s process {pname} - pid:{pid} successfully closed".Replace("?", ""), Logger.success);
                                }
                            }

                        }
                        catch (Exception ex)
                        {
                            Logger.WriteLog($"\t[x] Failed to kill ma?li?ci?ou?s process! {ex.Message}".Replace("?", ""), Logger.error);
                            continue;
                        }
                    }
                }
            }

            Logger.WriteLog("\t\tRemoving known m?al?wa?re files...".Replace("?", ""), Logger.head, false);
            int deletedFilesCount = 0;

            foreach (string path in obfStr2)
            {
                if (File.Exists(path))
                {
                    if (!Program.ScanOnly)
                    {
                        UnlockFile(path);
                        try
                        {
                            File.SetAttributes(path, FileAttributes.Normal);
                            File.Delete(path);
                            Logger.WriteLog($"\t[+] Mali~cious file {path} deleted".Replace("~", ""), Logger.success);
                            deletedFilesCount++;
                        }
                        catch (Exception)
                        {
                            Logger.WriteLog($"\t[!!] Cannot delete file {path}", Logger.cautionLow);
                            Logger.WriteLog($"\t[.] Trying to unlock directory...", ConsoleColor.White);
                            UnlockDirectory(Path.GetDirectoryName(path));
                            try
                            {
                                Logger.WriteLog($"\t[+] Unlock success", Logger.success);

                                try
                                {
                                    uint processId = utils.GetProcessIdByFilePath(path);

                                    if (processId != 0)
                                    {
                                        Process process = Process.GetProcessById((int)processId);
                                        if (!process.HasExited)
                                        {
                                            process.Kill();
                                            Logger.WriteLog($"\t[+] Blocking process {processId} has been closed", Logger.success);
                                        }
                                    }
                                }
                                catch (Exception) { }

                                Thread.Sleep(100);
                                File.Delete(path);
                                if (!File.Exists(path))
                                {
                                    Logger.WriteLog($"\t[+] Mali~cious file {path} deleted".Replace("~", ""), Logger.success);
                                    deletedFilesCount++;
                                }

                            }
                            catch (Exception ex)
                            {
#if DEBUG
                                Logger.WriteLog($"\t[x] known_malware_files: cannot delete file {path} | {ex.Message} \n{ex.StackTrace}", Logger.error);
#else
                                Logger.WriteLog($"\t[x] known_m?alw?are_files: cannot delete file {path} | {ex.Message}".Replace("?", ""), Logger.error);
#endif
                            }
                        }
                    }
                    else
                    {
                        Logger.WriteLog($"\t[!!!] Mali~cious file: {path}".Replace("~", ""), Logger.caution);
                    }

                }
            }

            if (!Program.ScanOnly)
            {
                if (deletedFilesCount == 0)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }
            }


            if (!Program.ScanOnly)
            {
                CleanFoundedMlwr();
            }

            if (suspFls_path.Count > 0)
            {
                Logger.WriteLog("\t\tRemoving m!ali!cious files...".Replace("!", ""), Logger.head, false);
                foreach (string path in suspFls_path)
                {
                    if (File.Exists(path))
                    {
                        if (!Program.ScanOnly)
                        {
                            UnlockFile(path);
                            try
                            {
                                File.SetAttributes(path, FileAttributes.Normal);
                                File.Delete(path);
                                Logger.WriteLog($"\t[+] Mal#iciou#s file {path} deleted".Replace("#", ""), Logger.success);
                            }
                            catch (Exception)
                            {
                                Logger.WriteLog($"\t[!!] Cannot delete file {path}", Logger.cautionLow);
                                Logger.WriteLog($"\t[.] Trying to unlock directory...", ConsoleColor.White);
                                UnlockDirectory(Path.GetDirectoryName(path));
                                try
                                {
                                    Logger.WriteLog($"\t[+] Unlock success", Logger.success);
                                    try
                                    {
                                        uint processId = utils.GetProcessIdByFilePath(path);

                                        if (processId != 0)
                                        {
                                            Process process = Process.GetProcessById((int)processId);
                                            if (!process.HasExited)
                                            {
                                                process.Kill();
                                                Logger.WriteLog($"\t[+] Blocking process {processId} has been closed", Logger.success);
                                            }
                                        }
                                    }
                                    catch (Exception) { }
                                    Thread.Sleep(100);
                                    File.Delete(path);
                                    if (!File.Exists(path))
                                    {
                                        Logger.WriteLog($"\t[+] Ma%li%ci%ous file {path} deleted".Replace("%", ""), Logger.success);
                                    }

                                }
                                catch (Exception ex)
                                {
#if DEBUG
                                    Logger.WriteLog($"\t[x] suspiciousFiles: cannot delete file {path} | {ex.Message} \n{ex.StackTrace}", Logger.error);
#else
                                    Logger.WriteLog($"\t[x] cannot delete file {path} | {ex.Message}", Logger.error);
#endif
                                }
                            }
                        }
                        else
                        {
                            Logger.WriteLog($"\t[!!!] Mal#iciou#s file {path}".Replace("#", ""), Logger.caution);
                        }
                    }
                }
            }

            if (!Program.ScanOnly)
            {
                Logger.WriteLog("\t\tChecking TermService...", Logger.head, false);
                utils.CheckTermService();
            }

            if (founded_mlwrPathes.Count > 0)
            {
                Logger.WriteLog("\t\tRemoving malware paths...", Logger.head, false);
                foreach (string str in founded_mlwrPathes)
                {
                    if (!Program.ScanOnly)
                    {
                        UnlockDirectory(str);
                        try
                        {

                            Directory.Delete(str, true);
                            if (!Directory.Exists(str))
                            {
                                Logger.WriteLog($"\t[+] Directory {str} successfull deleted", Logger.success);
                            }
                        }
                        catch (Exception ex)
                        {
#if DEBUG
                            Logger.WriteLog($"\t[x] Failed to delete directory \"{str}\" | {ex.Message} \n{ex.StackTrace}", Logger.error);
#else
                            Logger.WriteLog($"\t[x] Failed to delete directory \"{str}\" | {ex.Message}", Logger.error);
#endif
                        }
                    }
                    else
                    {
                        Logger.WriteLog($"\t[!!] Mali?cious directory {str}".Replace("?", ""), Logger.cautionLow);
                    }
                }
            }

            if (founded_suspLckPths.Count > 0)
            {
                UnlockFolders(founded_suspLckPths);
            }

            if (!Program.WinPEMode)
            {
                Logger.WriteLog("\t\tChecking user Jo?hn...".Replace("?", ""), Logger.head, false);
                if (utils.CheckUserExists("jo?hn".Replace("?", "")))
                {
                    if (Environment.UserName.ToLower() == "jo?hn".Replace("?", ""))
                    {
                        Logger.WriteLog($"\t[#] Current user - jo?hn. Removing is not required".Replace("?", ""), ConsoleColor.Blue);
                    }
                    else
                    {
                        if (!Program.ScanOnly)
                        {
                            try
                            {
                                utils.DeleteUser("jo?hn".Replace("?", ""));
                                Thread.Sleep(100);
                                if (!utils.CheckUserExists("jo?hn".Replace("?", "")))
                                {
                                    Logger.WriteLog("\t[+] Successfull deleted userprofile \"Jo?hn\"".Replace("?", ""), Logger.success);
                                }
                                else
                                    Logger.WriteLog("\t[x] Error for remove user profile \"Jo?hn\"".Replace("?", ""), ConsoleColor.Red);
                            }
                            catch (Exception ex)
                            {
                                Logger.WriteLog($"\t[x] Cannot delete user \"Jo?hn\":\n{ex.Message}".Replace("?", ""), Logger.error);
                            }
                        }
                        else
                        {
                            Logger.WriteLog($"\t[!!] Malicious userprogile Jo?hn exist".Replace("?", ""), Logger.cautionLow);
                            Logger.WriteLog($"\t[#] Scan only mode", ConsoleColor.Blue);
                        }
                    }


                }
                else
                {
                    if (!Program.ScanOnly)
                    {
                        Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                    }
                }

            }

        }
        void UnlockFolders(List<string> inputList)
        {
            int foldersDeleted = 0;
            foreach (string str in inputList)
            {
                try
                {
                    if (!Program.ScanOnly)
                    {
                        UnlockDirectory(str);
                        if (utils.IsDirectoryEmpty(str))
                        {
                            Directory.Delete(str, true);
                            if (!Directory.Exists(str))
                            {
                                Logger.WriteLog($"\t[_] Removed empty dir '{str}'", ConsoleColor.White);
                                foldersDeleted++;
                            }
                        }
                    }
                    else
                    {
                        Logger.WriteLog($"\t[!] Locked directory '{str}'", Logger.warn);
                    }
                }
                catch (Exception ex1)
                {
#if DEBUG           
                    Logger.WriteLog($"\t[*] DeleteEmpyFolders exception: {ex1.Message}", ConsoleColor.Gray, false);
#endif
                    try
                    {
                        UnlockDirectory(str);
                        if (utils.IsDirectoryEmpty(str))
                        {
                            Directory.Delete(str);
                            if (!Directory.Exists(str))
                            {
                                Logger.WriteLog($"\t[_] Removed empty dir '{str}'", ConsoleColor.White);
                                foldersDeleted++;
                            }
                        }
                    }
                    catch (Exception ex2)
                    {
                        Logger.WriteLog($"\t[x] Cannot remove dir {str}\n{ex2.Message}", Logger.error);
                    }

                }
            }

            if (!Program.ScanOnly)
            {
                if (foldersDeleted == 0)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }
            }

        }
        void ScanDirectories(List<string> constDirsArray, List<string> newList)
        {
            foreach (string dir in constDirsArray)
            {
                if (Directory.Exists(dir))
                {
                    newList.Add(dir);
                }
            }
        }
        void ScanFirewall()
        {
            int affected_items = 0;
            try
            {
                Type typeFWPolicy2 = Type.GetTypeFromProgID("HNetCfg.FwPolicy2");
                dynamic fwPolicy2 = Activator.CreateInstance(typeFWPolicy2);

                INetFwRules rules = fwPolicy2.Rules;

                foreach (string programPath in obfStr2)
                {
                    foreach (INetFwRule rule in rules)
                    {
                        if (rule.ApplicationName != null)
                        {
                            if (rule.ApplicationName.ToLower() == programPath.ToLower())
                            {
                                Logger.WriteLog($"[.] Name: {rule.Name}", ConsoleColor.White);
                                Logger.WriteLog($"\t[!] Path: {rule.ApplicationName}", Logger.warn);

                                if (!Program.ScanOnly)
                                {
                                    rules.Remove(rule.Name);
                                    affected_items++;
                                    Logger.WriteLog($"\t[+] Rule {rule.Name} has been removed", Logger.success);
                                }

                                Logger.WriteLog($"------------------------------", ConsoleColor.White);
                            }
                        }

                    }

                }
                if (!Program.ScanOnly && affected_items == 0)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }

                if (Program.ScanOnly)
                {
                    Logger.WriteLog("\t[#] Scan only mode", ConsoleColor.Blue);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error get firewall rules: {ex.Message}");
            }
        }
        void FindMlwrFiles(string directoryPath)
        {
            if (!Directory.Exists(directoryPath))
            {
                return;
            }

            try
            {

                IEnumerable<string> files = Directory.GetFiles(directoryPath, "*.bat", SearchOption.TopDirectoryOnly);

                foreach (string file in files)
                {
                    if (!utils.IsAccessibleFile(file))
                    {
                        continue;
                    }
                    Logger.WriteLog($"[!] Suspicious file: {file}", Logger.warn);

                    founded_mlwrPths.Add(file);
                    foreach (var nearExeFile in Directory.GetFiles(Path.GetDirectoryName(file), "*.exe", SearchOption.TopDirectoryOnly))
                    {
                        founded_mlwrPths.Add(nearExeFile);
                    }


                }

                IEnumerable<string> directories = Directory.EnumerateDirectories(directoryPath);
                foreach (string directory in directories)
                {
                    FindMlwrFiles(directory);
                }


            }
            catch (Exception)
            {
            }


        }
        void CleanHosts()
        {
            Logger.WriteLog("\t\tScanning hosts file...", Logger.head, false);

            RegistryKey hostsDir = Registry.LocalMachine.OpenSubKey(obfStr7[0]);
            if (hostsDir != null)
            {
                string hostsPath = hostsDir.GetValue("DataBasePath").ToString();
                if (hostsPath.StartsWith("%"))
                {
                    hostsPath = utils.ResolveEnvironmentVariables(hostsPath);
                }

                string hostsPath_full = hostsPath + "\\h?os?t?s".Replace("?", "");

                if (Program.WinPEMode)
                {
                    hostsPath_full.Replace("C:", $"{Program.drive_letter}:");
                }

                if (!Program.WinPEMode && !File.Exists(hostsPath_full))
                {
                    Logger.WriteLog($"\t[?] Hosts file is missing", ConsoleColor.Gray);
                    File.Create(hostsPath_full).Close();
                    Thread.Sleep(100);
                    if (File.Exists(hostsPath_full))
                    {
                        Logger.WriteLog($"\t[+] New hosts file has been created", Logger.success);
                    }
                    return;
                }


                try
                {
                    UnlockFile(hostsPath_full);
                    File.SetAttributes(hostsPath_full, FileAttributes.Normal);
                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"\t[x] Error CleanHosts: {ex.Message}", Logger.error);
                    return;
                }

                try
                {
                    List<string> lines = File.ReadAllLines(hostsPath_full).ToList();
                    int deletedLineCount = 0;

                    for (int i = lines.Count - 1; i >= 0; i--)
                    {
                        string line = lines[i];
                        foreach (HashedString hLine in hStrings)
                        {
                            if (hLine.OriginalLength < line.Length)
                            {
                                string truncatedLine = line.Substring(line.Length - hLine.OriginalLength);
                                if (utils.StringMD5(truncatedLine).Equals(hLine.Hash))
                                {
                                    if (!Program.ScanOnly)
                                    {
                                        lines.RemoveAt(i);
                                        deletedLineCount++;
                                        break;
                                    }
                                    else
                                    {
                                        Logger.WriteLog($"[!] {line} - detected", Logger.warn);
                                    }
                                }
                            }
                        }
                    }


                    if (deletedLineCount > 0)
                    {
                        if (!Program.ScanOnly)
                        {
                            File.WriteAllLines(hostsPath_full, lines);
                            string logMessage = $"Ho?sts file has been recovered. Affected strings {deletedLineCount}".Replace("?", "");
                            Logger.WriteLog(logMessage, Logger.success);
                        }
                        else
                        {
                            Logger.WriteLog("\t[#] Scan only mode", ConsoleColor.Blue);
                        }

                    }
                    else if (!Program.ScanOnly)
                    {
                        Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                    }

                }
                catch (Exception e)
                {
                    Logger.WriteLog("Error read/write: " + e.Message, Logger.error);
                }
            }
        }
        void ScanRegistry()
        {
            Logger.WriteLog("\t\tScanning registry...", Logger.head, false);
            int affected_items = 0;

            #region DisallowRun

            try
            {
                RegistryKey DisallowRunKey = Registry.CurrentUser.OpenSubKey(obfStr7[1], true);
                if (DisallowRunKey != null)
                {
                    if (DisallowRunKey.GetValueNames().Contains("DisallowRun"))
                    {
                        Logger.WriteLog("\t[!] Suspicious registry key: Disal?low?Run - restricts the launch of the specified applications".Replace("?", ""), Logger.warn);

                        if (!Program.ScanOnly)
                        {
                            DisallowRunKey.DeleteValue("DisallowRun");
                            if (!DisallowRunKey.GetValueNames().Contains("Dis?allo?wRun".Replace("?", "")))
                            {
                                Logger.WriteLog("\t[+] Dis?all?owR?un key successfully deleted".Replace("?", ""), Logger.success);
                                affected_items++;
                            }
                        }

                    }

                    if (!Program.ScanOnly)
                    {
                        RegistryKey DisallowRunSub = Registry.CurrentUser.OpenSubKey(obfStr7[2], true);
                        if (DisallowRunSub != null)
                        {
                            DisallowRunKey.DeleteSubKeyTree("Di?sall?owR?un".Replace("?", ""));
                            DisallowRunSub = Registry.CurrentUser.OpenSubKey(obfStr7[2], true);
                            if (DisallowRunSub == null)
                            {
                                Logger.WriteLog("\t[+] D?is?al?low?Ru?n hive successfully deleted".Replace("?", ""), Logger.success);
                                affected_items++;
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {

                Logger.WriteLog($"\t[!] Cannot open HKCU\\...\\Explorer: {ex.Message}", Logger.error);
            }

            #endregion

            #region Appinit_dlls
            try
            {
                RegistryKey appinit_key = Registry.LocalMachine.OpenSubKey(obfStr7[3], true);
                if (appinit_key != null)
                {
                    if (!String.IsNullOrEmpty(appinit_key.GetValue("App??In??it_DL?Ls".Replace("?", "")).ToString()))
                    {
                        if (appinit_key.GetValue("Loa??dApp??Init_DLLs".Replace("?", "")).ToString() == "1")
                        {
                            if (!appinit_key.GetValueNames().Contains("RequireSignedApp?Ini?t_D?LLs".Replace("?", "")))
                            {
                                Logger.WriteLog("\t[!] A?ppIn??it_DLL?s is not empty".Replace("?", ""), Logger.warn);
                                Logger.WriteLog("\t[!!!] RequireSignedAp?pIn??it_DLLs key is not found".Replace("?", ""), Logger.caution);

                                if (!Program.ScanOnly)
                                {
                                    appinit_key.SetValue("RequireSignedApp?Init?_DLLs".Replace("?", ""), 1, RegistryValueKind.DWord);
                                    if (appinit_key.GetValue("RequireSignedApp?Init?_DLLs".Replace("?", "")).ToString() == "1")
                                    {
                                        Logger.WriteLog("\t[+] The value was created and set to 1", Logger.success);
                                        affected_items++;
                                    }
                                }
                            }
                            else if (appinit_key.GetValue("RequireSignedApp?Init?_DLLs".Replace("?", "")).ToString() == "0")
                            {
                                Logger.WriteLog("\t[!] AppInit_DLLs is not empty", Logger.warn);
                                Logger.WriteLog("\t[!!!] RequireS?ign?edApp?Init_DLLs key set is 0".Replace("?", ""), Logger.caution);

                                if (!Program.ScanOnly)
                                {
                                    appinit_key.SetValue("Re?qu?ireSigne?dApp?Init?_DLLs".Replace("?", ""), 1, RegistryValueKind.DWord);
                                    if (appinit_key.GetValue("Requi????reSignedApp?Init?_DLLs".Replace("?", "")).ToString() == "1")
                                    {
                                        Logger.WriteLog("\t[+] The value was set to 1", Logger.success);
                                        affected_items++;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLog("\t" + obfStr7[4] + ex.Message, Logger.error);
            }

            #endregion

            #region HKLM
            try
            {
                RegistryKey AutorunKey = Registry.LocalMachine.OpenSubKey(obfStr7[5], true);
                if (AutorunKey != null)
                {
                    Logger.WriteLog(@"HKLM\...\Run", ConsoleColor.DarkCyan);
                    List<string> RunKeys = AutorunKey.GetValueNames().ToList();

                    foreach (string value in RunKeys)
                    {
                        string path = utils.ResolveFilePathFromString(AutorunKey, value);
                        if (path == "")
                            continue;

                        if (File.Exists(path))
                        {
                            WinTrust.VerifyEmbeddedSignature(path);
                        }
                        else
                        {
                            Logger.WriteLog($"\t[!] File is not found: {AutorunKey.GetValue(value)} from Key \"{value}\"", Logger.warn);
                        }


                        if (AutorunKey.GetValue(value).ToString() == $@"{Program.drive_letter}:\Pro?gra?mDa?ta\Re?aItek?HD\task?host?w.e?x?e".Replace("?", ""))
                        {
                            if (!Program.ScanOnly)
                            {
                                AutorunKey.DeleteValue(value);
                                Logger.WriteLog("\t[+] Removed ma@@lici@o@us autorun key Real@tek@HD".Replace("@", ""), Logger.success);
                            }
                            else
                            {
                                Logger.WriteLog("\t[!] Found ma@@lici@o@us autorun key Real@tek@HD".Replace("@", ""), Logger.warn);
                            }

                        }


                    }
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLog($"\t[!] Cannot open HKLM\\...\\run: {ex.Message}", Logger.error);
            }

            #region WindowsDefender

            Logger.WriteLog(obfStr7[6], ConsoleColor.DarkCyan);
            try
            {
                RegistryKey winDfndr = Registry.LocalMachine.OpenSubKey(obfStr7[7], true);
                if (winDfndr != null)
                {
                    List<string> obfStr3 = new List<string>() {
Program.drive_letter + Bfs.Create("OYGYV0fOdbz/jxsVoL33CYfB1XHah5ZjsKTyiYw6H5k=",
            new byte[] {0xdd,0x74,0xb4,0xc9,0x0a,0x2e,0xd2,0x7b,0xa7,0x76,0x31,0x55,0x12,0x50,0x12,0x7e,0x1f,0xea,0x8e,0xcf,0x82,0x91,0x5e,0x4e,0x65,0xa7,0x9c,0x7f,0x7b,0x7d,0xc3,0x63},
            new byte[] {0x34,0xbe,0x22,0x05,0x4e,0x3c,0x9d,0x16,0x87,0x08,0x19,0x1b,0x27,0x4d,0xff,0x85}), //:\Program Files\RDP Wrapper
Program.drive_letter + Bfs.Create("3lF6RUyfvnYFHWtq8QZbzQ==",
            new byte[] {0x61,0x83,0xbf,0x7b,0xec,0x5e,0x05,0x94,0x8f,0xa9,0xcf,0xca,0x9a,0x39,0x48,0xe1,0x58,0x3a,0x77,0x65,0xad,0xcf,0x1a,0xb4,0xf3,0xac,0x25,0x7c,0xb4,0x08,0x2e,0x06},
            new byte[] {0x6c,0x39,0x07,0xa3,0xfa,0xe0,0x7b,0xae,0xbd,0x60,0xc0,0x61,0xed,0xaa,0x83,0x49}), //:\ProgramData
Program.drive_letter + Bfs.Create("FnZKu9VyIk00lmUI25EHlVKWvzWIVDfKtyuDHJUTAEZUyPoX3c/I4l89S/VwrfFd",
            new byte[] {0xba,0x1c,0xc9,0x37,0xc7,0x81,0x71,0x9f,0x35,0xd6,0x1e,0xed,0x03,0x89,0xcb,0x6a,0x98,0xe7,0x58,0x80,0xf7,0x2f,0x50,0xcd,0xde,0xff,0xd0,0xe1,0xf9,0xf2,0x4b,0x13},
            new byte[] {0x40,0x23,0x28,0xc6,0x70,0x3b,0xd5,0x00,0x36,0x05,0x41,0x4d,0x09,0x6e,0xd3,0x5b}), //:\ProgramData\ReaItekHD\taskhost.exe
Program.drive_letter + Bfs.Create("KfmtlXwIoat/gPGxHp6+uvcfZIHFwGGA2dJsyMNnHmS7X38nduM8FIfQwmBDP9eG",
            new byte[] {0x50,0xbd,0x1b,0xda,0xa2,0x1c,0x17,0xda,0xe8,0xe3,0x8b,0x6a,0xa2,0x6e,0xe9,0x28,0xc4,0xd2,0xe5,0xf4,0xe1,0x73,0xfc,0x8d,0x44,0xcf,0xc5,0x6f,0xd8,0x26,0x58,0x41},
            new byte[] {0x22,0x54,0x05,0x5b,0x5b,0x15,0x06,0x2a,0xdf,0x98,0x37,0xd8,0x5a,0x2e,0x2a,0x64}), //:\ProgramData\ReaItekHD\taskhostw.exe
Program.drive_letter + Bfs.Create("q6Qvtbbtm879AOkzj5hnj1RSdbMAcoHQq1LRC2HkJ/ppNPZ4TV5XXnorTsdIz1oi",
            new byte[] {0x5d,0x31,0xb7,0x70,0xd9,0xb4,0x17,0xbd,0x1a,0x2a,0x7a,0x7f,0x1b,0x1c,0x93,0x5a,0xc7,0xb7,0xe6,0xf9,0xe7,0xe0,0xff,0x0f,0x10,0xf9,0x72,0x7b,0xa3,0x09,0xd2,0x7d},
            new byte[] {0x21,0x81,0x12,0x15,0xa0,0xa7,0x06,0x48,0x46,0xde,0x2d,0x4d,0xbb,0xdc,0x56,0x8f}), //:\ProgramData\RealtekHD\taskhost.exe
Program.drive_letter + Bfs.Create("ADjy2y6gOQkeCH6svDIGaSv94yrtRTCQUwY0HRok0dUtqAvCYauNgfzi7lkiUpuR",
            new byte[] {0xd0,0xf7,0x7d,0xdb,0xeb,0xd7,0x81,0x63,0xd9,0xca,0xf5,0xb0,0x38,0xa6,0xfd,0x85,0x2b,0xda,0xe6,0xe2,0xca,0xbe,0xc1,0x99,0x0a,0x23,0x70,0xe9,0xe7,0x2e,0xb1,0x72},
            new byte[] {0x18,0x3b,0x01,0x39,0x65,0x50,0xb6,0xa1,0x76,0xbe,0xf1,0xdb,0xd7,0x49,0x4b,0x52}), //:\ProgramData\ReaItekHD\taskhostw.exe
Program.drive_letter + Bfs.Create("FZ3KiQ6mpui+L7CePpbyyLA/IE2yU31+Yw8WDgI0WarFvz6W37V8qLxpUNoXGsMH",
            new byte[] {0xed,0x8e,0x4e,0x22,0x7e,0x5f,0xe8,0x39,0x9c,0x76,0x62,0x24,0xc5,0x2a,0xb6,0x04,0x61,0xdd,0x02,0x48,0x72,0xe8,0x73,0xb7,0x4b,0xb4,0x74,0x78,0xca,0xe2,0xf2,0xb9},
            new byte[] {0xd3,0x5f,0x74,0x36,0xd8,0xce,0x0f,0x5a,0x32,0x1e,0x86,0x94,0x88,0x1d,0x11,0xe7}), //:\ProgramData\Windows Tasks Service\winserv.exe
Program.drive_letter + Bfs.Create("Q2vhuVhPr1VVw04Sh1FaBCDgt3aNgJBLDRIfAvB58lzuxSeYlczXZdpFgxQ+jrpc",
            new byte[] {0x7d,0x6e,0xdf,0x95,0xd8,0xaf,0xc5,0x3d,0xa8,0xd4,0x13,0xe9,0x60,0x60,0xdd,0x41,0x84,0x3c,0xb2,0x94,0x50,0xcc,0x21,0x85,0x97,0xcf,0x19,0x24,0x9b,0x3d,0x7c,0x77},
            new byte[] {0x83,0x88,0x1b,0x95,0x7e,0x5f,0xf5,0x5a,0xe6,0xc3,0xe9,0xea,0x8f,0x6c,0x37,0xec}), //:\ProgramData\WindowsTask\AMD.exe
Program.drive_letter + Bfs.Create("c9VXHK3lGQeZpPjVUD950JMQuZ140UPdl7k/egZDUL4ORe0GjZmWfas/ut+jafdy",
            new byte[] {0x19,0x69,0x38,0x59,0x81,0x9e,0xdc,0xa5,0xfa,0xcc,0xfe,0x9f,0xaa,0xad,0x3e,0xad,0x93,0x4f,0x01,0x65,0x8b,0x8f,0x36,0x47,0x77,0x7e,0x18,0xd9,0x7d,0xac,0x90,0x9d},
            new byte[] {0xe3,0xc2,0x11,0x6b,0x78,0x3e,0x79,0x8e,0xcc,0xd2,0x0c,0x27,0xa3,0xe2,0x88,0x7b}), //:\ProgramData\WindowsTask\AppModule.exe
Program.drive_letter + Bfs.Create("ZzuqHLlV0pVyd/36hZbRDXaJk83E/L+ih66kps//FxG/5ZOE2OID9L51giNgWwmj",
            new byte[] {0xab,0xae,0x72,0x74,0xcc,0x25,0x67,0x7f,0xb5,0x85,0x0a,0xdf,0xc1,0x88,0xa0,0xe6,0x96,0xe0,0x3e,0x65,0x08,0x06,0x51,0x28,0x0e,0xf2,0x6f,0x82,0x57,0xd1,0x6d,0x0d},
            new byte[] {0xaf,0xc2,0xda,0x1b,0x15,0xa4,0x8d,0x3c,0xd0,0x2d,0x4b,0x60,0x59,0x67,0xdb,0xd9}), //:\ProgramData\WindowsTask\audiodg.exe
Program.drive_letter + Bfs.Create("ps1HwfekaCNlm+1fEO1+ikRFNmBXQK5Icex9UDIY3QS78XNACtWwIyFbvk1p6mk6",
            new byte[] {0x70,0x18,0x09,0xb5,0x37,0x36,0xd6,0xfd,0x3e,0xf1,0x1d,0x84,0x0c,0x46,0xee,0x69,0x87,0x88,0xd1,0x94,0xdb,0xeb,0xa9,0xe8,0x0d,0x10,0x1b,0x61,0xdf,0x7a,0xd3,0x54},
            new byte[] {0x0d,0x32,0x6c,0x51,0x5f,0x72,0x36,0x4f,0xe3,0x7d,0xd4,0x64,0x85,0x19,0x06,0xc8}), //:\ProgramData\WindowsTask\MicrosoftHost.exe
Program.drive_letter + Bfs.Create("gmK7rDcmQdfaiuxw5Cge7aw1TgIJpWcE02dqPB67qcY=",
            new byte[] {0x58,0xf6,0xe5,0xab,0x3f,0x16,0x1b,0x5f,0x9a,0x16,0x2a,0x6d,0x30,0x95,0x28,0xef,0x50,0x3e,0xab,0x81,0x12,0x1d,0xeb,0x97,0x21,0x00,0x73,0x04,0xe8,0xed,0xef,0xa2},
            new byte[] {0x52,0x13,0x0c,0xf7,0x27,0xd3,0x1a,0x35,0x8b,0x6c,0xfe,0xd5,0xb3,0x7f,0x6b,0x2f}), //:\Windows\System32
Program.drive_letter + Bfs.Create("95DyOWo8i/B8rSIZNB2XbAFxtTPYrQdpBhVWfhnyulk=",
            new byte[] {0x19,0x3d,0x81,0x5b,0xca,0x3e,0xc3,0xcb,0x41,0x34,0xba,0x9d,0xd7,0x7d,0xe3,0x9f,0xaf,0xef,0xfe,0x22,0x97,0x8d,0xc1,0xa8,0x43,0xf8,0x98,0x36,0x72,0x8f,0x3f,0x79},
            new byte[] {0x7c,0xc0,0xd2,0xcf,0x03,0xd5,0x90,0x74,0x8e,0x21,0xd3,0x0f,0x04,0x05,0x81,0x15}), //:\Windows\SysWOW64\unsecapp.exe
};


                    foreach (string path in obfStr3)
                    {
                        RegistryKey key = Registry.LocalMachine.OpenSubKey(obfStr7[8], true);

                        if (key != null)
                        {
                            string[] valueNames = key.GetValueNames();

                            foreach (string valueName in valueNames)
                            {
                                try
                                {
                                    if (valueName.ToString().Equals(path, StringComparison.OrdinalIgnoreCase))
                                    {
                                        if (!Program.ScanOnly)
                                        {
                                            key.DeleteValue(valueName);
                                            Logger.WriteLog($"\t[+] Removed {valueName} exclusion", Logger.success);
                                            affected_items++;
                                        }
                                        else Logger.WriteLog($"\t[!!] Mali?cious entry {valueName} in WD exclusion".Replace("?", ""), Logger.cautionLow);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    Logger.WriteLog($"[x] Cannot procceed {valueName} exclusion | {ex.Message}", Logger.error);
                                }

                            }

                            key.Close();
                        }
                    }

                    obfStr3.Clear();

                    List<string> obfStr4 = new List<string>() {
Program.drive_letter + Bfs.Create("/07Wysm6H093urlcGIz9wvASHjI2uvMJhj5qtst57ms=",
            new byte[] {0xf7,0x04,0xcd,0x89,0x97,0x38,0xe1,0x0e,0x17,0x62,0xfe,0x86,0x0e,0x47,0x27,0x4b,0x43,0xa8,0xd6,0x5f,0xdf,0xce,0xdc,0x11,0xc8,0x84,0x8e,0x19,0xb8,0x55,0x3d,0xac},
            new byte[] {0x6d,0xfb,0xdf,0xc1,0x6f,0x27,0x40,0x29,0xae,0x31,0x71,0x4a,0xd8,0xb9,0x01,0x54}), //:\ProgramData\RDPWinst.exe
Program.drive_letter + Bfs.Create("H980LCHOK4zS6fo/5jlue/ux4Fp7wICH4p4Uo9uplsWZAqle2lDs9DVckOJmi1Io",
            new byte[] {0x0b,0xd8,0x04,0xa3,0xff,0x85,0xb4,0xfa,0xa4,0x5c,0xb5,0x3a,0xbf,0x86,0xe9,0x10,0x63,0x62,0x2d,0x57,0x40,0xf0,0x03,0x50,0x00,0xe4,0xc2,0xa1,0xd8,0xe5,0x92,0x61},
            new byte[] {0xb2,0x82,0xb4,0x0c,0xed,0xe6,0x72,0xed,0x1d,0xd6,0x27,0xf4,0x1d,0x32,0x41,0xeb}), //:\ProgramData\ReaItekHD\taskhost.exe
Program.drive_letter + Bfs.Create("O6+5dJiH14RWNB1qccDhr+xKELBfnZXeuT0LGpC35nTD6fInD6ALXZEg9lV62Mm1",
            new byte[] {0x13,0xc7,0x81,0xc7,0x37,0x52,0xa7,0xf0,0xa8,0xb6,0x69,0xe9,0x16,0xe5,0x3e,0xab,0x3d,0xaf,0x8e,0x55,0x5d,0x32,0x68,0x14,0x12,0x1b,0x9a,0x04,0x5f,0xfc,0x77,0x8f},
            new byte[] {0x99,0x27,0x76,0xf0,0xc9,0xf8,0x3f,0x03,0x03,0xb4,0x42,0xcd,0x84,0x3c,0xdc,0x87}), //:\ProgramData\ReaItekHD\taskhostw.exe
Program.drive_letter + Bfs.Create("b9IryCthd8N03ZUnuNe/VhmbkER/OwxGhUDPyPcxYMJtm9jifJwthr9qvtXKyxaU",
            new byte[] {0x29,0x35,0x8e,0xe8,0x40,0xf1,0x57,0xe2,0x61,0xda,0x91,0xfd,0x83,0x50,0xa4,0xca,0xfc,0x81,0x97,0x40,0x97,0x1c,0xda,0x51,0x5c,0xf5,0x37,0xd1,0xa1,0x7f,0x6d,0x1a},
            new byte[] {0xb9,0xf6,0x6e,0x37,0x4d,0x24,0x7d,0x89,0x84,0xda,0xca,0xe2,0x0e,0x10,0xb1,0xf9}), //:\ProgramData\RealtekHD\taskhost.exe
Program.drive_letter + Bfs.Create("oT2BYXSUnZHnFby7UO/JpvQNkWvaMOdC5e8wWEbRpdPKBZ43cb1wqD9OG3+qwCQL",
            new byte[] {0x8d,0x1b,0x60,0x2b,0x24,0x63,0xf9,0x75,0x55,0x85,0xc5,0x37,0x5c,0x1a,0xee,0xff,0x2a,0xf2,0xe6,0x05,0xf5,0xe6,0xb1,0xc9,0xae,0x71,0xd7,0x3a,0x8f,0x73,0xbe,0x21},
            new byte[] {0x25,0xf9,0xca,0xea,0x70,0x60,0xfa,0x43,0x76,0xb1,0xa6,0xe5,0x46,0x3b,0x80,0xde}), //:\ProgramData\RealtekHD\taskhostw.exe
Program.drive_letter + Bfs.Create("L0BmG0B6iszXFO6GeJ7YFTFJmINCytzL+YygQNUkOve28ka+pDqpoex69GCInW2f",
            new byte[] {0x75,0xaa,0x94,0xf9,0xec,0x49,0x6e,0x01,0x54,0x6e,0x7b,0xb8,0xc7,0x0a,0x9e,0xbc,0xba,0x98,0xee,0xf4,0x09,0x72,0x62,0x47,0x27,0x17,0x6c,0xa4,0x4a,0xf2,0x9c,0x77},
            new byte[] {0x1d,0x11,0x60,0x5f,0xcf,0x4b,0x12,0x88,0xd0,0x02,0x98,0xda,0x75,0x41,0x9a,0x5e}), //:\ProgramData\Windows Tasks Service\winserv.exe
Program.drive_letter + Bfs.Create("FpjXzBdD2mcDzOxIpj6RZKCv9l9dG9FtRto8m5CO58ojsSh7s8d8JQ9dg3LXj8yQ",
            new byte[] {0x1d,0x52,0x15,0x41,0x42,0x3a,0x73,0x8c,0x3f,0x18,0x26,0x01,0x62,0x74,0x88,0xe2,0xeb,0x2e,0xc6,0xaf,0x6c,0x2b,0xaf,0xd6,0xd3,0x5a,0xff,0xf9,0x9d,0x66,0xee,0xa8},
            new byte[] {0xa3,0x9b,0x91,0x75,0x7c,0x2f,0x0e,0x19,0xe8,0xd7,0x31,0x47,0x81,0x61,0x8c,0x3f}), //:\ProgramData\WindowsTask\AMD.exe
Program.drive_letter + Bfs.Create("XOFZqE2+5iWOLAOCD+fF2+wUaBUwsgz/urTulnbIOhcthRNIYlaYqZOFZBTp/cGG",
            new byte[] {0x97,0xa1,0xf8,0x3d,0x24,0xf9,0xe4,0xa9,0x4f,0x9d,0x0e,0xa3,0x85,0x57,0xd8,0x59,0x9d,0xd3,0x1e,0x7d,0xd8,0xbf,0x50,0x1d,0x6a,0xba,0x62,0xdf,0x60,0x65,0x23,0x3e},
            new byte[] {0x7e,0x2e,0xe2,0x90,0x39,0x67,0x8a,0xae,0x5c,0x72,0xc1,0x8a,0x41,0xa7,0xe4,0xfe}), //:\ProgramData\WindowsTask\AppModule.exe
Program.drive_letter + Bfs.Create("Qig51Q1i1Kf7lo1cJ9iWF8w5DYkc/C1uvqrsmKw2vcvg/d49o5dWnmDrpC2hF5M9",
            new byte[] {0x67,0x01,0x67,0xad,0xfc,0x9f,0xdc,0x60,0xf2,0x69,0x79,0x63,0x6a,0x63,0x00,0xc8,0xbe,0xfd,0x10,0x6d,0x43,0xf8,0xeb,0x96,0x8c,0x26,0x9c,0x54,0x73,0x41,0xf1,0x36},
            new byte[] {0x58,0x4f,0x1f,0xe7,0xd4,0xba,0xba,0xad,0x9e,0x7c,0x8b,0xd0,0x16,0xc4,0x5e,0xf3}), //:\ProgramData\WindowsTask\audiodg.exe
Program.drive_letter + Bfs.Create("sqOktZZAFvAGaYnUoXQLHT6TiUn6rLC//l7ZBHPVEEcapBUD5QQ1ad9cCYsFU1v0",
            new byte[] {0xfb,0x20,0x1d,0x54,0x1a,0x02,0xe7,0xfb,0xf7,0xac,0xd8,0x4b,0xa9,0xd6,0xb9,0x39,0x3c,0x7e,0x8d,0x67,0xe3,0xd4,0x00,0xb4,0xc0,0x66,0xcf,0x9a,0x86,0xe5,0x79,0x6f},
            new byte[] {0x8a,0x0f,0x0a,0xdf,0xe4,0xba,0x9d,0x1a,0x3b,0x91,0x7f,0x28,0xd3,0x68,0xe3,0xf4}), //:\ProgramData\WindowsTask\MicrosoftHost.exe
Program.drive_letter + Bfs.Create("du3u5ZlVtPr9ecxYPS1h9ggJ23exMIvjFsFiPiTsTYU=",
            new byte[] {0xc2,0x7b,0x5f,0x51,0x4f,0x05,0x85,0x8c,0x3a,0x78,0x62,0x55,0xc3,0x96,0x2c,0x64,0x8f,0xe6,0xa1,0x45,0x62,0x2c,0xc7,0x75,0xb4,0xfb,0xbc,0xa5,0xcc,0x5f,0xf3,0xf4},
            new byte[] {0x32,0xca,0x4d,0xb4,0xba,0x6f,0xee,0xc1,0xf3,0x6c,0x8b,0x58,0x98,0xad,0x4e,0xdf}), //:\Windows\SysWOW64\unsecapp.exe
};

                    foreach (string process in obfStr4)
                    {
                        RegistryKey key = Registry.LocalMachine.OpenSubKey(obfStr7[9], true);

                        if (key != null)
                        {
                            string[] valueNames = key.GetValueNames();

                            foreach (string valueName in valueNames)
                            {
                                try
                                {
                                    if (valueName.ToString().Equals(process, StringComparison.OrdinalIgnoreCase))
                                    {
                                        if (!Program.ScanOnly)
                                        {
                                            key.DeleteValue(valueName);
                                            Logger.WriteLog($"\t[+] Removed {valueName} exclusion", Logger.success);
                                            affected_items++;
                                        }
                                        else Logger.WriteLog($"\t[!!] Malicious entry {valueName} in WD exclusion", Logger.cautionLow);

                                    }
                                }
                                catch (Exception ex)
                                {
                                    Logger.WriteLog($"[x] Cannot {valueName} exclusion | {ex.Message}", Logger.error);
                                }

                            }

                            key.Close();
                        }
                    }

                    obfStr4.Clear();
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLog("\t" + obfStr7[10] + ex.Message, Logger.error);
            }

            #endregion
            #endregion

            #region HKCU
            try
            {
                RegistryKey AutorunKey = Registry.CurrentUser.OpenSubKey(obfStr7[11], true);
                if (AutorunKey != null)
                {
                    Logger.WriteLog(@"HKCU\...\Run", ConsoleColor.DarkCyan);

                    List<string> RunKeys = AutorunKey.GetValueNames().ToList();
                    foreach (string value in RunKeys)
                    {
                        string path = utils.ResolveFilePathFromString(AutorunKey, value);
                        if (path == "")
                            continue;

                        if (File.Exists(path))
                        {
                            WinTrust.VerifyEmbeddedSignature(path);
                        }
                        else
                        {
                            Logger.WriteLog($"\t[!] File is not found: {AutorunKey.GetValue(value)} from Key \"{value}\"", Logger.warn);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLog($"\t[!] Cannot open HKCU\\...\\run: {ex.Message}", Logger.error);
            }

            try
            {
                RegistryKey tektonit = Registry.CurrentUser.OpenSubKey(@"Software", true);
                if (tektonit != null)
                {
                    Logger.WriteLog(@"HKCU\Software", ConsoleColor.DarkCyan);
                    if (tektonit.GetSubKeyNames().Contains("tek?toni?t".Replace("?", "")))
                    {
                        Logger.WriteLog("\t[!] Suspicious registry key: tekt?onit".Replace("?", ""), Logger.warn);

                        if (!Program.ScanOnly)
                        {
                            tektonit.DeleteSubKeyTree("tek?ton?it".Replace("?", ""));
                            if (!tektonit.GetSubKeyNames().Contains("tek?ton?it".Replace("?", "")))
                            {
                                Logger.WriteLog("\t[+] tek?t?onit key successfully deleted".Replace("?", ""), Logger.success);
                                affected_items++;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLog($"\t[!] Cannot open HKCU\\...\\t?e?k?t?o?n?i?t: {ex.Message}".Replace("?", ""), Logger.error);
            }
            #endregion

            #region WOW6432Node
            try
            {
                RegistryKey AutorunKey = Registry.LocalMachine.OpenSubKey(obfStr7[11], true);
                if (AutorunKey != null)
                {
                    Logger.WriteLog(@"...\WO?W64?32?Node\...\Run".Replace("?", ""), ConsoleColor.DarkCyan);
                    List<string> RunKeys = AutorunKey.GetValueNames().ToList();
                    foreach (string value in RunKeys)
                    {
                        string path = utils.ResolveFilePathFromString(AutorunKey, value);
                        if (path == "")
                            continue;

                        if (File.Exists(path))
                        {
                            WinTrust.VerifyEmbeddedSignature(path);
                        }
                        else
                        {
                            Logger.WriteLog($"\t[!] File is not found: {AutorunKey.GetValue(value)} from Key \"{value}\"", Logger.warn);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLog($"\t[!] Cannot open WOW6432?Node\\...\\run: {ex.Message}".Replace("?", ""), Logger.error);
            }
            #endregion

            if (affected_items == 0)
            {
                Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
            }

            if (Program.ScanOnly)
            {
                Logger.WriteLog("\t[#] Scan only mode", ConsoleColor.Blue);
            }
        }
        void ScanTaskScheduler()
        {
            using (TaskService taskService = new TaskService())
            {
                var filteredTasks = taskService.AllTasks
                    .Where(task => task != null)
                    .OrderBy(task => task.Name)
                    .ToList();

                foreach (var task in filteredTasks)
                {
                    string taskName = task.Name;
                    string taskFolder = task.Folder.ToString();

                    foreach (ExecAction action in task.Definition.Actions.OfType<ExecAction>())
                    {
                        string arguments = action.Arguments;
                        string filePath = utils.ResolveEnvironmentVariables(action.Path.Replace("\"", ""));
                        Logger.WriteLog($"[#] Scan: {taskName} | Path: {taskFolder}", ConsoleColor.White);

                        if (!Program.ScanOnly)
                        {
                            if (taskName.StartsWith("dia?ler".Replace("?", "")))
                            {
                                taskService.GetFolder(taskFolder).DeleteTask(taskName);
                                if (taskService.GetTask($"{taskFolder}\\{taskName}") == null)
                                {
                                    Logger.WriteLog($"\t[+] M@alic@iou@s task {taskName} was deleted".Replace("@", ""), Logger.success);
                                    continue;
                                }
                            }
                        }


                        // Check if the file path contains ":\"
                        if (filePath.Contains(":\\"))
                        {
                            if (File.Exists(filePath))
                            {
                                Logger.WriteLog($"\t[.] File: {filePath} {arguments}", ConsoleColor.Gray);
                                ProcessFilePath(filePath, arguments, taskService, taskFolder, taskName);
                            }
                            else
                            {
                                Logger.WriteLog($"\t[!] File does not exist: {filePath}", Logger.warn);


                                if (Program.RemoveEmptyTasks)
                                {
                                    utils.DeleteTask(taskService, taskFolder, taskName);
                                }

                            }
                        }
                        else
                        {
                            // Check in specific directories
                            string[] checkDirectories =
                            {
                                Environment.SystemDirectory, // System32
                                $@"{Program.drive_letter}:\Wind?ows\Sys?WOW?64".Replace("?", ""), // SysWow64
                                $@"{Program.drive_letter}:\W?in?dow?s\Sys?tem?32\wbem".Replace("?",""), // Wbem
                                obfStr7[12], // PowerShell
                            };

                            bool fileFound = false;

                            foreach (string checkDir in checkDirectories)
                            {
                                string fullPath = Path.Combine(checkDir, filePath);
                                if (!fullPath.EndsWith(".exe"))
                                {
                                    fullPath += ".exe";
                                }

                                if (File.Exists(fullPath))
                                {
                                    Logger.WriteLog($"\t[.] File: {fullPath} {arguments}", ConsoleColor.Gray);
                                    ProcessFilePath(fullPath, arguments, taskService, taskFolder, taskName);
                                    fileFound = true;
                                    break; // Exit loop if file is found
                                }
                            }

                            if (!fileFound)
                            {
                                Logger.WriteLog($"\t[!] File does not exist in the specified directories for {filePath}", Logger.warn);

                                if (Program.RemoveEmptyTasks)
                                {
                                    utils.DeleteTask(taskService, taskFolder, taskName);
                                }
                            }


                        }

                        utils.ProccedFileFromArgs(filePath, arguments);

                        // Check for empty tasks
                        if (!Program.RemoveEmptyTasks)
                        {
                            if (utils.IsTaskEmpty(task))
                            {
                                Logger.WriteLog($"\t[!] Empty task {taskName}", Logger.warn);
                                if (!Program.ScanOnly)
                                {
                                    utils.DeleteTask(taskService, taskFolder, taskName);
                                }
                            }
                        }
                    }
                }
            }
        }
        void UnlockDirectory(string directoryPath)
        {
            if (!Directory.Exists(directoryPath))
            {
                return;
            }

            try
            {
                WindowsIdentity currentUser = WindowsIdentity.GetCurrent();
                SecurityIdentifier currentUserIdentity = currentUser.User;

                DirectorySecurity directorySecurity = new DirectorySecurity();
                directorySecurity.SetOwner(currentUserIdentity);

                directorySecurity.SetAccessRuleProtection(true, false);

                AuthorizationRuleCollection accessRules = directorySecurity.GetAccessRules(true, true, typeof(SecurityIdentifier));
                foreach (AuthorizationRule rule in accessRules)
                {
                    if (rule is FileSystemAccessRule fileRule && fileRule.AccessControlType == AccessControlType.Deny)
                    {
                        directorySecurity.RemoveAccessRuleSpecific(fileRule);
                    }
                }

                FileSystemAccessRule currentUserRule = new FileSystemAccessRule(
                    currentUserIdentity,
                    FileSystemRights.FullControl,
                    InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                directorySecurity.AddAccessRule(currentUserRule);

                SecurityIdentifier administratorsGroup = new SecurityIdentifier(WellKnownSidType.BuiltinAdministratorsSid, null);
                FileSystemAccessRule administratorsRule = new FileSystemAccessRule(
                    administratorsGroup,
                    FileSystemRights.FullControl,
                    InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                directorySecurity.AddAccessRule(administratorsRule);

                SecurityIdentifier usersGroup = new SecurityIdentifier(WellKnownSidType.BuiltinUsersSid, null);
                FileSystemAccessRule usersRule = new FileSystemAccessRule(
                    usersGroup,
                    FileSystemRights.FullControl,
                    InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                directorySecurity.AddAccessRule(usersRule);

                SecurityIdentifier systemIdentity = new SecurityIdentifier(WellKnownSidType.LocalSystemSid, null);
                FileSystemAccessRule systemRule = new FileSystemAccessRule(
                    systemIdentity,
                    FileSystemRights.FullControl,
                    InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                directorySecurity.AddAccessRule(systemRule);

                Directory.SetAccessControl(directoryPath, directorySecurity);


            }
            catch (Exception ex)
            {
                Logger.WriteLog($"\t[x] Error: {ex.Message}", Logger.error);
            }
        }
        void UnlockFile(string filePath)
        {
            if (!File.Exists(filePath))
            {
                return;
            }
            try
            {
                WindowsIdentity currentUser = WindowsIdentity.GetCurrent();
                SecurityIdentifier currentUserIdentity = currentUser.User;

                FileSecurity fileSecurity = new FileSecurity();
                fileSecurity.SetOwner(currentUserIdentity);

                fileSecurity.SetAccessRuleProtection(true, false);

                AuthorizationRuleCollection accessRules = fileSecurity.GetAccessRules(true, true, typeof(SecurityIdentifier));
                foreach (AuthorizationRule rule in accessRules)
                {
                    if (rule is FileSystemAccessRule fileRule && fileRule.AccessControlType == AccessControlType.Deny)
                    {
                        fileSecurity.RemoveAccessRuleSpecific(fileRule);
                    }
                }

                FileSystemAccessRule currentUserRule = new FileSystemAccessRule(
                    currentUserIdentity,
                    FileSystemRights.FullControl,
                    InheritanceFlags.None,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                fileSecurity.AddAccessRule(currentUserRule);

                SecurityIdentifier administratorsGroup = new SecurityIdentifier(WellKnownSidType.BuiltinAdministratorsSid, null);
                FileSystemAccessRule administratorsRule = new FileSystemAccessRule(
                    administratorsGroup,
                    FileSystemRights.FullControl,
                    InheritanceFlags.None,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                fileSecurity.AddAccessRule(administratorsRule);

                SecurityIdentifier usersGroup = new SecurityIdentifier(WellKnownSidType.BuiltinUsersSid, null);
                FileSystemAccessRule usersRule = new FileSystemAccessRule(
                    usersGroup,
                    FileSystemRights.FullControl,
                    InheritanceFlags.None,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                fileSecurity.AddAccessRule(usersRule);

                SecurityIdentifier systemIdentity = new SecurityIdentifier(WellKnownSidType.LocalSystemSid, null);
                FileSystemAccessRule systemRule = new FileSystemAccessRule(
                    systemIdentity,
                    FileSystemRights.FullControl,
                    InheritanceFlags.None,
                    PropagationFlags.None,
                    AccessControlType.Allow
                );
                fileSecurity.AddAccessRule(systemRule);

                File.SetAccessControl(filePath, fileSecurity);
            }
            catch (Exception ex)
            {
                Logger.WriteLog($"\t[x] Error: {ex.Message}", Logger.error);
            }
        }
        void ProcessFilePath(string filePath, string arguments, TaskService taskService, string taskFolder, string taskName)
        {
            if (File.Exists(filePath))
            {
                Logger.WriteLog($"\t[.] File: {filePath} {arguments}", ConsoleColor.Gray);

                try
                {
                    if (WinTrust.VerifyEmbeddedSignature(filePath) == WinVerifyTrustResult.Success || new FileInfo(filePath).Length > maxFileSize)
                    {
                        Logger.WriteLog($"\t[OK]", Logger.success, false);
                        return;
                    }

                    if (utils.IsSfxArchive(filePath))
                    {
                        Logger.WriteLog($"\t[!!]SFX Archive: {filePath}", Logger.cautionLow);
                        founded_mlwrPths.Add(filePath);
                        return;
                    }

                    if (utils.CheckSignature(filePath, signatures) || (utils.CheckDynamicSignature(filePath, 16, 100)))
                    {
                        Logger.WriteLog($"FOUND: {filePath}", Logger.caution);
                        founded_mlwrPths.Add(filePath);
                        return;
                    }


                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"\t[x] TaskScheduler scan error: {ex.Message}", Logger.error);
                }
            }
            else
            {
                Logger.WriteLog($"\t[!] File is not exists: {filePath}", Logger.warn);

                if (Program.RemoveEmptyTasks)
                {
                    utils.DeleteTask(taskService, taskFolder, taskName);
                }
            }
        }

        public static void ScanServices()
        {
            Logger.WriteLog("\t\tStarting scan services...", Logger.head, false);

            // Get all services
            ServiceController[] services = ServiceController.GetServices();
            HashSet<string> trustedPaths = new HashSet<string>();

            foreach (ServiceController service in services)
            {
                string serviceName = service.ServiceName;

                try
                {
                    // Get service status
                    ServiceControllerStatus status = service.Status;

                    // Get service path
                    string servicePathWithArgs = utils.GetServiceImagePath(serviceName);
                    string servicePath = utils.ResolveFilePathFromString(servicePathWithArgs).ToLower();

                    Logger.WriteLog($"[.] Service Name: {serviceName}", ConsoleColor.White);
                    Logger.WriteLog($"[.] Service: {servicePathWithArgs}", ConsoleColor.White);
                    Logger.WriteLog($"[.] Status: {status}", ConsoleColor.White);

                    if (File.Exists(servicePath))
                    {
                        if (!trustedPaths.Contains(servicePath))
                        {
                            if (WinTrust.VerifyEmbeddedSignature(servicePath) != WinVerifyTrustResult.Success)
                            {
                                ServiceStartMode startMode = utils.GetServiceStartType(service.ServiceName);
                                if (startMode != ServiceStartMode.Disabled)
                                {
                                    Logger.WriteLog($"\t[!!!] FOUND: {serviceName} {servicePath}", Logger.caution);
                                }

                                if (!Program.ScanOnly)
                                {
                                    if (status == ServiceControllerStatus.Running)
                                    {
                                        service.Stop();
                                        service.WaitForStatus(ServiceControllerStatus.Stopped);
                                        Logger.WriteLog("\t[+] Service has been stopped", Logger.success);
                                    }

                                    if (startMode != ServiceStartMode.Disabled)
                                    {
                                        utils.SetServiceStartType(service.ServiceName, ServiceStartMode.Disabled);
                                        Logger.WriteLog("\t[+] Service has been disabled", Logger.success);
                                    }
                                }

                            }
                            else
                            {
                                trustedPaths.Add(servicePath);
                                Logger.WriteLog($"\t[+] Service {serviceName}: OK", Logger.success);
                            }
                        }
                        else
                        {
                            Logger.WriteLog($"\t[+] Service {serviceName}: OK", Logger.success);
                            Logger.WriteLog("------------", ConsoleColor.White);
                            continue;
                        }
                    }
                    else
                    {
                        Logger.WriteLog("\t[!] Service file is not found", Logger.warn);
                    }

                }
                catch (Exception ex)
                {
                    Logger.WriteLog($"[x] Error proceed service: {ex.Message}", Logger.error);
                }

                Logger.WriteLog("------------", ConsoleColor.White);
            }

            if (Program.ScanOnly)
            {
                Logger.WriteLog("\t[#] Scan only mode", ConsoleColor.Blue);
            }
        }

        public void SignatureScan()
        {
            List<string> obfStr6 = new List<string>() {
Program.drive_letter + Bfs.Create("EzJGcHUsdyQfzsQ0o9VXQA==",
            new byte[] {0x98,0x04,0x3d,0x6e,0xf2,0xfe,0xf1,0x41,0xd7,0x34,0x0b,0x7e,0x19,0xf7,0xe7,0xf3,0xd2,0x0f,0x1c,0x22,0xa5,0xd0,0x11,0xbc,0xa2,0xaf,0x65,0x0f,0xb3,0x0a,0xf3,0xe3},
            new byte[] {0xd2,0xd4,0x39,0x11,0x09,0xe6,0x0d,0x2b,0x80,0x68,0x56,0x51,0x4c,0xce,0x7d,0x60}), //:\ProgramData
Program.drive_letter + Bfs.Create("LddWPrtfVqKazBln66aR2g==",
            new byte[] {0xbc,0x01,0xac,0x11,0x60,0xc5,0x3b,0x86,0x72,0xd5,0x18,0x83,0x5c,0x3a,0x56,0x6d,0xef,0x4b,0xd1,0x9a,0x7b,0x64,0x35,0xef,0xf2,0xe7,0x78,0xad,0x55,0x13,0x6b,0x75},
            new byte[] {0x30,0xcc,0xdd,0xa4,0x32,0xec,0x8e,0x2c,0x10,0x0c,0xfb,0xbb,0x96,0x50,0x69,0x7c}), //:\Program Files
Program.drive_letter + Bfs.Create("1cHYhVHkWisusEkUUzkMx3G+56b4V+YYghxa/Uk+91o=",
            new byte[] {0x71,0xe0,0x4b,0x34,0x4f,0xad,0x2b,0x34,0xb7,0xc3,0xd3,0xde,0xc9,0xc3,0x7a,0x30,0x3a,0xef,0xab,0xca,0x33,0xfd,0x5d,0x75,0x77,0x1c,0xf9,0x75,0x40,0x26,0xbe,0x31},
            new byte[] {0x9a,0x28,0x91,0x64,0x22,0x36,0x25,0xc8,0xd7,0x47,0xa6,0xf7,0x6e,0xf1,0x5b,0x73}), //:\Program Files (x86)
Program.drive_letter + Bfs.Create("wN/pytOVSdrkNmH/E8JDRQ==",
            new byte[] {0x51,0x80,0x4b,0xf7,0x77,0xde,0xdd,0xbf,0xe9,0xb3,0xaf,0xd3,0xef,0x29,0x22,0x6c,0x80,0xe6,0x1c,0x47,0xf8,0x19,0xa3,0x76,0xd6,0xd3,0xb6,0x61,0x8d,0xcc,0xce,0x80},
            new byte[] {0x23,0x83,0x26,0x06,0x96,0xbd,0x45,0x6d,0xb4,0x40,0x27,0xfd,0xbf,0xd7,0x67,0xa9}), //:\Windows
            };

            if (Program.fullScan)
            {
                DriveInfo[] allDrives = DriveInfo.GetDrives();
                var localDrives = allDrives.Where(drive => drive.DriveType == DriveType.Fixed && !drive.Name.Contains(Environment.SystemDirectory.Substring(0, 2)));
                foreach (var drive in localDrives)
                {
                    obfStr6.Add(drive.Name);
                }
            }

            if (!Program.WinPEMode)
            {
                obfStr6.Add(Path.GetTempPath());
                obfStr6.Add(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile));
            }

            signatures = utils.RestoreSignatures(signatures);

            foreach (string path in obfStr6)
            {
                if (!Directory.Exists(path))
                {
                    continue;
                }

                List<string> executableFiles = utils.GetFiles(path, "*.exe", 0, Program.maxSubfolders);
                foreach (var filepath in executableFiles)
                {
                    string file = $@"{filepath}";
                    Console.WriteLine($"Analyzing {file}...");
                    try
                    {

                        FileInfo fileInfo = new FileInfo(file);

                        if (fileInfo.Length > maxFileSize)
                        {
                            Console.ForegroundColor = ConsoleColor.DarkGreen;
                            Console.WriteLine("\t[OK]");
                            Console.ForegroundColor = ConsoleColor.White;
                            continue;
                        }

                        WinVerifyTrustResult trustResult = WinTrust.VerifyEmbeddedSignature(file);
                        if (trustResult == WinVerifyTrustResult.Success)
                        {
                            Console.ForegroundColor = ConsoleColor.DarkGreen;
                            Console.WriteLine("\t[OK]");
                            Console.ForegroundColor = ConsoleColor.White;
                            continue;
                        }

                        if (utils.IsSfxArchive(file))
                        {
                            Logger.WriteLog($"\t[!!] SFX Archive: {file}", Logger.cautionLow);
                            continue;
                        }

                        bool sequenceFound = utils.CheckSignature(file, signatures);

                        if (sequenceFound)
                        {
                            Logger.WriteLog($"\tFOUND: {file}", ConsoleColor.Magenta);

                            founded_mlwrPths.Add(file);
                            prevMlwrPths.Add(file);
                            continue;
                        }

                        bool computedSequence = utils.CheckDynamicSignature(file, 16, 100);
                        if (computedSequence)
                        {

                            founded_mlwrPths.Add(file);
                            prevMlwrPths.Add(file);
                            Logger.WriteLog($"\tFOUND: {file}", ConsoleColor.Magenta);
                            continue;
                        }

                        Console.ForegroundColor = ConsoleColor.DarkGreen;
                        Console.WriteLine("\t[OK]");
                        Console.ForegroundColor = ConsoleColor.White;
                    }
                    catch (Exception ex)
                    {
                        Logger.WriteLog($"\t[x] Error analyzing file {file}\n{ex.Message}", Logger.error);
                    }
                }
                executableFiles.Clear();
            }
            signatures.Clear();

            if (!Program.ScanOnly && founded_mlwrPths.Count == 0)
            {

                Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);


            }
            else
            {
                if (!Program.ScanOnly)
                {
                    Logger.WriteLog($"\t[!!] Found threats: {founded_mlwrPths.Count}", Logger.cautionLow, false);
                    Logger.WriteLog($"\t[#] Restart cleanup...", ConsoleColor.Blue, false);
                    CleanFoundedMlwr();
                }
                else Logger.WriteLog("\t[#] Scan only mode", ConsoleColor.Blue);
            }
        }

        public void CleanFoundedMlwr()
        {
            if (founded_mlwrPths.Count > 0)
            {
                Logger.WriteLog("\t\tRemoving found mal?ici?ous files...".Replace("?", ""), Logger.head, false);

                if (!Directory.Exists(quarantineFolder))
                {
                    try
                    {
                        Directory.CreateDirectory(quarantineFolder);
                    }
                    catch (Exception)
                    {
                        quarantineFolder = Path.Combine(Environment.CurrentDirectory, $"minerseаrch_quarаntine_{utils.GetRndString()}");
                        Directory.CreateDirectory(quarantineFolder);
                    }
                }

                string prevMlwrPathsLog = Path.Combine(quarantineFolder, $"previousMlwrPaths_{utils.GetRndString()}.txt");

                File.WriteAllLines(prevMlwrPathsLog, prevMlwrPths);

                foreach (string path in founded_mlwrPths)
                {
                    if (File.Exists(path))
                    {

                        UnlockFile(path);
                        try
                        {
                            File.SetAttributes(path, FileAttributes.Normal);
                            File.Copy(path, Path.Combine(quarantineFolder, Path.GetFileName(path) + $"_{utils.CalculateMD5(path)}.bak"), true);
                            File.Delete(path);
                            Logger.WriteLog($"\t[+] M~ali~c~i~o~u~s file {path} deleted".Replace("~", ""), Logger.success);

                        }
                        catch (Exception)
                        {
                            Logger.WriteLog($"\t[!!] Cannot delete file {path}", Logger.cautionLow);
                            Logger.WriteLog($"\t[.] Trying to unlock directory...", ConsoleColor.White);
                            UnlockDirectory(new FileInfo(path).DirectoryName);
                            try
                            {
                                File.Copy(path, Path.Combine(quarantineFolder, Path.GetFileName(path) + $"_{utils.CalculateMD5(path)}.bak"), true);
                                File.Delete(path);
                                if (!File.Exists(path))
                                {
                                    Logger.WriteLog($"\t[+] M~a~l~i~c~i~o~u~s file {path} deleted".Replace("~", ""), Logger.success);
                                }

                            }
                            catch (Exception ex)
                            {
#if DEBUG
                                Logger.WriteLog($"\t[x] cannot delete file {path}\n{ex.Message}\n{ex.StackTrace}", Logger.error);
                                Logger.WriteLog($"\t[.] Trying to find blocking process...", ConsoleColor.White);

#else
                                Logger.WriteLog($"\t[x] cannot delete file {path} | {ex.Message}", Logger.error);
                                Logger.WriteLog($"\t[.] Trying to find blocking process...", ConsoleColor.White);

#endif
                                try
                                {
                                    try
                                    {
                                        uint processId = utils.GetProcessIdByFilePath(path);

                                        if (processId != 0)
                                        {
                                            Process process = Process.GetProcessById((int)processId);
                                            if (!process.HasExited)
                                            {
                                                process.Kill();
                                                Logger.WriteLog("Blocking process has been terminated", Logger.success);
                                            }
                                        }
                                    }
                                    catch (Exception) { }

                                    File.Copy(path, Path.Combine(quarantineFolder, Path.GetFileName(path) + $"_{utils.CalculateMD5(path)}.bak"), true);
                                    File.Delete(path);
                                    if (!File.Exists(path))
                                    {
                                        Logger.WriteLog($"\t[+] Ma?li?ci?ou?s file {path} deleted".Replace("?", ""), Logger.success);
                                    }
                                }
                                catch (Exception)
                                {
                                    Logger.WriteLog($"\t[x] Failed to delete file: {path}\n{ex.Message}", Logger.error);
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                if (!Program.ScanOnly)
                {
                    Logger.WriteLog("\t[#] No threats found", ConsoleColor.Blue);
                }
            }
        }
    }
}
